{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"爱奇艺二级","path":"qiyi","rule":"js:\r\n// 数据定位\r\nvar d = [];\r\nMY_URL = MY_URL.split(\"#\")[0].replace('www', 'm');\r\nhtml = request(MY_URL);\r\nviedeoInfo = JSON.parse(html.match(/\"albumInfo\"[\\S\\s]+(?=,\"albumListInfo\")/)[0].replace('\"albumInfo\":', ''));\r\ninfoAdd = JSON.parse(html.match(/\"videoInfo\":{[\\S\\s]+}(?=,\"videoType\")/)[0].replace('\"videoInfo\":', ''));\r\n影片名称 = viedeoInfo.albumName ? viedeoInfo.albumName : infoAdd.videoName;\r\n// 第二标题 = html.match(/\"focus\"[\\S\\s]+(?=,\"isEffect\")/)[0].replace('\"focus\":', '');\r\n第二标题 = infoAdd.focus;\r\n得分 = infoAdd.score;\r\n封面 = viedeoInfo.imageUrl ? 'https:' + viedeoInfo.imageUrl.replace('\\u002F', '/').replace('.jpg', '_260_360.jpg') + \"@Referer=\" : 'https:' + infoAdd.imageUrl.replace('\\u002F', '/') + \"@Referer=\";\r\n类型 = infoAdd.channelName;\r\n简介 = viedeoInfo.desc ? viedeoInfo.desc : infoAdd.desc;\r\n导演 = infoAdd.directors;\r\n主演 = infoAdd.mainActors;\r\n标签 = infoAdd.tags;\r\ntry {\r\n    更新日历 = viedeoInfo.updateStrategy;\r\n    更新进度 = viedeoInfo.showContent.replace('\\u002F', '/') ? viedeoInfo.showContent.replace('\\u002F', '/') : viedeoInfo.showContent;\r\n    追剧日历 = 更新日历 == '' ? '<font color=\"red\">' + 更新进度 + '</font>' : 更新日历 + '\\t<font color=\"red\">' + 更新进度 + '</font>';\r\n} catch (e) {\r\n    追剧日历 = '没有更新计划~';\r\n}\r\n上映时间 = infoAdd.issueTime;\r\n剧集ID = infoAdd.albumQipuId;\r\n短讯 = \"⭐\" + 类型 + \"⭐\" + (第二标题 ? 第二标题.replace(/\"/g, '') : '') + (得分 == 0 ? '' : '-' + 得分 + '分-') + 上映时间 + '\\n' + 标签;\r\n// 重定义二级页面数据\r\nsetPageTitle(影片名称);\r\nsetPagePicUrl(封面);\r\n// 前置参数和预处理---\r\nvar lazy = $('').lazyRule(() => {\r\n      var url = input;\n    function prepareParses(parses, url, playlist, isTest, flag) {\n    const aliasMap = new Map([\n        ['腾讯', new Set(['腾讯', '腾讯视频'])],\n    ]);\n\n    function getOriginalByAlias(key) {\n        for (let [k, v] of aliasMap) {\n            for (let it of v) {\n                if (it instanceof RegExp) {\n                    //正则表达;\n                    if (it.test(key)) {\n                        return k;\n                    }\n                } else {\n                    //字符串;\n                    if (it == key) {\n                        return k;\n                    }\n                }\n            }\n        }\n        return key; // 原始值\n    }\n    flag = getOriginalByAlias(flag) || flag;\n    playlist = playlist || {\n        urls: [],\n        names: [],\n        headers: [],\n        is: \"#isVideo=true#\",\n    };\n    let Proxy = $.require(\"LocalProxy?rule=DrpyHiker\");\n    let proxyUrl = Proxy.startProxy(MY_RULE.title, GM.getSelfKey());\n    let each = (v, i) => {\n        if (!isTest && (v.forbidden || !String(v.flag).split(\"|\").includes(flag))) return;\n        playlist.names.push(v.name);\n        if (v.headers) {\n            playlist.headers.push(v.headers);\n        }\n        if (v.runType === \"JSON\") {\n            let param = {\n                //url: v.url,\n                method: v.method,\n                headers: v.headers,\n                jsonPath: v.jsonPath\n            };\n            playlist.urls.push(proxyUrl + \"?runType=JSON&url=\" + encodeURIComponent(base64Encode(v.url + url)) + \"&param=\" + encodeURIComponent(base64Encode(JSON.stringify(param))));\n        } else if (v.runType === \"JS\") {\n            playlist.urls.push(proxyUrl + \"?runType=JS&url=\" + encodeURIComponent(base64Encode(url)) + (isTest ? \"&param=\" + encodeURIComponent(base64Encode(JSON.stringify(v))) : \"&index=\" + i));\n        } else {\n            playlist.urls.push(\"video://\" + v.url + url);\n        }\n    };\n    parses.forEach(each);\n    if (!playlist.urls.length) {\n        flag = getDefaultFlag(url).replace(\"iqiyi\", \"qiyi\");\n        parses.forEach(each);\n    }\n    if (!playlist.urls.length) {\n        if (isofficial(url) && (!url.includes(\".m3u8\") || url.includes(\".mp4\"))) {\n            return \"web://\" + url;\n        } else {\n            return url;\n        }\n    }\n    return JSON.stringify(playlist);\n}\n\n    let parses = $.require(\"configs?rule=DrpyHiker\").getJson();\n\n    if (!parses.length) return \"web://\" + url;\n    let playlist = {\n        urls: [],\n        names: [],\n        headers: [],\n        is: \"#isVideo=true#\",\n    };\n    try {\n        let useDanmu = !!getItem(\"useDanmu\", \"\");\n         if (useDanmu) {\n            playlist.danmu = $.require('dmFun?rule=dm盒子').dmRoute(url);\n        }\n    } catch {}\n    flag = \"iqiyi\"\n    return prepareParses(parses, url, playlist, false,flag);\n});\r\nvar Color = \"#19B89D\";\r\nvar 每页集数 = 20;\r\nvar 搜索模式 = '分组';\r\nvar 调用名称 = '简影';\r\nputMyVar('折叠', '关');\r\nputMyVar('日历', '关');\r\nputMyVar('lazy', lazy);\r\n// 清除变量\r\naddListener('onClose', $.toString(() => {\r\n    clearMyVar('分集起');\r\n    clearMyVar('分集终');\r\n    clearMyVar('lazy');\r\n    clearMyVar('剧集列表');\r\n    clearMyVar('影片类型');\r\n}))\r\n// 设置动态最新章节\r\nsetLastChapterRule('js:' + $.toString((MY_URL) => {\r\n    eval(JSON.parse(request('hiker://page/getUpdate?rule=爱奇艺.cy')).rule);\r\n}, MY_URL));\r\n// 页面内容正文---\r\n// 基本信息模块\r\nd.push({\r\n    title: 短讯,\r\n    desc: 简介 == '' ? '暂无简介' : 简介.substring(0, 45) + '‘‘’’…<font color=\"#1C1C1C\">详情</font>',\r\n    img: 封面,\r\n    url: $().rule((简介) => {\r\n        res = {};\r\n        var d = [];\r\n        d.push({\r\n            title: '影片简介：' + '\\n\\t\\t\\t\\t\\t\\t\\t' + 简介,\r\n            col_type: 'long_text'\r\n        });\r\n        res.data = d;\r\n        setHomeResult(res);\r\n    }, 简介),\r\n    col_type: 'movie_1_vertical_pic_blur',\r\n    extra: {\r\n        longClick: [{\r\n            title: '预告、花絮开关', js: $.toString(() => {\r\n                if (getItem('previewSwitch', 'fold') == 'fold') {\r\n                    setItem('previewSwitch', 'open');\r\n                    refreshPage(true);\r\n                    return \"toast://预告已经切换为展示~\";\r\n                } else {\r\n                    setItem('previewSwitch', 'fold');\r\n                    refreshPage(true);\r\n                    return \"toast://预告不再展示~\";\r\n                }\r\n            })\r\n        },{\r\n            title: 'dm盒子', js: $.toString(() => {\r\n                return 'hiker://page/setting#noHistory#?rule=dm盒子';\r\n            })\r\n        },{\n            title: getItem(\"useDanmu\",\"\")==\"\"?\"弹幕：关\":\"弹幕：开\",\n            js: $.toString(() => {\n                \n          return $(\"\").lazyRule(()=>{\n                setItem(\"useDanmu\",getItem(\"useDanmu\",\"\")==\"\"?\"1\":\"\")\n        refreshPage()\nreturn \"toast://弹幕已\" + (getItem(\"useDanmu\",\"\")==\"1\"?\"开启\":\"关闭\")\n                \n                })\n            })\n            \n            \n        }]\r\n    }\r\n});\r\n// 追剧日历模块\r\nd.push({\r\n    title: '‘‘’’<small><font><font color=\"#098AC1\">📅追剧</font></small>',\r\n    url: $('#noLoading#').lazyRule((追剧日历) => {\r\n        if (getMyVar('日历', '关') == '开') {\r\n            deleteItem('追剧日历');\r\n            putMyVar('日历', '关');\r\n        } else {\r\n            addItemAfter('显示模式', {\r\n                title: 追剧日历,\r\n                col_type: \"rich_text\",\r\n                extra: {\r\n                    id: '追剧日历'\r\n                }\r\n            });\r\n            putMyVar('日历', '开');\r\n        }\r\n        return 'toast://已切换日历为:' + getMyVar('日历', '开')\r\n    }, 追剧日历),\r\n    col_type: 'text_4'\r\n});\r\n// 豆瓣影讯模块\r\nd.push({\r\n    title: '‘‘’’<small><font color=\"#098AC1\">🍃豆瓣</font></small>',\r\n    url: 'hiker://search?s=' + 影片名称 + '&rule=青豆',\r\n    col_type: 'text_4',\r\n    extra: {\r\n        id: '豆瓣影讯'\r\n    }\r\n});\r\n// 演职人员模块\r\nif (导演 && 主演) {\r\n    d.push({\r\n        title: '‘‘’’<small><font color=\"#098AC1\">⬇️演职</font></small>',\r\n        url: $('#noLoading#').lazyRule((导演, 主演) => {\r\n            if (getMyVar('折叠', '关') == '开') {\r\n                deleteItem('演职数据');\r\n                putMyVar('折叠', '关');\r\n            } else {\r\n                addItemAfter('显示模式', {\r\n                    title: '<b>导演:</b>' + 导演 + '<br><b>主演:</b>' + 主演,\r\n                    col_type: \"rich_text\",\r\n                    extra: {\r\n                        id: '演职数据'\r\n                    }\r\n                });\r\n                putMyVar('折叠', '开');\r\n            }\r\n            return 'toast://已切换折叠为:' + getMyVar('折叠', '开')\r\n        }, 导演, 主演),\r\n        col_type: 'text_4',\r\n        extra: {\r\n            id: '演职人员'\r\n        }\r\n    })\r\n}\r\n// 显示模式更改模块\r\nd.push({\r\n    title: '‘‘’’<small><font color=\"#098AC1\">🔃' + getItem('模式', '双边') + '</font></small>',\r\n    url: $('#noLoading#').lazyRule((每页集数) => {\r\n        if (getItem('模式', '双边') == '列表') {\r\n            for (let index = 1; index <= 每页集数; index++) {\r\n                updateItem('qiyi' + index, {\r\n                    col_type: 'movie_2',\r\n                });\r\n            }\r\n            setItem('模式', '双边')\r\n        } else {\r\n            for (let index = 1; index <= 每页集数; index++) {\r\n                updateItem('qiyi' + index, {\r\n                    col_type: 'movie_1_left_pic',\r\n                });\r\n            }\r\n            setItem('模式', '列表')\r\n        }\r\n        updateItem('显示模式', {\r\n            title: '‘‘’’<small><font color=\"#098AC1\">🔃' + getItem('模式', '双边') + '</font></small>',\r\n        });\r\n        return 'toast://已切换模式为:' + getItem('模式', '双边')\r\n    }, 每页集数),\r\n    col_type: 'text_4',\r\n    extra: {\r\n        id: '显示模式'\r\n    }\r\n});\r\n// 选插模块——局部刷新版\r\n/*\n来源 = 'qy';\r\nputMyVar('简插', $.toString(() => {\r\n    let titleArr = []\r\n    setFile = readFile('hiker://files/rules/DuanNian/MyParse.json');\r\n    try {\r\n        eval('json=' + setFile);\r\n    } catch (e) {\r\n        log('Json解析发生了错误:' + e.message);\r\n    }\r\n    titleArr = json.title;\r\n    let barry1 = ['✍️辅助'];\r\n    let barry2 = ['📦️魔断'];\r\n    let barry3 = ['🔍搜索'];\r\n    titleArr = barry3.concat(titleArr);\r\n    titleArr = barry2.concat(titleArr);\r\n    titleArr = barry1.concat(titleArr);\r\n    eval('op=json.settings.' + 来源);\r\n    titleArr = titleArr.map((it) => {\r\n        return it === op ? '👉' + it : it;\r\n    });\r\n    putMyVar('解析数组', titleArr);\r\n    putMyVar('setFile', setFile);\r\n}))\r\neval(getMyVar('简插'));\r\nd.push({\r\n    title: '解析：🔘<font color=\"' + Color + '\">' + op + '</font>\\t\\t页码：<font color=\"' + Color + '\">' + ((getMyVar('分集起', '首页') == '首页') ? '首页' : (getMyVar('分集起') + '-' + getMyVar('分集终'))) + '</font>',\r\n    url: $('#noLoading#').lazyRule((json, 来源, Color, op, 影片名称, 搜索模式, 调用名称) => {\r\n        eval(getMyVar('简插'));\r\n        return $(eval(getMyVar('解析数组')), 3).select((json, 来源, Color, op, 影片名称, 搜索模式, 调用名称) => {\r\n            setFile = getMyVar('setFile');\r\n            input = input.replace(/👉/g, '');\r\n            if (input === '✍️辅助') {\r\n                return $().rule(() => {\r\n                    eval(JSON.parse(request('hiker://page/home?rule=配置助手')).rule);\r\n                })\r\n            } else if (input === '📦️魔断') {\r\n                return \"hiker://page/Route?rule=MyFieldᴰⁿ&type=编辑#noHistory#\";\r\n            } else if (input === '🔍搜索') {\r\n                if (搜索模式 == '分组') {\r\n                    return \"hiker://search?s=\" + 影片名称 + \"&group=\" + 调用名称;\r\n                } else {\r\n                    return \"hiker://search?s=\" + 影片名称 + \"&rule=\" + 调用名称;\r\n                }\r\n            }\r\n            // 原先的配置\r\n            originSettings = JSON.stringify(json.settings);\r\n            // 修改配置\r\n            eval('json.settings.' + 来源 + '=input;');\r\n            setFile = setFile.replace(originSettings, JSON.stringify(json.settings));\r\n            saveFile('hiker://files/rules/DuanNian/MyParse.json', setFile);\r\n            // 刷新元素\r\n            eval(getMyVar('简插'));\r\n            updateItem('op', {\r\n                title: '解析：🔘<font color=\"' + Color + '\">' + op + '</font>\\t\\t页码：<font color=\"' + Color + '\">' + ((getMyVar('分集起', '首页') == '首页') ? '首页' : (getMyVar('分集起') + '-' + getMyVar('分集终'))) + '</font>',\r\n            });\r\n            return \"toast://切换解析口为:\" + input;\r\n        }, json, 来源, Color, op, 影片名称, 搜索模式, 调用名称)\r\n    }, json, 来源, Color, op, 影片名称, 搜索模式, 调用名称),\r\n    img: 'hiker://files/rules/cy/tubiao/iqiyi.svg',\r\n    col_type: \"avatar\",\r\n    extra: {\r\n        id: 'op'\r\n    }\r\n});\r*/\n\nvar yp = JSON.parse(fetch(\"hiker://files/data/聚阅/云盘收藏.json\"))\n\nd.push({\n    \"title\": yp[影片名称] ? \"\\t\\t云盘链接\" : \"\\t\\t云盘君\",\n    img: 'hiker://files/rules/cy/tubiao/youku.svg',\n    col_type: \"avatar\",\n    url: yp[影片名称] ? yp[影片名称] : \"hiker://page/sou#noRecordHistory##noHistory#?rule=云盘君.简\",\n    extra: { \n        searchTerms: 影片名称,\n        longClick: [{\n            title: \"云盘简\", \n            js: $.toString(() => {\n                  return \"hiker://page/sou#noRecordHistory##noHistory#?rule=云盘君.简\";\n              })\n          },{\n            title: '链接',\n            js: $.toString((name) => {\n         \n        return $(\"\").input((name)=>{\n                var yp = JSON.parse(fetch(\"hiker://files/data/聚阅/云盘收藏.json\"))\n        yp[name] = input;\n        refreshPage();\n       writeFile(\"hiker://files/data/聚阅/云盘收藏.json\", JSON.stringify(yp))\n         return \"hiker://empty\"\n          },name)\n           },影片名称)\n           }]\n        }\n     \n})\n\n\n// 同时设置选集和展示---\r\n// 因为电影没有summary字段所以if单独出来——预告也这样处理吧~\r\nif (类型 == '电影' || infoAdd.videoName.match(/预告/)) {\r\n    d.push({\r\n        title: \"点我播放\",\r\n        col_type: \"text_center_1\",\r\n        url: MY_URL.replace('m', 'www') + lazy,\r\n        desc: \"观影不等待...\"\r\n    });\r\n} else {\r\n    // 有一部分奇葩的纪录片也是有年份的，普通接口还没有数据只好这样判断了，注意是'\"\"'~\r\n    if (html.match(/\"summary\":[\\S\\s]+(?=,\"count\")/)[0].replace('\"summary\":', '') != '\"\"') {\r\n        putMyVar('影片类型', '综艺类型');\r\n        时间线选集 = JSON.parse(html.match(/\"summary\":[\\S\\s]+(?=,\"count\")/)[0].replace('\"summary\":', ''));\r\n        剧集列表 = [];\r\n        // 偷懒！按啥年份和月份选集，简直浪费时间~\r\n        时间线选集.forEach(list => {\r\n            年份 = list.year;\r\n            剧集信息 = JSON.parse(request(\"https://pcw-api.iqiyi.com/album/source/svlistinfo?cid=6&sourceid=\" + 剧集ID + \"&timelist=\" + 年份 + \"&callback=window.Q.__callbacks__.cbp5bps9\").match(/{\"code\"[\\S\\s]+}(?=\\);}catch\\(e\\){})/)[0]);\r\n            剧集列表 = 剧集列表.concat(剧集信息.data[年份]);\r\n        });\r\n        剧集长度 = 剧集列表.length;\r\n    } else {\r\n        putMyVar('影片类型', '电视剧');\r\n        剧集信息 = JSON.parse(fetch(\"https://pcw-api.iqiyi.com/albums/album/avlistinfo?aid=\" + 剧集ID + \"&size=\" + 每页集数 + \"&page=1\" + \"&callback=window.Q.__callbacks__.cbu0ch7s\").match(/{\"code\"[\\S\\s]+}(?=\\);}catch\\(e\\){})/)[0]).data;\r\n        当前集数 = 剧集信息.latestOrder;\r\n        正片列表 = 剧集信息.epsodelist;\r\n        预告列表 = 剧集信息.updateprevuelist;\r\n        if (getItem('previewSwitch', 'fold') == 'fold') {\r\n            显示的剧集列表 = 正片列表;\r\n        } else {\r\n            try {\r\n                显示的剧集列表 = 正片列表.concat(预告列表);\r\n            } catch (e) {\r\n                显示的剧集列表 = 正片列表;\r\n            }\r\n        }\r\n        剧集长度 = 当前集数;\r\n    }\r\n\r\n    // 滚动剧集条栏\r\n    if (剧集长度 > 每页集数) {\r\n        putMyVar('刷新选集', $.toString(() => {\r\n            putMyVar('分集起', start);\r\n            putMyVar('分集终', end);\r\n            eval(getMyVar('简插'));\r\n            updateItem('op', {\r\n                title: '解析：🔘<font color=\"' + Color + '\">' + op + '</font>\\t\\t页码：<font color=\"' + Color + '\">' + ((getMyVar('分集起', '首页') == '首页') ? '首页' : (getMyVar('分集起') + '-' + getMyVar('分集终'))) + '</font>',\r\n            })\r\n            // 删除\r\n            for (let i = 1; i <= 每页集数; i++) {\r\n                deleteItem('qiyi' + i);\r\n            }\r\n            // 添加\r\n            lazy = getMyVar('lazy');\r\n            if (getMyVar('影片类型') == '综艺类型') {\r\n                剧集列表 = JSON.parse(getMyVar('剧集列表'));\r\n                显示的剧集列表 = 剧集列表.slice(start - 1, end);\r\n            } else {\r\n                剧集信息 = JSON.parse(fetch(\"https://pcw-api.iqiyi.com/albums/album/avlistinfo?aid=\" + 剧集ID + \"&size=\" + 每页集数 + \"&page=\" + page + \"&callback=window.Q.__callbacks__.cbu0ch7s\").match(/{\"code\"[\\S\\s]+}(?=\\);}catch\\(e\\){})/)[0]).data;\r\n                正片列表 = 剧集信息.epsodelist;\r\n                预告列表 = 剧集信息.updateprevuelist;\r\n                if (getItem('previewSwitch', 'fold') == 'fold') {\r\n                    显示的剧集列表 = 正片列表;\r\n                } else {\r\n                    try {\r\n                        显示的剧集列表 = 正片列表.concat(预告列表);\r\n                    } catch (e) {\r\n                        显示的剧集列表 = 正片列表;\r\n                    }\r\n                }\r\n            }\r\n            newArray = [];\r\n            index = 1;\r\n            显示的剧集列表.forEach(list => {\r\n                if (getItem('模式', '双边') == '列表') {\r\n                    newArray.push({\r\n                        title: list.subtitle,\r\n                        img: list.imageUrl.replace('.jpg', '_480_270.jpg') + \"@Referer=\",\r\n                        url: list.playUrl + lazy,\r\n                        desc: (list.order ? '第' + list.order + '集' + '\\t' : '') + list.duration + '\\n更新时间:' + list.period,\r\n                        col_type: 'movie_1_left_pic',\r\n                        extra: {\r\n                            id: 'qiyi' + index\r\n                        }\r\n                    });\r\n                } else {\r\n                    newArray.push({\r\n                        title: list.subtitle,\r\n                        img: list.imageUrl.replace('.jpg', '_480_270.jpg') + \"@Referer=\",\r\n                        url: list.playUrl + lazy,\r\n                        desc: (list.order ? '第' + list.order + '集' + '\\t' : '') + list.duration + '\\n更新时间:' + list.period,\r\n                        col_type: 'movie_2',\r\n                        extra: {\r\n                            id: 'qiyi' + index\r\n                        }\r\n                    });\r\n                }\r\n                index += 1;\r\n            });\r\n            addItemAfter(getMyVar('末页'), newArray);\r\n            // putMyVar('显示的剧集列表', 显示的剧集列表);\r\n        }));\r\n        d.push({\r\n            col_type: 'scroll_button',\r\n            url: 'hiker://empty',\r\n            title: '∷',\r\n            extra: {\r\n                id: '占位符',\r\n            }\r\n        })\r\n        putMyVar('分集起', 1);\r\n        putMyVar('分集终', 每页集数);\r\n        try {\r\n            putMyVar('剧集列表', 剧集列表);\r\n        } catch (e) {\r\n            log('电视剧没有现成的剧集列表');\r\n        }\r\n        总页数 = Math.ceil(剧集长度 / 每页集数);\r\n        start = 1;\r\n        end = 每页集数;\r\n        for (let page = 1; page <= 总页数; page++) {\r\n            if (end > 剧集长度) {\r\n                end = 剧集长度;\r\n            }\r\n            d.push({\r\n                title: start + '-' + end,\r\n                url: $('#noLoading##noHistory#').lazyRule((start, end, Color, 来源, page, 剧集ID, 每页集数) => {\r\n                    eval(getMyVar('刷新选集'));\r\n                    return \"hiker://empty\";\r\n                }, start, end, Color, 来源, page, 剧集ID, 每页集数),\r\n                col_type: 'scroll_button',\r\n                extra: {\r\n                    id: start + '-' + end\r\n                }\r\n            });\r\n            if (end < 剧集长度) {\r\n                start += 每页集数;\r\n                end += 每页集数;\r\n            }\r\n        }\r\n        // 记录末页的id\r\n        putMyVar('末页', start + '-' + end);\r\n    } else {\r\n        putMyVar('分集起', 1);\r\n        putMyVar('分集终', 剧集长度);\r\n    }\r\n    // 展示剧集:\r\n    if (getMyVar('影片类型') == '综艺类型') {\r\n        putMyVar('剧集列表', 剧集列表);\r\n        显示的剧集列表 = 剧集列表.slice(0, getMyVar('分集终'));\r\n    }\r\n    // putMyVar('显示的剧集列表', 显示的剧集列表);\r\n    index = 1;\r\n    显示的剧集列表.forEach(list => {\r\n        if (getItem('模式', '双边') == '列表') {\r\n            d.push({\r\n                title: list.subtitle,\r\n                img: list.imageUrl.replace('.jpg', '_480_270.jpg') + \"@Referer=\",\r\n                url: list.playUrl + lazy,\r\n                desc: (list.order ? '第' + list.order + '集' + '\\t' : '') + list.duration + '\\n更新时间:' + list.period,\r\n                col_type: 'movie_1_left_pic',\r\n                extra: {\r\n                    id: 'qiyi' + index\r\n                }\r\n            });\r\n        } else {\r\n            d.push({\r\n                title: list.subtitle,\r\n                img: list.imageUrl.replace('.jpg', '_480_270.jpg') + \"@Referer=\",\r\n                url: list.playUrl + lazy,\r\n                desc: (list.order ? '第' + list.order + '集' + '\\t' : '') + list.duration + '\\n更新时间:' + list.period,\r\n                col_type: 'movie_2',\r\n                extra: {\r\n                    id: 'qiyi' + index\r\n                }\r\n            });\r\n        }\r\n        index += 1;\r\n    });\r\n}\r\nsetResult(d);\r\n"},{"name":"爱奇艺最新章节","path":"getUpdate","rule":"html = request(MY_URL);\nviedeoInfo = JSON.parse(html.match(/\"albumInfo\"[\\S\\s]+(?=,\"albumListInfo\")/)[0].replace('\"albumInfo\":', ''));\ntry {\n    更新进度 = viedeoInfo.showContent.replace('\\u002F', '/') ? viedeoInfo.showContent.replace('\\u002F', '/') : viedeoInfo.showContent;\n} catch (e) {\n    更新进度 = '电影？已上映？！';\n}\nsetResult(更新进度);"}],"title":"爱奇艺.cy","author":"侠名","version":0,"type":"video","url":"hiker://empty##","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\n\nvar d = [];\n\nd.push({\n\n    col_type: \"x5_webview_single\",\n\n    url: \"https://m.iqiyi.com/\",\n\n    desc: \"float&&100%\",\n\n    extra: {\n\n        canBack: true,\n\n        urlInterceptor: $.toString((MY_RULE) => {\n\n            // 拦截，进入原生二级\n\n            if (input.match(/v_/)) {\n\n                return $.toString((url, MY_RULE) => {\n\n                    fba.open(JSON.stringify({\n\n                        rule: MY_RULE.title,\n\n                        title: '影片详情',\n\n                        group: MY_RULE.group,\n\n                        preRule: MY_RULE.preRule,\n\n                        pages: MY_RULE.pages,\n\n                        url: url.replace('m','www') + '#immersiveTheme#',\n\n                        findRule: MY_RULE.detail_find_rule\n\n                    }));\n\n                }, input, MY_RULE)\n\n            }\n\n            // 拦截app下载页面——非网页代码\n\n            if (input.includes('download')) return true;\n\n        }, MY_RULE),\n\n        blockRules: [''],\n\n        js: $.toString(() => {\n\n            var token_timer = function () {\n\n                var timer = setInterval(() => {\n\n                    // 隐藏顶部栏的login\n\n                    if (document.getElementsByClassName(\"header_login\")[0]) {\n\n                        document.getElementsByClassName(\"header_login\")[0].style.display = \"none\";\n\n                    }\n\n                    // 隐藏下方固定的app打开\n\n                    if (document.getElementsByClassName(\"ChannelHomeBanner_hbd_eiF93\")[0]) {\n\n                        document.getElementsByClassName(\"ChannelHomeBanner_hbd_eiF93\")[0].style.display = \"none\";\n\n                    }\n\n                    // 隐藏底部应用推荐\n\n                    if (document.querySelector(\"div[name='m-recList']\")) {\n\n                        document.querySelector(\"div[name='m-recList']\").style.display = \"none\";\n\n                    }\n\n                    // 隐藏底部爱奇艺标识\n\n                    if (document.getElementsByClassName(\"page-c-items mrg-bom-fix\")[0]) {\n\n                        document.getElementsByClassName(\"page-c-items mrg-bom-fix\")[0].style.display = \"none\";\n\n                    }\n\n                    // 隐藏会员精选的广告海报\n\n                    if (document.getElementsByClassName(\"m-shake\")[0]) {\n\n                        document.getElementsByClassName(\"m-shake\")[0].style.display = \"none\";\n\n                    }\n\n                    // 隐藏开通VIP\n\n                    if (document.getElementsByClassName(\"m-vip-userInfo\")[0]) {\n\n                        document.getElementsByClassName(\"m-vip-userInfo\")[0].style.display = \"none\";\n\n                    }\n\n                    // 隐藏会员俱乐部分类按钮\n\n                    if (document.getElementsByClassName(\"c-tab-item\")[2]) {\n\n                        document.getElementsByClassName(\"c-tab-item\")[2].style.display = \"none\";\n\n                    }\n\n                    // 隐藏儿童、动漫分类的海报\n\n                    if (document.getElementsByClassName(\"m-banner-img\")[0]) {\n\n                        document.getElementsByClassName(\"m-banner-img\")[0].style.display = \"none\";\n\n                    }\n\n                    // 隐藏体育分类的爱奇艺体育APP下载广告——拦不掉？算了莫名其妙~\n\n                    if (document.querySelector(\"a[class='all-match']\")) {\n\n                        document.querySelector(\"a[class='all-match']\").style.display = \"none\";\n\n                    }\n\n                    // 模拟点击继续浏览精彩内容——如果有的话\n\n                    if (document.getElementsByClassName(\"link-continue\")[0]) {\n\n                        ctnBtn = document.getElementsByClassName(\"link-continue\")[0];\n\n                        event = new Event('click');\n\n                        ctnBtn.dispatchEvent(event);\n\n                    }\n\n                    // 模拟点击儿童页面的广告弹窗——如果有的话\n\n                    if (document.getElementsByClassName(\"c-close-link\")[0]) {\n\n                        ctnBtn = document.getElementsByClassName(\"c-close-link\")[0];\n\n                        event = new Event('click');\n\n                        ctnBtn.dispatchEvent(event);\n\n                    }\n\n                }, 100)\n\n            };\n\n            token_timer();\n\n        }),\n\n        jsLoadingInject: true,\n\n        // 悬浮嗅探部分短视频\n\n        floatVideo: true,\n\n        ua: MOBILE_UA\n\n    }\n\n});\n\nsetResult(d);\n\n","searchFind":"js:\nMY_URL = MY_URL.split('##');\nlet seaword = MY_URL[1];\nvar d = [];\nvar res = {};\nhtml = JSON.parse(fetch(\"https://pcw-api.iqiyi.com/strategy/pcw/data/soBaseCardLeftSide?pageNum=1&key=\" + seaword)); \nlist = html.data.formatData.list;\n//log(list)\nlist.forEach(rs => {\n    if (rs.videoDocType == 1) {\n        d.push({\n            title: rs.g_title,\n            img: rs.g_img.replace('.jpg','_260_360.jpg') + \"@Referer=\",\n            url: rs.g_main_link + \"#immersiveTheme#\",\n            content: rs.desc,\n            desc: \"⭐来源：\" + rs.siteName\n        });\n    }\n});\nif (html.data.formatData.intentList) {\n    addList=html.data.formatData.intentList;\n    addList.forEach(rs => {\n        d.push({\n            title: rs.g_title,\n            img: rs.g_img.replace('.jpg','_260_360.jpg') + \"@Referer=\",\n            url: rs.g_main_link + \"#immersiveTheme#\",\n            content: rs.desc,\n            desc: \"⭐\" + rs.g_meta\n        });\n    });\n}\nres.data = d;\nsetSearchResult(res);\n","search_url":"hiker://empty##**##fypage","group":"②影视","detail_col_type":"movie_1","detail_find_rule":"js:\n\nMY_URL = MY_URL.split(\"#\")[0];\n\nif (MY_URL.match(/qiyi/)) {\n\n    eval(JSON.parse(request('hiker://page/qiyi?rule=爱奇艺.cy')).rule);\n\n}else if(MY_URL.match(/youku/)){\n\n    eval(JSON.parse(request('hiker://page/youku?rule=优酷.cy')).rule);\n\n}else if(MY_URL.match(/qq/)){\n\n    eval(JSON.parse(request('hiker://page/qq?rule=腾讯.cy')).rule);\n\n}else if(MY_URL.match(/mgtv/)){\n\n    eval(JSON.parse(request('hiker://page/mgtv?rule=芒果.cy')).rule);\n\n}else if(MY_URL.match(/bili/)){\n\n    eval(JSON.parse(request('hiker://page/bili?rule=哔哩.cy')).rule);\n\n}","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"pc","preRule":"/*<$>\n@include start\nhiker://files/data/DrpyHiker/libs/GlobalVarV3.js\n@include end\n<$>*/","pages":"[{\"col_type\":\"movie_3\",\"name\":\"爱奇艺二级\",\"path\":\"qiyi\",\"rule\":\"js:\\r\\n// 数据定位\\r\\nvar d = [];\\r\\nMY_URL = MY_URL.split(\\\"#\\\")[0].replace('www', 'm');\\r\\nhtml = request(MY_URL);\\r\\nviedeoInfo = JSON.parse(html.match(/\\\"albumInfo\\\"[\\\\S\\\\s]+(?=,\\\"albumListInfo\\\")/)[0].replace('\\\"albumInfo\\\":', ''));\\r\\ninfoAdd = JSON.parse(html.match(/\\\"videoInfo\\\":{[\\\\S\\\\s]+}(?=,\\\"videoType\\\")/)[0].replace('\\\"videoInfo\\\":', ''));\\r\\n影片名称 = viedeoInfo.albumName ? viedeoInfo.albumName : infoAdd.videoName;\\r\\n// 第二标题 = html.match(/\\\"focus\\\"[\\\\S\\\\s]+(?=,\\\"isEffect\\\")/)[0].replace('\\\"focus\\\":', '');\\r\\n第二标题 = infoAdd.focus;\\r\\n得分 = infoAdd.score;\\r\\n封面 = viedeoInfo.imageUrl ? 'https:' + viedeoInfo.imageUrl.replace('\\\\u002F', '/').replace('.jpg', '_260_360.jpg') + \\\"@Referer=\\\" : 'https:' + infoAdd.imageUrl.replace('\\\\u002F', '/') + \\\"@Referer=\\\";\\r\\n类型 = infoAdd.channelName;\\r\\n简介 = viedeoInfo.desc ? viedeoInfo.desc : infoAdd.desc;\\r\\n导演 = infoAdd.directors;\\r\\n主演 = infoAdd.mainActors;\\r\\n标签 = infoAdd.tags;\\r\\ntry {\\r\\n    更新日历 = viedeoInfo.updateStrategy;\\r\\n    更新进度 = viedeoInfo.showContent.replace('\\\\u002F', '/') ? viedeoInfo.showContent.replace('\\\\u002F', '/') : viedeoInfo.showContent;\\r\\n    追剧日历 = 更新日历 == '' ? '<font color=\\\"red\\\">' + 更新进度 + '</font>' : 更新日历 + '\\\\t<font color=\\\"red\\\">' + 更新进度 + '</font>';\\r\\n} catch (e) {\\r\\n    追剧日历 = '没有更新计划~';\\r\\n}\\r\\n上映时间 = infoAdd.issueTime;\\r\\n剧集ID = infoAdd.albumQipuId;\\r\\n短讯 = \\\"⭐\\\" + 类型 + \\\"⭐\\\" + (第二标题 ? 第二标题.replace(/\\\"/g, '') : '') + (得分 == 0 ? '' : '-' + 得分 + '分-') + 上映时间 + '\\\\n' + 标签;\\r\\n// 重定义二级页面数据\\r\\nsetPageTitle(影片名称);\\r\\nsetPagePicUrl(封面);\\r\\n// 前置参数和预处理---\\r\\nvar lazy = $('').lazyRule(() => {\\r\\n      var url = input;\\n    function prepareParses(parses, url, playlist, isTest, flag) {\\n    const aliasMap = new Map([\\n        ['腾讯', new Set(['腾讯', '腾讯视频'])],\\n    ]);\\n\\n    function getOriginalByAlias(key) {\\n        for (let [k, v] of aliasMap) {\\n            for (let it of v) {\\n                if (it instanceof RegExp) {\\n                    //正则表达;\\n                    if (it.test(key)) {\\n                        return k;\\n                    }\\n                } else {\\n                    //字符串;\\n                    if (it == key) {\\n                        return k;\\n                    }\\n                }\\n            }\\n        }\\n        return key; // 原始值\\n    }\\n    flag = getOriginalByAlias(flag) || flag;\\n    playlist = playlist || {\\n        urls: [],\\n        names: [],\\n        headers: [],\\n        is: \\\"#isVideo=true#\\\",\\n    };\\n    let Proxy = $.require(\\\"LocalProxy?rule=DrpyHiker\\\");\\n    let proxyUrl = Proxy.startProxy(MY_RULE.title, GM.getSelfKey());\\n    let each = (v, i) => {\\n        if (!isTest && (v.forbidden || !String(v.flag).split(\\\"|\\\").includes(flag))) return;\\n        playlist.names.push(v.name);\\n        if (v.headers) {\\n            playlist.headers.push(v.headers);\\n        }\\n        if (v.runType === \\\"JSON\\\") {\\n            let param = {\\n                //url: v.url,\\n                method: v.method,\\n                headers: v.headers,\\n                jsonPath: v.jsonPath\\n            };\\n            playlist.urls.push(proxyUrl + \\\"?runType=JSON&url=\\\" + encodeURIComponent(base64Encode(v.url + url)) + \\\"&param=\\\" + encodeURIComponent(base64Encode(JSON.stringify(param))));\\n        } else if (v.runType === \\\"JS\\\") {\\n            playlist.urls.push(proxyUrl + \\\"?runType=JS&url=\\\" + encodeURIComponent(base64Encode(url)) + (isTest ? \\\"&param=\\\" + encodeURIComponent(base64Encode(JSON.stringify(v))) : \\\"&index=\\\" + i));\\n        } else {\\n            playlist.urls.push(\\\"video://\\\" + v.url + url);\\n        }\\n    };\\n    parses.forEach(each);\\n    if (!playlist.urls.length) {\\n        flag = getDefaultFlag(url).replace(\\\"iqiyi\\\", \\\"qiyi\\\");\\n        parses.forEach(each);\\n    }\\n    if (!playlist.urls.length) {\\n        if (isofficial(url) && (!url.includes(\\\".m3u8\\\") || url.includes(\\\".mp4\\\"))) {\\n            return \\\"web://\\\" + url;\\n        } else {\\n            return url;\\n        }\\n    }\\n    return JSON.stringify(playlist);\\n}\\n\\n    let parses = $.require(\\\"configs?rule=DrpyHiker\\\").getJson();\\n\\n    if (!parses.length) return \\\"web://\\\" + url;\\n    let playlist = {\\n        urls: [],\\n        names: [],\\n        headers: [],\\n        is: \\\"#isVideo=true#\\\",\\n    };\\n    try {\\n        let useDanmu = !!getItem(\\\"useDanmu\\\", \\\"\\\");\\n         if (useDanmu) {\\n            playlist.danmu = $.require('dmFun?rule=dm盒子').dmRoute(url);\\n        }\\n    } catch {}\\n    flag = \\\"iqiyi\\\"\\n    return prepareParses(parses, url, playlist, false,flag);\\n});\\r\\nvar Color = \\\"#19B89D\\\";\\r\\nvar 每页集数 = 20;\\r\\nvar 搜索模式 = '分组';\\r\\nvar 调用名称 = '简影';\\r\\nputMyVar('折叠', '关');\\r\\nputMyVar('日历', '关');\\r\\nputMyVar('lazy', lazy);\\r\\n// 清除变量\\r\\naddListener('onClose', $.toString(() => {\\r\\n    clearMyVar('分集起');\\r\\n    clearMyVar('分集终');\\r\\n    clearMyVar('lazy');\\r\\n    clearMyVar('剧集列表');\\r\\n    clearMyVar('影片类型');\\r\\n}))\\r\\n// 设置动态最新章节\\r\\nsetLastChapterRule('js:' + $.toString((MY_URL) => {\\r\\n    eval(JSON.parse(request('hiker://page/getUpdate?rule=爱奇艺.cy')).rule);\\r\\n}, MY_URL));\\r\\n// 页面内容正文---\\r\\n// 基本信息模块\\r\\nd.push({\\r\\n    title: 短讯,\\r\\n    desc: 简介 == '' ? '暂无简介' : 简介.substring(0, 45) + '‘‘’’…<font color=\\\"#1C1C1C\\\">详情</font>',\\r\\n    img: 封面,\\r\\n    url: $().rule((简介) => {\\r\\n        res = {};\\r\\n        var d = [];\\r\\n        d.push({\\r\\n            title: '影片简介：' + '\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t' + 简介,\\r\\n            col_type: 'long_text'\\r\\n        });\\r\\n        res.data = d;\\r\\n        setHomeResult(res);\\r\\n    }, 简介),\\r\\n    col_type: 'movie_1_vertical_pic_blur',\\r\\n    extra: {\\r\\n        longClick: [{\\r\\n            title: '预告、花絮开关', js: $.toString(() => {\\r\\n                if (getItem('previewSwitch', 'fold') == 'fold') {\\r\\n                    setItem('previewSwitch', 'open');\\r\\n                    refreshPage(true);\\r\\n                    return \\\"toast://预告已经切换为展示~\\\";\\r\\n                } else {\\r\\n                    setItem('previewSwitch', 'fold');\\r\\n                    refreshPage(true);\\r\\n                    return \\\"toast://预告不再展示~\\\";\\r\\n                }\\r\\n            })\\r\\n        },{\\r\\n            title: 'dm盒子', js: $.toString(() => {\\r\\n                return 'hiker://page/setting#noHistory#?rule=dm盒子';\\r\\n            })\\r\\n        },{\\n            title: getItem(\\\"useDanmu\\\",\\\"\\\")==\\\"\\\"?\\\"弹幕：关\\\":\\\"弹幕：开\\\",\\n            js: $.toString(() => {\\n                \\n          return $(\\\"\\\").lazyRule(()=>{\\n                setItem(\\\"useDanmu\\\",getItem(\\\"useDanmu\\\",\\\"\\\")==\\\"\\\"?\\\"1\\\":\\\"\\\")\\n        refreshPage()\\nreturn \\\"toast://弹幕已\\\" + (getItem(\\\"useDanmu\\\",\\\"\\\")==\\\"1\\\"?\\\"开启\\\":\\\"关闭\\\")\\n                \\n                })\\n            })\\n            \\n            \\n        }]\\r\\n    }\\r\\n});\\r\\n// 追剧日历模块\\r\\nd.push({\\r\\n    title: '‘‘’’<small><font><font color=\\\"#098AC1\\\">📅追剧</font></small>',\\r\\n    url: $('#noLoading#').lazyRule((追剧日历) => {\\r\\n        if (getMyVar('日历', '关') == '开') {\\r\\n            deleteItem('追剧日历');\\r\\n            putMyVar('日历', '关');\\r\\n        } else {\\r\\n            addItemAfter('显示模式', {\\r\\n                title: 追剧日历,\\r\\n                col_type: \\\"rich_text\\\",\\r\\n                extra: {\\r\\n                    id: '追剧日历'\\r\\n                }\\r\\n            });\\r\\n            putMyVar('日历', '开');\\r\\n        }\\r\\n        return 'toast://已切换日历为:' + getMyVar('日历', '开')\\r\\n    }, 追剧日历),\\r\\n    col_type: 'text_4'\\r\\n});\\r\\n// 豆瓣影讯模块\\r\\nd.push({\\r\\n    title: '‘‘’’<small><font color=\\\"#098AC1\\\">🍃豆瓣</font></small>',\\r\\n    url: 'hiker://search?s=' + 影片名称 + '&rule=青豆',\\r\\n    col_type: 'text_4',\\r\\n    extra: {\\r\\n        id: '豆瓣影讯'\\r\\n    }\\r\\n});\\r\\n// 演职人员模块\\r\\nif (导演 && 主演) {\\r\\n    d.push({\\r\\n        title: '‘‘’’<small><font color=\\\"#098AC1\\\">⬇️演职</font></small>',\\r\\n        url: $('#noLoading#').lazyRule((导演, 主演) => {\\r\\n            if (getMyVar('折叠', '关') == '开') {\\r\\n                deleteItem('演职数据');\\r\\n                putMyVar('折叠', '关');\\r\\n            } else {\\r\\n                addItemAfter('显示模式', {\\r\\n                    title: '<b>导演:</b>' + 导演 + '<br><b>主演:</b>' + 主演,\\r\\n                    col_type: \\\"rich_text\\\",\\r\\n                    extra: {\\r\\n                        id: '演职数据'\\r\\n                    }\\r\\n                });\\r\\n                putMyVar('折叠', '开');\\r\\n            }\\r\\n            return 'toast://已切换折叠为:' + getMyVar('折叠', '开')\\r\\n        }, 导演, 主演),\\r\\n        col_type: 'text_4',\\r\\n        extra: {\\r\\n            id: '演职人员'\\r\\n        }\\r\\n    })\\r\\n}\\r\\n// 显示模式更改模块\\r\\nd.push({\\r\\n    title: '‘‘’’<small><font color=\\\"#098AC1\\\">🔃' + getItem('模式', '双边') + '</font></small>',\\r\\n    url: $('#noLoading#').lazyRule((每页集数) => {\\r\\n        if (getItem('模式', '双边') == '列表') {\\r\\n            for (let index = 1; index <= 每页集数; index++) {\\r\\n                updateItem('qiyi' + index, {\\r\\n                    col_type: 'movie_2',\\r\\n                });\\r\\n            }\\r\\n            setItem('模式', '双边')\\r\\n        } else {\\r\\n            for (let index = 1; index <= 每页集数; index++) {\\r\\n                updateItem('qiyi' + index, {\\r\\n                    col_type: 'movie_1_left_pic',\\r\\n                });\\r\\n            }\\r\\n            setItem('模式', '列表')\\r\\n        }\\r\\n        updateItem('显示模式', {\\r\\n            title: '‘‘’’<small><font color=\\\"#098AC1\\\">🔃' + getItem('模式', '双边') + '</font></small>',\\r\\n        });\\r\\n        return 'toast://已切换模式为:' + getItem('模式', '双边')\\r\\n    }, 每页集数),\\r\\n    col_type: 'text_4',\\r\\n    extra: {\\r\\n        id: '显示模式'\\r\\n    }\\r\\n});\\r\\n// 选插模块——局部刷新版\\r\\n/*\\n来源 = 'qy';\\r\\nputMyVar('简插', $.toString(() => {\\r\\n    let titleArr = []\\r\\n    setFile = readFile('hiker://files/rules/DuanNian/MyParse.json');\\r\\n    try {\\r\\n        eval('json=' + setFile);\\r\\n    } catch (e) {\\r\\n        log('Json解析发生了错误:' + e.message);\\r\\n    }\\r\\n    titleArr = json.title;\\r\\n    let barry1 = ['✍️辅助'];\\r\\n    let barry2 = ['📦️魔断'];\\r\\n    let barry3 = ['🔍搜索'];\\r\\n    titleArr = barry3.concat(titleArr);\\r\\n    titleArr = barry2.concat(titleArr);\\r\\n    titleArr = barry1.concat(titleArr);\\r\\n    eval('op=json.settings.' + 来源);\\r\\n    titleArr = titleArr.map((it) => {\\r\\n        return it === op ? '👉' + it : it;\\r\\n    });\\r\\n    putMyVar('解析数组', titleArr);\\r\\n    putMyVar('setFile', setFile);\\r\\n}))\\r\\neval(getMyVar('简插'));\\r\\nd.push({\\r\\n    title: '解析：🔘<font color=\\\"' + Color + '\\\">' + op + '</font>\\\\t\\\\t页码：<font color=\\\"' + Color + '\\\">' + ((getMyVar('分集起', '首页') == '首页') ? '首页' : (getMyVar('分集起') + '-' + getMyVar('分集终'))) + '</font>',\\r\\n    url: $('#noLoading#').lazyRule((json, 来源, Color, op, 影片名称, 搜索模式, 调用名称) => {\\r\\n        eval(getMyVar('简插'));\\r\\n        return $(eval(getMyVar('解析数组')), 3).select((json, 来源, Color, op, 影片名称, 搜索模式, 调用名称) => {\\r\\n            setFile = getMyVar('setFile');\\r\\n            input = input.replace(/👉/g, '');\\r\\n            if (input === '✍️辅助') {\\r\\n                return $().rule(() => {\\r\\n                    eval(JSON.parse(request('hiker://page/home?rule=配置助手')).rule);\\r\\n                })\\r\\n            } else if (input === '📦️魔断') {\\r\\n                return \\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=编辑#noHistory#\\\";\\r\\n            } else if (input === '🔍搜索') {\\r\\n                if (搜索模式 == '分组') {\\r\\n                    return \\\"hiker://search?s=\\\" + 影片名称 + \\\"&group=\\\" + 调用名称;\\r\\n                } else {\\r\\n                    return \\\"hiker://search?s=\\\" + 影片名称 + \\\"&rule=\\\" + 调用名称;\\r\\n                }\\r\\n            }\\r\\n            // 原先的配置\\r\\n            originSettings = JSON.stringify(json.settings);\\r\\n            // 修改配置\\r\\n            eval('json.settings.' + 来源 + '=input;');\\r\\n            setFile = setFile.replace(originSettings, JSON.stringify(json.settings));\\r\\n            saveFile('hiker://files/rules/DuanNian/MyParse.json', setFile);\\r\\n            // 刷新元素\\r\\n            eval(getMyVar('简插'));\\r\\n            updateItem('op', {\\r\\n                title: '解析：🔘<font color=\\\"' + Color + '\\\">' + op + '</font>\\\\t\\\\t页码：<font color=\\\"' + Color + '\\\">' + ((getMyVar('分集起', '首页') == '首页') ? '首页' : (getMyVar('分集起') + '-' + getMyVar('分集终'))) + '</font>',\\r\\n            });\\r\\n            return \\\"toast://切换解析口为:\\\" + input;\\r\\n        }, json, 来源, Color, op, 影片名称, 搜索模式, 调用名称)\\r\\n    }, json, 来源, Color, op, 影片名称, 搜索模式, 调用名称),\\r\\n    img: 'hiker://files/rules/cy/tubiao/iqiyi.svg',\\r\\n    col_type: \\\"avatar\\\",\\r\\n    extra: {\\r\\n        id: 'op'\\r\\n    }\\r\\n});\\r*/\\n\\nvar yp = JSON.parse(fetch(\\\"hiker://files/data/聚阅/云盘收藏.json\\\"))\\n\\nd.push({\\n    \\\"title\\\": yp[影片名称] ? \\\"\\\\t\\\\t云盘链接\\\" : \\\"\\\\t\\\\t云盘君\\\",\\n    img: 'hiker://files/rules/cy/tubiao/youku.svg',\\n    col_type: \\\"avatar\\\",\\n    url: yp[影片名称] ? yp[影片名称] : \\\"hiker://page/sou#noRecordHistory##noHistory#?rule=云盘君.简\\\",\\n    extra: { \\n        searchTerms: 影片名称,\\n        longClick: [{\\n            title: \\\"云盘简\\\", \\n            js: $.toString(() => {\\n                  return \\\"hiker://page/sou#noRecordHistory##noHistory#?rule=云盘君.简\\\";\\n              })\\n          },{\\n            title: '链接',\\n            js: $.toString((name) => {\\n         \\n        return $(\\\"\\\").input((name)=>{\\n                var yp = JSON.parse(fetch(\\\"hiker://files/data/聚阅/云盘收藏.json\\\"))\\n        yp[name] = input;\\n        refreshPage();\\n       writeFile(\\\"hiker://files/data/聚阅/云盘收藏.json\\\", JSON.stringify(yp))\\n         return \\\"hiker://empty\\\"\\n          },name)\\n           },影片名称)\\n           }]\\n        }\\n     \\n})\\n\\n\\n// 同时设置选集和展示---\\r\\n// 因为电影没有summary字段所以if单独出来——预告也这样处理吧~\\r\\nif (类型 == '电影' || infoAdd.videoName.match(/预告/)) {\\r\\n    d.push({\\r\\n        title: \\\"点我播放\\\",\\r\\n        col_type: \\\"text_center_1\\\",\\r\\n        url: MY_URL.replace('m', 'www') + lazy,\\r\\n        desc: \\\"观影不等待...\\\"\\r\\n    });\\r\\n} else {\\r\\n    // 有一部分奇葩的纪录片也是有年份的，普通接口还没有数据只好这样判断了，注意是'\\\"\\\"'~\\r\\n    if (html.match(/\\\"summary\\\":[\\\\S\\\\s]+(?=,\\\"count\\\")/)[0].replace('\\\"summary\\\":', '') != '\\\"\\\"') {\\r\\n        putMyVar('影片类型', '综艺类型');\\r\\n        时间线选集 = JSON.parse(html.match(/\\\"summary\\\":[\\\\S\\\\s]+(?=,\\\"count\\\")/)[0].replace('\\\"summary\\\":', ''));\\r\\n        剧集列表 = [];\\r\\n        // 偷懒！按啥年份和月份选集，简直浪费时间~\\r\\n        时间线选集.forEach(list => {\\r\\n            年份 = list.year;\\r\\n            剧集信息 = JSON.parse(request(\\\"https://pcw-api.iqiyi.com/album/source/svlistinfo?cid=6&sourceid=\\\" + 剧集ID + \\\"&timelist=\\\" + 年份 + \\\"&callback=window.Q.__callbacks__.cbp5bps9\\\").match(/{\\\"code\\\"[\\\\S\\\\s]+}(?=\\\\);}catch\\\\(e\\\\){})/)[0]);\\r\\n            剧集列表 = 剧集列表.concat(剧集信息.data[年份]);\\r\\n        });\\r\\n        剧集长度 = 剧集列表.length;\\r\\n    } else {\\r\\n        putMyVar('影片类型', '电视剧');\\r\\n        剧集信息 = JSON.parse(fetch(\\\"https://pcw-api.iqiyi.com/albums/album/avlistinfo?aid=\\\" + 剧集ID + \\\"&size=\\\" + 每页集数 + \\\"&page=1\\\" + \\\"&callback=window.Q.__callbacks__.cbu0ch7s\\\").match(/{\\\"code\\\"[\\\\S\\\\s]+}(?=\\\\);}catch\\\\(e\\\\){})/)[0]).data;\\r\\n        当前集数 = 剧集信息.latestOrder;\\r\\n        正片列表 = 剧集信息.epsodelist;\\r\\n        预告列表 = 剧集信息.updateprevuelist;\\r\\n        if (getItem('previewSwitch', 'fold') == 'fold') {\\r\\n            显示的剧集列表 = 正片列表;\\r\\n        } else {\\r\\n            try {\\r\\n                显示的剧集列表 = 正片列表.concat(预告列表);\\r\\n            } catch (e) {\\r\\n                显示的剧集列表 = 正片列表;\\r\\n            }\\r\\n        }\\r\\n        剧集长度 = 当前集数;\\r\\n    }\\r\\n\\r\\n    // 滚动剧集条栏\\r\\n    if (剧集长度 > 每页集数) {\\r\\n        putMyVar('刷新选集', $.toString(() => {\\r\\n            putMyVar('分集起', start);\\r\\n            putMyVar('分集终', end);\\r\\n            eval(getMyVar('简插'));\\r\\n            updateItem('op', {\\r\\n                title: '解析：🔘<font color=\\\"' + Color + '\\\">' + op + '</font>\\\\t\\\\t页码：<font color=\\\"' + Color + '\\\">' + ((getMyVar('分集起', '首页') == '首页') ? '首页' : (getMyVar('分集起') + '-' + getMyVar('分集终'))) + '</font>',\\r\\n            })\\r\\n            // 删除\\r\\n            for (let i = 1; i <= 每页集数; i++) {\\r\\n                deleteItem('qiyi' + i);\\r\\n            }\\r\\n            // 添加\\r\\n            lazy = getMyVar('lazy');\\r\\n            if (getMyVar('影片类型') == '综艺类型') {\\r\\n                剧集列表 = JSON.parse(getMyVar('剧集列表'));\\r\\n                显示的剧集列表 = 剧集列表.slice(start - 1, end);\\r\\n            } else {\\r\\n                剧集信息 = JSON.parse(fetch(\\\"https://pcw-api.iqiyi.com/albums/album/avlistinfo?aid=\\\" + 剧集ID + \\\"&size=\\\" + 每页集数 + \\\"&page=\\\" + page + \\\"&callback=window.Q.__callbacks__.cbu0ch7s\\\").match(/{\\\"code\\\"[\\\\S\\\\s]+}(?=\\\\);}catch\\\\(e\\\\){})/)[0]).data;\\r\\n                正片列表 = 剧集信息.epsodelist;\\r\\n                预告列表 = 剧集信息.updateprevuelist;\\r\\n                if (getItem('previewSwitch', 'fold') == 'fold') {\\r\\n                    显示的剧集列表 = 正片列表;\\r\\n                } else {\\r\\n                    try {\\r\\n                        显示的剧集列表 = 正片列表.concat(预告列表);\\r\\n                    } catch (e) {\\r\\n                        显示的剧集列表 = 正片列表;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            newArray = [];\\r\\n            index = 1;\\r\\n            显示的剧集列表.forEach(list => {\\r\\n                if (getItem('模式', '双边') == '列表') {\\r\\n                    newArray.push({\\r\\n                        title: list.subtitle,\\r\\n                        img: list.imageUrl.replace('.jpg', '_480_270.jpg') + \\\"@Referer=\\\",\\r\\n                        url: list.playUrl + lazy,\\r\\n                        desc: (list.order ? '第' + list.order + '集' + '\\\\t' : '') + list.duration + '\\\\n更新时间:' + list.period,\\r\\n                        col_type: 'movie_1_left_pic',\\r\\n                        extra: {\\r\\n                            id: 'qiyi' + index\\r\\n                        }\\r\\n                    });\\r\\n                } else {\\r\\n                    newArray.push({\\r\\n                        title: list.subtitle,\\r\\n                        img: list.imageUrl.replace('.jpg', '_480_270.jpg') + \\\"@Referer=\\\",\\r\\n                        url: list.playUrl + lazy,\\r\\n                        desc: (list.order ? '第' + list.order + '集' + '\\\\t' : '') + list.duration + '\\\\n更新时间:' + list.period,\\r\\n                        col_type: 'movie_2',\\r\\n                        extra: {\\r\\n                            id: 'qiyi' + index\\r\\n                        }\\r\\n                    });\\r\\n                }\\r\\n                index += 1;\\r\\n            });\\r\\n            addItemAfter(getMyVar('末页'), newArray);\\r\\n            // putMyVar('显示的剧集列表', 显示的剧集列表);\\r\\n        }));\\r\\n        d.push({\\r\\n            col_type: 'scroll_button',\\r\\n            url: 'hiker://empty',\\r\\n            title: '∷',\\r\\n            extra: {\\r\\n                id: '占位符',\\r\\n            }\\r\\n        })\\r\\n        putMyVar('分集起', 1);\\r\\n        putMyVar('分集终', 每页集数);\\r\\n        try {\\r\\n            putMyVar('剧集列表', 剧集列表);\\r\\n        } catch (e) {\\r\\n            log('电视剧没有现成的剧集列表');\\r\\n        }\\r\\n        总页数 = Math.ceil(剧集长度 / 每页集数);\\r\\n        start = 1;\\r\\n        end = 每页集数;\\r\\n        for (let page = 1; page <= 总页数; page++) {\\r\\n            if (end > 剧集长度) {\\r\\n                end = 剧集长度;\\r\\n            }\\r\\n            d.push({\\r\\n                title: start + '-' + end,\\r\\n                url: $('#noLoading##noHistory#').lazyRule((start, end, Color, 来源, page, 剧集ID, 每页集数) => {\\r\\n                    eval(getMyVar('刷新选集'));\\r\\n                    return \\\"hiker://empty\\\";\\r\\n                }, start, end, Color, 来源, page, 剧集ID, 每页集数),\\r\\n                col_type: 'scroll_button',\\r\\n                extra: {\\r\\n                    id: start + '-' + end\\r\\n                }\\r\\n            });\\r\\n            if (end < 剧集长度) {\\r\\n                start += 每页集数;\\r\\n                end += 每页集数;\\r\\n            }\\r\\n        }\\r\\n        // 记录末页的id\\r\\n        putMyVar('末页', start + '-' + end);\\r\\n    } else {\\r\\n        putMyVar('分集起', 1);\\r\\n        putMyVar('分集终', 剧集长度);\\r\\n    }\\r\\n    // 展示剧集:\\r\\n    if (getMyVar('影片类型') == '综艺类型') {\\r\\n        putMyVar('剧集列表', 剧集列表);\\r\\n        显示的剧集列表 = 剧集列表.slice(0, getMyVar('分集终'));\\r\\n    }\\r\\n    // putMyVar('显示的剧集列表', 显示的剧集列表);\\r\\n    index = 1;\\r\\n    显示的剧集列表.forEach(list => {\\r\\n        if (getItem('模式', '双边') == '列表') {\\r\\n            d.push({\\r\\n                title: list.subtitle,\\r\\n                img: list.imageUrl.replace('.jpg', '_480_270.jpg') + \\\"@Referer=\\\",\\r\\n                url: list.playUrl + lazy,\\r\\n                desc: (list.order ? '第' + list.order + '集' + '\\\\t' : '') + list.duration + '\\\\n更新时间:' + list.period,\\r\\n                col_type: 'movie_1_left_pic',\\r\\n                extra: {\\r\\n                    id: 'qiyi' + index\\r\\n                }\\r\\n            });\\r\\n        } else {\\r\\n            d.push({\\r\\n                title: list.subtitle,\\r\\n                img: list.imageUrl.replace('.jpg', '_480_270.jpg') + \\\"@Referer=\\\",\\r\\n                url: list.playUrl + lazy,\\r\\n                desc: (list.order ? '第' + list.order + '集' + '\\\\t' : '') + list.duration + '\\\\n更新时间:' + list.period,\\r\\n                col_type: 'movie_2',\\r\\n                extra: {\\r\\n                    id: 'qiyi' + index\\r\\n                }\\r\\n            });\\r\\n        }\\r\\n        index += 1;\\r\\n    });\\r\\n}\\r\\nsetResult(d);\\r\\n\"},{\"name\":\"爱奇艺最新章节\",\"path\":\"getUpdate\",\"rule\":\"html = request(MY_URL);\\nviedeoInfo = JSON.parse(html.match(/\\\"albumInfo\\\"[\\\\S\\\\s]+(?=,\\\"albumListInfo\\\")/)[0].replace('\\\"albumInfo\\\":', ''));\\ntry {\\n    更新进度 = viedeoInfo.showContent.replace('\\\\u002F', '/') ? viedeoInfo.showContent.replace('\\\\u002F', '/') : viedeoInfo.showContent;\\n} catch (e) {\\n    更新进度 = '电影？已上映？！';\\n}\\nsetResult(更新进度);\"}]","proxy":"","icon":"http://123.56.105.145/tubiao/movie/29.svg"}