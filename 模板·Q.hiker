{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"一级stui-vodlist","path":"stui-vodlist","rule":"var d = [];\nMY_RULE.url.match(/fypage/)[0]\nvar list = pdfa(getResCode(), '.stui-vodlist&&li');\nfor (var j in list) {\n    d.push({\n        title: pdfh(list[j], 'a&&title'),\n        desc: pdfh(list[j], '.pic-text&&Text'),\n        img: pd(list[j], '.lazyload||a&&data-original')+'@Referer=',\n        url: pd(list[j], 'a&&href') + '#immersiveTheme#'\n    });\n}\nsetResult(d);"},{"col_type":"movie_3","name":"二级.b","path":".b","rule":"var d = [];\nvar html = getResCode();\nif (html.indexOf('检测中') != -1) {\n    html = request(MY_URL + '?btwaf' + html.match(/btwaf(.*?)\\\"/)[1], {});\n}\nd.push({\n    title: pdfh(html, '.stui-content__detail--h1&&Text')\n        .replace('地区', '\\n地区')\n        .replace('主演', '\\n主演'),\n    desc: pdfh(html, '.desc||.detail-content&&Text'),\n    pic_url: pd(html, '.lazyload&&data-original'),\n    url: MY_URL,\n    col_type: 'movie_1_vertical_pic_blur'\n});\nvar 线路 = 'body&&.b'\nvar 选集 = 线路\nvar 线路名 = 'h3&&Text'\nvar 选集列表 = 'ul&&li'\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\nsetResult(d);"},{"col_type":"movie_3","name":"搜索stui-vodlist__media","path":"stui-vodlist__media","rule":"var d = [];\nvar list = pdfa(getResCode(), '.stui-vodlist__media&&li');\nlog('搜索结果')\nlog(list)\nif (list.length == 0) throw \"搜索为空，可能匹配错误\"\nfor (var j in list) {\n    d.push({\n        title: pdfh(list[j], 'a&&title'),\n        desc: pdfh(list[j], '.pic-text&&Text'),\n        img: pd(list[j], 'a&&data-original'),\n        content: pdfh(list[j], '.detail--h3&&Text'),\n        url: pd(list[j], 'a&&href')+'#immersiveTheme#'\n    });\n}\nsetResult(d);"},{"col_type":"movie_3","name":"一级myui-vodlist","path":"myui-vodlist","rule":"var d = []\nMY_RULE.url.match(/fypage/)[0]\nvar list = pdfa(getResCode(), '.myui-vodlist&&li')\nfor (var j in list) {\n    d.push({\n        title: pdfh(list[j], 'h4&&Text'),\n        desc: pdfh(list[j], '.pic-tag||.pic-text&&Text'),\n        img: pd(list[j], '.lazyload&&data-original'),\n        url: pd(list[j], 'a&&href').replace('vodplay','voddetail') + '#immersiveTheme#'\n    })\n}\nsetResult(d)"},{"col_type":"movie_3","name":"二级nav-tabs","path":"nav-tabs","rule":"var d = [];\nvar html = getResCode();\n\nd.push({\n    title: pdfh(html, '.data&&Text')\n        .replace('地区：', '  ')\n        .replace('年份：', '  ') + '\\n' +\n        pdfh(html, '.data,1&&Text')\n        .substring(0, 15) + '\\n' +\n        pdfh(html, '.data,2&&Text'),\n    desc: pdfh(html, '.data,3&&Text'),\n    img: pd(html, '.lazyload&&data-original'),\n    url: MY_URL,\n    col_type: 'movie_1_vertical_pic_blur'\n});\nvar 线路 = '.nav-tabs&&a'\nvar 选集 = '.tab-content&&.myui-content__list||.stui-content__playlist'\nvar 线路名 = 'Text'\nvar 选集列表 = 'ul&&li'\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\nsetResult(d);"},{"col_type":"movie_3","name":"搜索myui-vodlist__media","path":"myui-vodlist__media","rule":"var d = [];\nvar list = pdfa(getResCode(), '#searchList&&li');\nif (list.length == 0) throw \"搜索为空，可能匹配错误\"\nfor (var j in list) {\n    d.push({\n        title: pdfh(list[j], 'a&&title'),\n        desc: pdfh(list[j], '.pic-text&&Text'),\n        pic_url: pd(list[j], 'a&&data-original'),\n        content: pdfh(list[j], '.detail--h4&&Text'),\n        url: pd(list[j], 'a&&href')+'#immersiveTheme#'\n    })\n}\nsetResult(d)"},{"col_type":"movie_3","name":"一级vodlist","path":"vodlist","rule":"var d = [];\nMY_RULE.url.match(/fypage/)[0]\nvar list = pdfa(getResCode(), '.vodlist&&li');\nfor (var j in list) {\n  d.push({\n       title: pdfh(list[j], 'a&&title'),\n       desc: pdfh(list[j], 'a&&Text'),\n       pic_url: pd(list[j], '.lazyload&&data-original')+'@Referer=',\n       url: pd(list[j],'a&&href') + '#immersiveTheme#'\n  });\n}\nsetResult(d);"},{"col_type":"movie_3","name":"二级mo-play-load","path":"mo-play-load","rule":"var d = [];\nvar html = getResCode();\n\nd.push({\n    title: pdfh(html, '.video-info-items,2&&Text')\n  .replace('分类|', '')\n  .replace('地区：', '')\n  .replace('年份：', ' ').substring(0, 18) + '\\n' + '\\n' + \n  pdfh(html, '.video-info-items,1&&Text').substring(0, 18),\n    pic_url: pd(html, '.lazyload&&data-src'),\n    url: MY_URL,\n    col_type: 'movie_1_vertical_pic_blur'\n});\n\nvar 线路 = 'body&&.module-tab-content&&.module-tab-item'\nvar 选集 = 'body&&.sort-item'\nvar 线路名 = 'span&&Text'\nvar 选集列表 = 'body&&a'\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\nsetResult(d);"},{"col_type":"movie_3","name":"二级nav-tabs1","path":"nav-tabs1","rule":"var d = [];\nvar html = getResCode();\n\nd.push({\n    title: pdfh(html, 'p,1&&Text')\n        .replace('类型：', '')\n        .replace('地区：', ' ')\n        .replace('年份：', '')\n        .replace('语言：', '') +\n        '\\n\\n' + pdfh(html, 'p,4&&Text')\n        .substring(0, 30),\n    desc: pdfh(html, 'p,2&&Text'),\n    pic_url: pd(html, '.lazyload&&data-original'),\n    url: MY_URL,\n    col_type: 'movie_1_vertical_pic_blur'\n});\n\nvar 线路 = '.nav-tabs&&a'\nvar 选集 = 'body&&.stui-content__playlist'\nvar 线路名 = 'a&&Text'\nvar 选集列表 = 'ul&&li'\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\nsetResult(d);"},{"col_type":"flex_button","name":"定位二级","path":"erji","rule":"if(typeof(简介)!=\"undefined\"){\nfunction setDesc(d, desc, num) {\n    //log(desc)\n    if (desc == undefined) {\n        return;\n    }\n    desc = desc.constructor == Array ? desc.join('<br>') : desc;\n    if (desc.replace(/(<br>|\\s+|<\\/?p>|&nbsp;)/g, '').length == 0) {\n        return;\n    }\n    const mark = 'desc';\n    num = typeof(num) == 'undefined' ? 100 : num\n    desc = desc.startsWith('　　') ? desc : '　　' + desc;\n    desc = desc.replace(/'/g, \"&#39;\");\n    desc = desc.replace(/\\r\\n/g, \"<br>\");\n    desc = desc.replace(/\\r/g, \"<br>\");\n    desc = desc.replace(/\\n/g, \"<br>\");\n\n    function substr(str, maxLength) {\n        let len = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (str.charCodeAt(i) > 255) {\n                len += 2;\n            } else {\n                len++;\n            }\n            if (len > maxLength) {\n                return str.slice(0, i) + '...';\n            }\n        }\n        return str;\n    }\n    let sdesc = substr(desc, num);\n    var colors = {\n        show: \"black\",\n        hide: \"grey\"\n    }\n    var lazy = $(`#noLoading#`).lazyRule((dc, sdc, m, cs) => {\n        var show = storage0.getItem(m, '0');\n        var title = findItem('desc').title;\n        var re = /(<\\/small><br>.*?>).+/g;\n        var exp = '展开:';\n        var ret = '收起:';\n        if (show == '1') {\n            updateItem('desc', {\n                title: title\n                    .replace(ret, exp)\n                    .replace(re, '$1' + sdc + '</small>')\n                    .replace(/(<\\/small><br>\\<font color=\").*?(\">)/, '$1' + cs.hide + '$2')\n            })\n            storage0.setItem(m, '0');\n        } else {\n            updateItem('desc', {\n                title: title\n                    .replace(exp, ret)\n                    .replace(re, '$1' + dc + '</small>')\n                    .replace(/(<\\/small><br>\\<font color=\").*?(\">)/, '$1' + cs.show + '$2')\n            })\n            storage0.setItem(m, '1');\n        }\n        return `hiker://empty`\n    }, desc, sdesc, mark, colors)\n    var sc = storage0.getItem(mark, '0') == '0' ? '展开:' : '收起:';\n    var dc = storage0.getItem(mark, '0') == '0' ? sdesc : desc;\n    var cs = storage0.getItem(mark, '0') == '0' ? colors.hide : colors.show;\n    d.push({\n        title: '' + '<b><font color=\"#098AC1\">∷剧情简介\t</font></b>' + \"<small><a style='text-decoration: none;' href='\" + lazy + \"'>\" + sc + '</a></small><br><font color=\"' + cs + '\">' + `${dc}` + '</small>',\n        col_type: 'rich_text',\n        extra: {\n            id: 'desc',\n            lineSpacing: 6,\n            textSize: 15,\n            lineVisible: true,\n        }\n    })\n}\n\nsetDesc(d, 简介)\n\n}\n\n\nd.push({\n    col_type: \"blank_block\"\n})\n\n\nif(typeof(云盘)!=\"undefined\"){\nvar name = getPageTitle()\nd.push({\n    title: \"云盘君\",\n    url: \"hiker://page/sou#noRecordHistory##noHistory#?rule=云盘君.简\",\n    img: \"http://123.56.105.145/tubiao/ke/25.png\",\n    col_type: \"icon_2_round\",\n    extra: {\n        searchTerms: name\n    }\n});\nvar qlist = JSON.parse(fetch(\"hiker://files/data/聚阅√/quark.txt\") || {});\nif (qlist[name]) {\n    var click = [{\n        title: \"更换\",\n        js: $.toString((name) => {\n            return $(\"{{clipboard}}\").input((name) => {\n                var qlist = JSON.parse(fetch(\"hiker://files/data/聚阅√/quark.txt\") || {});\n\n                qlist[name] = input\n\n                writeFile(\"hiker://files/data/聚阅√/quark.txt\", JSON.stringify(qlist));\n                refreshPage()\n\n                return \"toast://已保存\"\n\n            }, name)\n        }, name)\n    }]\n    try {\n        var qext = JSON.parse(qlist[name])\n        qext['longClick'] = click\n        qext['pageTitle'] = MY_PARAMS.name;\n        var qurl = \"hiker://page/quarkList#noRecordHistory#?rule=Quark.简&page=fypage\"\n    } catch (e) {\n        qext = {\n            longClick: click,\n            pageTitle: name\n        };\n        qurl = \"hiker://page/quarkList#noRecordHistory#?rule=Quark.简&realurl=\" + encodeURIComponent(qlist[MY_PARAMS.name]) + \"&sharePwd=\";\n\n    }\n    d.push({\n        title: '夸克网盘',\n        url: qurl,\n        extra: qext,\n        img: \"http://pic.7273.com/upload/2022-6/20226131744447587.png\",\n        col_type: \"icon_2_round\"\n    })\n} else {\n    d.push({\n        title: \"添加资源\",\n        col_type: \"icon_2_round\",\n        img: \"http://123.56.105.145/tubiao/system/124.png\",\n        url: $(\"{{clipboard}}\").input((name) => {\n            var qlist = JSON.parse(fetch(\"hiker://files/data/聚阅√/quark.txt\") || {});\n\n            qlist[name] = input\n\n            writeFile(\"hiker://files/data/聚阅√/quark.txt\", JSON.stringify(qlist));\n            refreshPage()\n\n            return \"toast://已保存\"\n\n        },name),\n\n    })\n}\nd.push({\n    col_type: \"blank_block\"\n})\n}\n\n\nvar tabs = pdfa(html, 线路).map(data => {\n    data = pdfh(data, 线路名)\n    if (typeof(排除) != 'undefined' && 排除 != '') {\n        data = data.replace(new RegExp(排除, \"g\"), \"\");\n    }\n    return data;\n});\n\nvar lists = pdfa(html, 选集).map(data => pdfa(data, 选集列表))\n\naddListener(\"onClose\", $.toString(() => {\n    clearMyVar(\"lists\");\n}));\nstorage0.putMyVar(\"lists\", lists);\nvar list = lists[getMyVar(MY_URL, '0')];\nvar 排序 = getMyVar(MY_URL + \"章节排序\", '#1aad19\">正序');\nvar 提示 = 排序 == '#FF0000\">倒序' ? '#1aad19\">正序' : '#FF0000\">倒序';\nvar 排序名 = '““””<b><span style=\"color:排序</span></b>';\n\nd.push({\n    title: '““””<b><span style=\"color: ' + 排序 + '</span></b>',\n    url: $(\"#noLoading#\").lazyRule((tabs, 排序名, lazy, d, TV推送) => {\n        var lists = storage0.getMyVar(\"lists\");\n        var 章节 = lists[getMyVar(MY_URL, '0')];\n        var 排序 = getMyVar(MY_URL + \"章节排序\", '#1aad19\">正序');\n        var 提示 = 排序 == '#FF0000\">倒序' ? '#1aad19\">正序' : '#FF0000\">倒序';\n        updateItem({\n            extra: {\n                id: MY_URL + \"_排序\",\n                longClick: [{\n                    title: \"TVbox推送\",\n                    js: TV推送(tabs, lists, d)\n                }]\n            },\n            title: 排序名.replace('排序', 提示)\n        });\n        if (排序 == '#1aad19\">正序') {\n            章节.reverse();\n        }\n        let cp = 章节.map((data, ssid) => ({\n            title: pdfh(data, 'a&&Text'),\n            url: pd(data, 'a&&href') + lazy,\n            col_type: 章节.length > 3 ? 'text_4' : 'text_2',\n            extra: {\n                cls: MY_URL + \"_选集\",\n                id: pd(data, 'a&&href')\n            }\n        }));\n        deleteItemByCls(MY_URL + \"_选集\");\n        addItemBefore(MY_URL + \"footer\", cp);\n        putMyVar(MY_URL + \"章节排序\", 提示);\n        return \"hiker://empty\";\n    }, tabs, 排序名, lazy, d[0], TV推送),\n    col_type: 'flex_button',\n    extra: {\n        id: MY_URL + \"_排序\",\n        longClick: [{\n            title: \"TVbox推送\",\n            js: TV推送(tabs, lists, d[0])\n        }]\n    }\n});\n\nfunction TV推送(tabs, lists, d) {\n    return $.toString((tabs, lists, d) => {\n        var 推送 = {\n            \"name\": getPageTitle(),\n            \"content\": d.desc,\n            \"pic\": d.img || d.pic_url,\n            \"from\": tabs.join('$$$'),\n            \"url\": storage0.getMyVar(\"lists\").map(li => li.map(li1 => pdfh(li1, 'Text') + '$' + pd(li1, 'a&&href')).join('#')).join('$$$')\n        };\n        return \"hiker://page/push?rule=XYQ推送&pushurl=\" + encodeURIComponent(JSON.stringify(推送));\n    }, tabs, lists, d);\n}\n\ntabs.forEach((data, id) => {\n    d.push({\n        title: getMyVar(MY_URL, '0') == id ? `““${data}””` : data,\n        url: $(\"#noLoading#\").lazyRule((线路, lazy, id) => {\n            var lists = storage0.getMyVar(\"lists\");\n            var 排序 = getMyVar(MY_URL + \"章节排序\", '#1aad19\">正序');\n            var 提示 = 排序 == '#FF0000\">倒序' ? '#1aad19\">正序' : '#FF0000\">倒序';\n            线路.forEach((data, xlid) => {\n                updateItem({\n                    title: id == xlid ? `““${data}””` : data,\n                    extra: {\n                        id: MY_URL + \"_线路\" + xlid\n                    }\n                });\n            })\n            putMyVar(MY_URL, id)\n            var 章节 = lists[getMyVar(MY_URL, '0')];\n            if (排序 == '#FF0000\">倒序') {\n                章节.reverse()\n            }\n            let cp = 章节.map((data, ssid) => {\n                return {\n                    title: pdfh(data, 'a&&Text'),\n                    url: pd(data, 'a&&href') + lazy,\n                    col_type: 章节.length > 3 ? 'text_4' : 'text_2',\n                    extra: {\n                        cls: MY_URL + \"_选集\",\n                        id: pd(data, 'a&&href')\n                    }\n                };\n            });\n            deleteItemByCls(MY_URL + \"_选集\");\n            addItemBefore(MY_URL + \"footer\", cp);\n            return \"hiker://empty\"\n        }, tabs, lazy, id),\n        col_type: 'flex_button',\n        extra: {\n            id: MY_URL + \"_线路\" + id\n        }\n    });\n})\n\nif (排序 == '#FF0000\">倒序') {\n    list.reverse()\n}\nlist.forEach((data, id) => {\n    d.push({\n        title: pdfh(data, 'a&&Text'),\n        url: pd(data, 'a&&href') + lazy,\n        col_type: list.length > 3 ? 'text_4' : 'text_2',\n        extra: {\n            cls: MY_URL + \"_选集\",\n            id: pd(data, 'a&&href')\n        }\n    });\n})\n\nsetLastChapterRule('js:' + $.toString((选集, 选集列表) => {\n    setResult('更新至: 第' + pdfa(getResCode(), 选集).map(data => pdfa(data, 选集列表).length).sort((a, b) => b - a)[0] + \"集\");\n}, 选集, 选集列表));\nd.push({\n    col_type: \"big_blank_block\",\n    extra: {\n        id: MY_URL + \"footer\"\n    }\n});"},{"col_type":"movie_3","name":"二级play_source_tab","path":"play_source_tab","rule":"var d = [];\nvar html = getResCode();\n\nd.push({\n    title: pdfh(html, '.remarks&&Text') +\n        '\\n' + pdfh(html, '.s-top-info-detail&&a&&Text') +\n        pdfh(html, '.s-top-info-detail&&a,1&&Text') +\n        pdfh(html, '.s-top-info-detail&&a,2&&Text') +\n        '\\n““简介：不能用就删掉吧””',\n    desc: pdfh(html, '.desc_txt&&Text').substring(0, 20),\n    img: pd(html, '.img-cover||.vod-detail-bj&&src'),\n    url: MY_URL,\n    col_type: 'movie_1_vertical_pic_blur'\n});\nvar 线路 = '.play_source_tab&&a'\nvar 选集 = 'body&&.player_list||#playlistbox||#playsx'\nvar 线路名 = 'a&&Text'\nvar 选集列表 = 'ul&&li'\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\nsetResult(d);"},{"col_type":"movie_3","name":"二级fed-play-item","path":"fed-play-item","rule":"var d = [];\nvar html = getResCode();\n\nd.push({\n    title: pdfh(html, 'dd&&li,3&&Text') +\n        '\\n' + pdfh(html, 'dd&&li,4&&Text')\n        .substring(0, 15) + '\\n' +\n        pdfh(html, 'dd&&li,5&&Text')\n        .substring(0, 15),\n    desc: pdfh(html, 'dd&&li,6&&Text').substring(0, 25),\n    pic_url: pd(html, '.fed-lazy&&data-original'),\n    url: MY_URL,\n    col_type: 'movie_1_vertical_pic'\n});\nvar 线路 = 'body&&.fed-drop-btns'\nvar 选集 = 'body&&.fed-play-item'\nvar 线路名 = 'a&&Text'\nvar 选集列表 = 'body&&.fed-btns-info'\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\nsetResult(d);"},{"col_type":"movie_3","name":"搜索dl","path":"dl","rule":"var d = [];\nvar list = pdfa(getResCode(), 'body&&dl');\nlog('搜索结果')\nlog(list)\nif (list.length == 0) throw \"搜索为空，可能匹配错误\"\nfor (var j in list) {\n  d.push({\n       title: pdfh(list[j], 'h1&&Text'),\n       desc: pdfh(list[j], '.fed-list-remarks&&Text'),\n\t    content: pdfh(list[j], '.fed-part-esan--span&&Text'),\n       img: pd(list[j], 'a&&data-original'),\n       url: pd(list[j], 'a&&href')\n  });\n}\nsetResult(d)"},{"col_type":"movie_3","name":"#Mapping","path":"Mapping","rule":"js:\n$.exports = {\n    \"home\": [{\n            keys: [\" b \"],\n            url: \".b\",\n            //     allKey: true,\n        },\n        {\n            keys: [\"nav-tabs\"],\n            url: \"nav-tabs\",\n        },\n        {\n            keys: [\"myui-content__list\"],\n            url: \"myui-content__list\",\n        },\n        {\n            keys: [\"nav-tabs\", \"stui-content__playlist\"],\n            url: \"nav-tabs1\",\n            allKey: true,\n        },\n        {\n            keys: [\"h3\", \"stui-content__playlist\"],\n            url: \"h3\",\n            allKey: true,\n        },\n        {\n            keys: [\"myui-vodlist \"],\n            url: \"myui-vodlist\",\n        },\n        {\n            keys: [\"mo-movs-item\"],\n            url: \"mo-movs-item\",\n        },\n        {\n            keys: [\"module-tab-item\"],\n            url: \"module-tab-item\",\n            //     allKey: true,\n        },{\n            keys: [\"y-playList\"],\n            url: \"y-playList\",\n        },\n        {\n            keys: [\"stui-vodlist \"],\n            url: \"stui-vodlist\",\n            //     allKey: true,\n        },\n        {\n            keys: [\"play_source_tab\"],\n            url: \"play_source_tab\",\n        },\n        {\n            keys: [\"fed-play-item\"],\n            url: \"fed-play-item\",\n        },\n        {\n            keys: [\"module-item\"],\n            url: \"module-items\",\n        },\n        {\n            keys: [\"vodlist \", \"lazyload\"],\n            url: \"vodlist\",\n            allKey: true,\n        },\n        {\n            keys: [\"mo-play-load\"],\n            url: \"mo-play-load\",\n        },\n        {\n            keys: [\"fed-list-title\"],\n            url: \"fed-list-title\",\n            //allKey: true,\n        },\n        {\n            keys: [\"pack-ykpack\\\"\"],\n            url: \"pack-ykpack\",\n        },\n        /*\n                {\n                    keys: [\"item\"],\n                    url: \"item\",\n                },*/\n        {\n            keys: [\"data_list\"],\n            url: \"data_list\",\n        },\n    ],\n    \"search\": [{\n            keys: [\"stui-vodlist__media\"],\n            url: \"stui-vodlist__media\",\n        },\n        {\n            keys: [\"myui-vodlist__media\"],\n            url: \"myui-vodlist__media\",\n        },\n        {\n            keys: [\"module-search-item\"],\n            url: \"module-search-item\",\n        },\n        {\n            keys: [\"stui-vodlist \"],\n            url: \"stui-vodlist\",\n            //     allKey: true,\n        },\n        {\n            keys: [\"dl \"],\n            url: \"dl\",\n            allKey: true,\n        },\n        {\n            keys: [\"module-items\"],\n            url: \"module-items\",\n        },\n    ]\n}"},{"col_type":"movie_3","name":"#auto","path":"auto","rule":"js:\nfunction getPageSource(key) {\n    let src = request(\"hiker://page/\" + key + \"?rule=模板·Q\");\n    src = JSON.parse(src).rule;\n    return src;\n}\nconst sourceMap = $.require(\"hiker://page/Mapping?rule=模板·Q\");\n\nfunction autoPage(htmlsrc, type) {\n    let pageRules = [],\n        htmlSource = htmlsrc,\n        pageType,\n        mMapping;\n    if (type !== undefined) {\n        pageType = type;\n    } else {\n        pageType = MY_TYPE;\n    }\n    mMapping = sourceMap[pageType];\n    if (mMapping === undefined || !Array.isArray(mMapping)) {\n        throw new Error(\"不存在\" + pageType + \"类型的模板\");\n    }\n    for (let item of mMapping) {\n        if (item.allKey) {\n            if (item.keys.every(key => htmlSource.includes(key))) {\n                pageRules.push(item);\n            }\n        } else {\n            if (item.keys.some(key => htmlSource.includes(key))) {\n                pageRules.push(item);\n            }\n        }\n    }\n    if(pageRules.length == 0) {\n        log(\"暂无合适的模板\");\n    }\n    for (let pageRule of pageRules) {\n        log(\"正在匹配：\" + pageRule.url);\n        try {\n            eval.call(null, \";(function(){\" + getPageSource(pageRule.url) + \"})()\");\n            log(\"匹配模板成功，正在结束匹配进程\");\n            break;\n        } catch (e) {\n            log(\"匹配模板错误\");\n            log(e.toString())\n            log(\"正在匹配下一个模板......\")\n            if (pageRule.url == pageRules[pageRules.length - 1].url) {\n                log(\"已匹配到最后一个模板，暂无合适的模板\");\n                setResult([]);\n            }\n        }\n    }\n\n}\n$.exports.autoPage = autoPage;"},{"col_type":"movie_3","name":"一级pack-ykpack","path":"pack-ykpack","rule":"var d =[];\nMY_RULE.url.match(/fypage/)[0]\nvar list = pdfa(getResCode(), 'body&&.pack-ykpack');\nfor (var j in list) {\n  d.push({\n       title: pdfh(list[j], 'a&&title'),\n       desc: pdfh(list[j], 'span,-1&&Text'),\n       img: pd(list[j], '.eclazy&&data-original')+'@Referer=',\n       url: pd(list[j],'a&&href')+ '#immersiveTheme#'\n  });\n}\nsetResult(d);"},{"col_type":"movie_3","name":"一级module-items","path":"module-items","rule":"MY_RULE.url.match(/fypage/)[0]\nvar d = []\nvar list = pdfa(getResCode(), 'body&&.module-item');\nfor (var j in list) {\n    d.push({\n        title: pdfh(list[j], 'strong||a&&Text||title'),\n        desc: pdfh(list[j], '.module-item-text||.module-item-note&&Text'),\n        pic_url: pd(list[j], 'img||.lazy&&data-src||data-original||src') + '@Referer=',\n        url: pd(list[j], 'a&&href') + \"#immersiveTheme#\"\n    });\n}\nsetResult(d);"},{"col_type":"movie_3","name":"二级module-tab-item","path":"module-tab-item","rule":"var d = [];\nvar html = fetch(MY_URL)\n\ntry {\n    var title = pdfa(html, 'body--a&&.tag-link');\n} catch (e) {\n    var title = '';\n}\nvar T = [];\nfor (var i in title) {\n    T.push(pdfh(title[i], 'a&&Text'))\n}\n\nd.push({\n    title: T.join('  ') + '\\n' +\n        pdfh(html, '.video-info-items,1&&Text')\n        .split('/').join('  ')\n        .substring(0, 20) + '\\n' +\n        pdfh(html, '.video-info-items&&Text')\n        .split('/').join('  ')\n        .substring(0, 20),\n    desc: pdfh(html, '.video-info-items,2&&Text'),\n    img: pd(html, '.lazyload&&data-original||data-src||src'),\n    url: MY_URL,\n    col_type: 'movie_1_vertical_pic_blur'\n});\nvar 线路 = 'body&&.module-tab-item'\nvar 选集 = 'body&&.scroll-box-y||.module-list'\nvar 线路名 = 'span&&Text'\nvar 选集列表 = 'body&&a'\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\nsetResult(d);"},{"col_type":"movie_3","name":"搜索module-search-item","path":"module-search-item","rule":"var d = [];\nvar list = pdfa(getResCode(), 'body&&.module-search-item');\nlog('搜索结果')\nlog(list)\nif (list.length == 0) throw \"搜索为空，可能匹配错误\"\nfor (var j in list) {\n    d.push({\n        title: pdfh(list[j], 'h3&&Text'),\n        desc: pdfh(list[j], '.video-serial&&Text'),\n        content: pdfh(list[j], '.video-info-aux&&Text'),\n        img: pd(list[j], 'img&&data-original||data-src'),\n        url: pd(list[j], '.video-serial&&href') + '#immersiveTheme#'\n    });\n}\nsetResult(d)"},{"col_type":"movie_3","name":"一级item","path":"item","rule":"var d = [];\nMY_RULE.url.match(/fypage/)[0]\nvar list = pdfa(getResCode(), 'body&&.item');\nfor (let i in list) {\n    d.push({\n        title: pdfh(list[i], 'img&&alt'),\n        desc: pdfh(list[i], 'p&&Text'),\n        pic_url: pd(list[i], 'img&&src'),\n        url: pd(list[i], 'a&&href'),\n        col_type: 'movie_3'\n    })\n}\nsetResult(d)"},{"name":"一级data_list","path":"data_list","rule":"var d = [];\nMY_RULE.url.match(/fypage/)[0]\nvar list = pdfa(getResCode(), '#data_list&&li');\nfor (let i in list) {\n    d.push({\n        title: pdfh(list[i], 'a&&title'),\n        desc: pdfh(list[i], 'em&&Text'),\n        pic_url: pd(list[i], 'img&&data-src'),\n        url: pd(list[i], 'a&&href'),\n        col_type: 'movie_3'\n    })\n}\nsetResult(d)"},{"col_type":"movie_3","name":"二级h3","path":"h3","rule":"var d = [];\nvar html = getResCode();\nif (html.indexOf('检测中') != -1) {\n    html = request(MY_URL + '?btwaf' + html.match(/btwaf(.*?)\\\"/)[1]);\n}\nd.push({\n    title: pdfh(html, '.data,2&&Text')\n        .replace('类型：', '')\n        .replace('地区：', '')\n        .replace('年份：', ' ')\n        .substring(0, 18) + '\\n' +\n        pdfh(html, '.data,1&&Text')\n        .substring(0, 15) + '\\n' +\n        pdfh(html, '.data&&Text')\n        .substring(0, 15),\n    desc: pdfh(html, '.detail-sketch||.data,3||#desc&&Text'),\n    img: pd(html, '.lazyload&&data-original'),\n    url: MY_URL,\n    col_type: 'movie_1_vertical_pic_blur'\n});\n\nvar 线路 = 'body&&.stui-pannel:has(.stui-content__playlist)'\nvar 选集 = 'body&&.stui-content__playlist'\nvar 线路名 = 'h3&&Text'\nvar 选集列表 = 'ul&&li'\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\nsetResult(d);"},{"col_type":"movie_3","name":"一级fed-list-title","path":"fed-list-title","rule":"var d = [];\nMY_RULE.url.match(/fypage/)[0]\nvar list = pdfa(getResCode(), '.fed-list-info&&li');\nfor (var j in list) {\n  d.push({\n       title: pdfh(list[j], '.fed-list-title&&Text'),\n       desc: pdfh(list[j], '.fed-text-center&&Text'),\n       img: pd(list[j], 'a&&data-original')+'@Referer=',\n       url: pd(list[j], 'a&&href')\n  });\n}\nsetResult(d)"},{"col_type":"movie_3","name":"二级myui-content__list","path":"myui-content__list","rule":"var d = [];\nvar html = getResCode();\n\nd.push({\n    title: pdfh(html, '.data,0&&Text')\n        .replace('地区：', '  ')\n        .replace('年份：', '  ') + '\\n' +\n        pdfh(html, '.data,1&&Text')\n        .substring(0, 15) + '\\n' +\n        pdfh(html, '.data,2&&Text'),\n    desc: pdfh(html, '.data,3&&Text'),\n    pic_url: pd(html, '.lazyload&&data-original'),\n    url: MY_URL,\n    col_type: 'movie_1_vertical_pic_blur'\n});\nvar 线路 = 'body&&.myui-panel-box:has(.myui-content__list)'\nvar 选集 = 'body&&.myui-content__list'\nvar 线路名 = 'h3&&Text'\nvar 选集列表 = 'ul&&li'\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\nsetResult(d);"},{"col_type":"movie_3","name":"字符串处理工具","path":"stringtool","rule":"js:\nconst matchList  = {\n  // \"<\":\"&lt;\",\n  // \">\": \"&gt;\",\n  // \"&\": \"&amp;\",\n  // '\"': \"&quot;\",\n  // \"'\": \"acute;\",\n  \" \": \"&nbsp;\",\n  \"\\n\":\"<br>\"\n}\n// 字符过滤器\nfunction htmlEscape(text){\n  let regStr = '(' + Object.keys(matchList).toString() + ')'\n  regStr = regStr.replace(/,/g, ')|(')  \n  const regExp = new RegExp(regStr, 'g')\n  return text.replace(regExp, match => matchList[match])\n}\n$.exports.htmlEscape = htmlEscape"},{"col_type":"movie_3","name":"动态分类1","path":"dtfl","rule":"const empty = \"hiker://empty\"\n\nif (typeof(拼接分类) != 'undefined' && 拼接分类 != '') {\n    var categories = pdfa(html, 大类定位).concat(pdfa(html, 拼接分类))\n} else {\n    var categories = pdfa(html, 大类定位)\n   \n}\n\nlet s = []\nlet init_cate = []\n\nfor (let i = 0; i < 20; i++) {\n    init_cate.push(\"0\")\n}\n\nconst fold = getVar(MY_RULE.group, \"0\")\nconst cate_temp_json = getVar(MY_RULE.title, JSON.stringify(init_cate))\nconst cate_temp = JSON.parse(cate_temp_json)\n\nif (parseInt(page) === 1) {\n    s.push({\n        title: fold === '1' ? '““””<b>' + '∨'.fontcolor(\"#FF0000\") + '</b>' : '““””<b>' + '∧'.fontcolor(\"#1aad19\") + '</b>',\n        url: $().lazyRule((fold) => {\n            putVar(MY_RULE.group, fold === '1' ? '0' : '1');\n            refreshPage(false);\n            return \"hiker://empty\"\n        }, fold),\n        col_type: 'scroll_button',\n    })\n    categories.forEach((category, index) => {\n        let sub_categories = pdfa(category, 小类定位);\n        log(sub_categories)\n        if (index === 0) {\n            sub_categories.forEach((item, key) => {\n                let title = pdfh(item, 分类标题)\n                if (typeof(排除) != 'undefined' && 排除 != '') {\n                    title = title.replace(new RegExp(排除, \"g\"), \"\")\n                }\n                s.push({\n                    title: key.toString() === cate_temp[index] ? \"““””\" + title.fontcolor(分类颜色) : title,\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\n                        let new_cate = []\n                        params.cate_temp.forEach((cate, index) => {\n                            new_cate.push(index === 0 ? params.key.toString() : \"0\")\n                        })\n                        putVar(MY_RULE.title, JSON.stringify(new_cate))\n                        putVar(MY_RULE.url, input)\n                        refreshPage(true)\n                        return \"hiker://empty\"\n                    }, {\n                        cate_temp: cate_temp,\n                        key: key,\n                        page: page,\n                    }),\n                    col_type: 'scroll_button',\n                })\n            })\n            s.push({\n                col_type: \"blank_block\"\n            });\n        } else if (fold === '1') {\n            sub_categories.forEach((item, key) => {\n                let title = pdfh(item, 分类标题)\n                if (typeof(排除) != 'undefined' && 排除 != '') {\n                    title = title.replace(new RegExp(排除, \"g\"), \"\")\n                }\n                s.push({\n                    title: key.toString() === cate_temp[index] ? \"““””\" + title.fontcolor(分类颜色) : title,\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\n                        params.cate_temp[params.index] = params.key.toString()\n\n                        putVar(MY_RULE.title, JSON.stringify(params.cate_temp))\n                        putVar(MY_RULE.url, input)\n                        refreshPage(true)\n                        return \"hiker://empty\"\n                    }, {\n                        cate_temp: cate_temp,\n                        index: index,\n                        key: key,\n                        page: page,\n                    }),\n                    col_type: 'scroll_button',\n                })\n            })\n            s.push({\n                col_type: \"blank_block\"\n            });\n        }\n    })\n}\nsetPreResult(s)"},{"col_type":"movie_3","name":"一级公共模板","path":"yiji","rule":"function 一级() {};\nObject.assign(一级.prototype, {\n    constructor: 一级,\n    test() {},\n    获取源码(url, header) {\n        return fetch(true_url, {\n            headers: header || {\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'\n            }\n        }) // 默认统一使用PC UA\n    },\n    获取正确链接(page, regex) {\n        let true_url = getMyVar('header.url', MY_URL);\n        let 链接处理工具 = $.require('hiker://page/url-processor?rule=模板·Q')\n        true_url = 链接处理工具\n            .链接(true_url)\n            .页码(page)\n            .插入新处理规则(regex || [])\n            .获取处理结果();\n        return true_url;\n    },\n    打造分类(ruleList) {\n        // '0' 为默认不折叠，'1' 为默认折叠\n        const 当前折叠状态 = getMyVar('header.fold', '1')\n\n        // 引入动态分类依赖\n        let htmlCategories = $.require('hiker://page/categories-header?rule=模板·Q')\nvar getRangeColors = function(){\n        return '#'+('00000'+(Math.random()*0x1000000<<0).toString(16)).substr(-6);\n      }\n        htmlCategories.界面(d)\n            // .分类链接(true_url)\n            .源码(html)\n            .页码(page)\n            .添加分类定位(ruleList)\n            .开启内置折叠功能() // 必须\n            .折叠(当前折叠状态) // 必须\n            .选中的分类颜色(getRangeColors())\n         //   .选中的分类颜色('#098AC1')\n            .开始打造分类();\n    },\n    生成片单(d, html) {\n        let list = pdfa(html, 列表);\n        for (let j in list) {\n            let img = pd(list[j], 图片);\n            d.push({\n                title: pdfh(list[j], 标题),\n                desc: pdfh(list[j], 描述),\n                img: img + '@Referer=' + img,\n                url: pd(list[j], 链接).replace('vodplay','voddetail') + \"#immersiveTheme#\"\n            });\n        }\n    }\n})\n\n$.exports = new 一级();\n$.exports"},{"col_type":"movie_3","name":"动态分类2","path":"categories-header","rule":"const symbolMap = {\n    // checkParams: Symbol('checkParams'),\n    mLayout: Symbol('mLayout'),\n    true_url: Symbol('true_url'),\n    mPage: Symbol('mPage'),\n    src: Symbol('src'),\n    ruleObjList: Symbol('ruleObjList'),\n    mFold: Symbol('mFold'),\n    mFoldInnerEnable: Symbol('mFoldInnerEnable'),\n    mFoldIndex: Symbol('mFoldIndex'),\n    mFoldLayout: Symbol('mFoldLayout'),\n    mColor: Symbol('mColor'),\n    mTag: Symbol('mTag'),\n}\n\nfunction CategoriesHeader(color) {\n    // 'use strict';\n    // ...\n    // this[symbolMap.listRule] = []\n    // this[symbolMap.subListRule] = []\n    this[symbolMap.mColor] = color || \"#FA7298\";\n    this[symbolMap.ruleObjList] = []\n    this.VARMAP = {\n        CATEGORY: \"header.category\",\n        URL: \"header.url\",\n        FOLD: \"header.fold\",\n    }\n    this[symbolMap.mFoldLayout] = {\n        injectIndex: 1\n    }\n    this[symbolMap.mFoldIndex] = 1\n}\n\nObject.assign(CategoriesHeader.prototype, {\n    // Override 构造方法，相当于 function.prototype.constructor = (...) => {...}，new function() 的时候会自动执行\n    constructor: CategoriesHeader,\n    // 定义私有方法\n    VERSION: 202112011900,\n    checkParams() {\n        if (!this[symbolMap.mLayout]) {\n            throw new Error(\"请调用 layout(d) 传入当前界面\")\n        }\n        if (!(this[symbolMap.src] || this[symbolMap.true_url])) {\n            throw new Error(\"请调用 trueUrl(url) 传入当前分类的链接或调用 html(mHtml) 传入当前分类页面的源码\")\n        }\n        if (!this[symbolMap.mPage]) {\n            throw new Error(\"请调用 page(mPage) 传入当前页数\")\n        }\n        if (this[symbolMap.ruleObjList].length < 1) {\n            throw new Error(\"请调用相关方法传入定位规则\")\n        }\n        if (!this[symbolMap.mFold]) {\n            this[symbolMap.mFold] = '0'\n        }\n    },\n    layout(mLayout) {\n        this[symbolMap.mLayout] = mLayout\n        return this\n    },\n    trueUrl(url) {\n        this[symbolMap.true_url] = url\n        return this\n    },\n    page(mPage) {\n        if (typeof (mPage) === 'string') {\n            mPage = parseInt(mPage)\n        }\n        this[symbolMap.mPage] = mPage\n        return this\n    },\n    html(mSrc) {\n        this[symbolMap.src] = mSrc\n        return this\n    },\n    list(rule) {\n        if (this[symbolMap.ruleObjList].length > 0) {\n            throw new Error(\"list(rule) add(ruleObj) 只能二选一！\")\n        }\n        this[symbolMap.ruleObjList] = [{}]\n        this[symbolMap.ruleObjList][0].listRule = rule\n        this[symbolMap.ruleObjList][0]['一级分类'] = rule\n        return this\n    },\n    subList(rule) {\n        if (this[symbolMap.ruleObjList].length > 1) {\n            throw new Error(\"subList(rule) add(ruleObj) 只能二选一！\")\n        }\n        if (!this[symbolMap.ruleObjList][0] || (!this[symbolMap.ruleObjList][0].listRule && !this[symbolMap.ruleObjList][0]['一级分类'])) {\n            throw new Error(\"请先调用 list(rule) 或 一级分类(rule) 定位一级分类\")\n        }\n        this[symbolMap.ruleObjList][0].subListRule = rule\n        this[symbolMap.ruleObjList][0]['子分类'] = rule\n        return this\n    },\n    title(rule) {\n        if (this[symbolMap.ruleObjList].length > 1) {\n            throw new Error(\"title(rule) add(ruleObj) 只能二选一！\")\n        }\n        if (!this[symbolMap.ruleObjList][0] || (!this[symbolMap.ruleObjList][0].listRule && !this[symbolMap.ruleObjList][0]['一级分类'])) {\n            throw new Error(\"请先调用 list(rule) 或 一级分类(rule) 定位一级分类\")\n        }\n        this[symbolMap.ruleObjList][0].titleRule = rule\n        this[symbolMap.ruleObjList][0]['分类标题'] = this[symbolMap.ruleObjList][0].titleRule\n        return this\n    },\n    url(rule) {\n        if (this[symbolMap.ruleObjList].length > 1) {\n            throw new Error(\"url(rule) add(ruleObj) 只能二选一！\")\n        }\n        if (!this[symbolMap.ruleObjList][0] || (!this[symbolMap.ruleObjList][0].listRule && !this[symbolMap.ruleObjList][0]['一级分类'])) {\n            throw new Error(\"请先调用 list(rule) 或 一级分类(rule) 定位一级分类\")\n        }\n        this[symbolMap.ruleObjList][0].urlRule = rule\n        this[symbolMap.ruleObjList][0]['分类链接'] = this[symbolMap.ruleObjList][0].urlRule\n        return this\n    },\n    /**\n     * 是否开启折叠功能\n     *\n     * @param enabled true 表示开启，false 表示禁用\n     * @returns {CategoriesHeader}\n     */\n    foldInner(enabled) {\n        if (!(typeof (enabled) === 'boolean')) {\n            throw new Error(\"请传入 true 或 false 表示开启或关闭折叠功能！\")\n        }\n        this[symbolMap.mFoldInnerEnable] = enabled\n        return this\n    },\n    /**\n     * 从第 index 行开始折叠\n     *\n     * @param index 开始折叠的行数\n     * @returns {CategoriesHeader}\n     */\n    foldIndex(index) {\n        if (!(typeof (index) === 'number')) {\n            throw new Error(\"开始折叠行请传入数字！\")\n        }\n        if (index < 1) {\n            throw new Error(\"开始折叠行请传入大于 0 的整数！\")\n        }\n        this[symbolMap.mFoldIndex] = index || 1;\n        return this\n    },\n    /**\n     * 折叠按钮的界面\n     *\n     * @param layout 与 d.push 结构一致，\n     *        例：{ title:\"标题1\", url:\"xxx\", col_type:\"scroll_button\" };\n     *        参数采用可选覆盖模式，不写的参数则使用默认;\n     *        比如传入 { col_type:\"text_1\" }，那最终结果就是 { title:\"标题1\", url:\"xxx\", col_type:\"text_1\" }\n     * @returns {CategoriesHeader}\n     */\n    foldLayout(layout) {\n        if (typeof layout === 'object') {\n            let keys = Object.keys(layout)\n            let injectIndex = layout.injectIndex || layout['折叠按钮插入行']\n            if (layout.title || layout.url || layout.col_type || injectIndex) {\n                for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i]\n                    this[symbolMap.mFoldLayout][key] = layout[key];\n                }\n            } else {\n                throw new Error(\"请传入正确的折叠界面元素！\")\n            }\n            // injectIndex 折叠按钮插入第 injectIndex 行\n            if (injectIndex) {\n                if (!(typeof (injectIndex) === 'number')) {\n                    throw new Error(\"折叠按钮插入行请传入数字！\")\n                }\n                if (injectIndex < 1) {\n                    throw new Error(\"折叠按钮插入行请传入大于 0 的整数！\")\n                }\n                if (injectIndex > this[symbolMap.mFoldIndex]) {\n                    throw new Error(\"折叠按钮插入行不得大于显示折叠行数！请调用 .foldIndex(index) 或 .第几行开始折叠(index) 传入正确的显示折叠行数\")\n                }\n                this[symbolMap.mFoldLayout].injectIndex = injectIndex || 1;\n            }\n        } else {\n            throw new Error(\"请传入正确的折叠界面元素！\")\n        }\n        return this;\n    },\n    // 当前是否折叠\n    fold(isFold) {\n        if (typeof (isFold) === 'string') {\n            isFold = isFold === '1'\n        }\n        if (isFold) {\n            this[symbolMap.mFold] = '1';\n        } else {\n            this[symbolMap.mFold] = '0';\n        }\n        return this\n    },\n    color(mColor) {\n        this[symbolMap.mColor] = mColor\n        return this\n    },\n    tag(mTag) {\n        this[symbolMap.mTag] = mTag\n        return this\n    },\n    add(ruleObj) {\n        // log($.stringify(ruleObj))\n        if (ruleObj.constructor === Array) {\n            this[symbolMap.ruleObjList] = this[symbolMap.ruleObjList].concat(ruleObj)\n        } else {\n            this[symbolMap.ruleObjList].push(ruleObj)\n        }\n        return this;\n    },\n    evalJSRule(item, jsRule) {\n        let rule = jsRule.replace(\"@js:\", \"\")\n        rule = rule.trim()\n        // log($.stringify(rule))\n        let input = item\n        if (rule.startsWith(\"(\")) {\n            eval('result = ' + rule)\n        } else {\n            /**\n             * 还原成 $.toString(...) 的最终结果，达到最终处理方式跟上面的 if 一致的目的\n             */\n            eval('result = ' + '(() => {' + rule + '})()')\n        }\n        return (result || '')\n    },\n    getTitle(src, category) {\n        let title = ''\n        let titleRule = category.titleRule || 'a&&Text'\n        if (titleRule.startsWith(\"@js:\")) {\n            title = this.evalJSRule(src, titleRule)\n        } else {\n            title = parseDomForHtml(src, titleRule)\n        }\n        return title || \"\";\n    },\n    getUrl(src, category) {\n        let url = ''\n        let urlRule = category.urlRule || 'a&&href'\n        if (typeof urlRule === 'object') {\n            let mUrlRule = urlRule.rule || urlRule['解析规则'] || 'a&&href';\n            if (mUrlRule.startsWith(\"@js:\")) {\n                url = this.evalJSRule(src, mUrlRule);\n            } else {\n                let parse = parseDom;\n                if (urlRule.parseOption) {\n                    switch (urlRule.parseOption) {\n                        case \"parseDom\":\n                        case \"pd\":\n                            parse = parseDom;\n                            break;\n                        case \"parseDomForHtml\":\n                        case \"pdfh\":\n                            parse = parseDomForHtml;\n                            break;\n                        default:\n                            parse = parseDom;\n                    }\n                } else if (urlRule[\"解析方法\"]) {\n                    switch (urlRule[\"解析方法\"]) {\n                        case \"parseDom\":\n                        case \"pd\":\n                            parse = parseDom;\n                            break;\n                        case \"parseDomForHtml\":\n                        case \"pdfh\":\n                            parse = parseDomForHtml;\n                            break;\n                        default:\n                            parse = parseDom;\n                    }\n                }\n                url = parse(src, mUrlRule);\n            }\n            if (urlRule.dealUrl) {\n                url = urlRule.dealUrl(url)\n            } else if (urlRule['二次处理']) {\n                url = urlRule['二次处理'](url)\n            }\n        } else {\n            if (urlRule.startsWith(\"@js:\")) {\n                url = this.evalJSRule(src, urlRule);\n            } else {\n                url = parseDom(src, urlRule);\n            }\n        }\n        return url || \"\";\n    },\n    build() {\n        // 检测是否传入需要的参数\n        this.checkParams()\n        // 每一个分类的唯一标识\n        let mTag = this[symbolMap.mTag] || \"\"\n        //翻页 需要根据实际替换\n        const html = this[symbolMap.src] || request(this[symbolMap.true_url])\n        const empty = \"hiker://empty\"\n        //获取列表\n        const categories = []\n        this[symbolMap.ruleObjList].map(ruleObj => {\n            let list = []\n            let listRule = ruleObj.listRule || ruleObj[\"一级分类\"]\n            if (listRule.startsWith(\"@js:\")) {\n                // log($.stringify(listRule))\n                list = this.evalJSRule(html, listRule)\n            } else {\n                list = parseDomForArray(html, listRule)\n            }\n            // log(list)\n            list.map(category => {\n                categories.push({\n                    list: category,\n                    subListRule: ruleObj.subListRule || ruleObj[\"子分类\"],\n                    titleRule: ruleObj.titleRule || ruleObj[\"分类标题\"],\n                    urlRule: ruleObj.urlRule || ruleObj[\"分类链接\"],\n                });\n            })\n        })\n\n        // log($.stringify(categories))\n\n        let init_cate = []\n        for (let i = 0; i < 20; i++) {\n            init_cate.push(\"0\")\n        }\n\n        const cate_temp_json = getMyVar(mTag + this.VARMAP.CATEGORY, JSON.stringify(init_cate))\n        const cate_temp = JSON.parse(cate_temp_json)\n\n        if (this[symbolMap.mPage] === 1) {\n\n            categories.forEach((category, index) => {\n\n                // 折叠 UI\n                if (this[symbolMap.mFoldInnerEnable] && this[symbolMap.mFoldLayout].injectIndex === (index+1)) {\n                    let foldLayout = {\n                        title: this[symbolMap.mFoldLayout].title || (this[symbolMap.mFold] === '1' ? '““””<b><span style=\"color: #FF0000\">∨</span></b>' : '““””<b><span style=\"color: #1aad19\">∧</span></b>'),\n                        url: this[symbolMap.mFoldLayout].url || $(\"hiker://empty#noHistory#\").lazyRule((params) => {\n                            putMyVar(params.mTag + params.VARMAP.FOLD, getMyVar(params.mTag + params.VARMAP.FOLD, params.isFold) === '1' ? '0' : '1')\n                            refreshPage(false);\n                            return \"hiker://empty\"\n                        }, {\n                            mTag: mTag,\n                            isFold: this[symbolMap.mFold],\n                            VARMAP: this.VARMAP\n                        }),\n                        col_type: this[symbolMap.mFoldLayout].col_type || \"scroll_button\",\n                    }\n                    this[symbolMap.mLayout].push(foldLayout)\n                }\n\n                //具体列表下的分类\n                let sub_categories = [];\n                if (category.subListRule.startsWith(\"@js:\")) {\n                    sub_categories = this.evalJSRule(category.list, category.subListRule)\n                } else {\n                    sub_categories = parseDomForArray(category.list, category.subListRule);\n                }\n                if (index < (this[symbolMap.mFoldIndex] || 1)) {\n                    sub_categories.forEach((item, key) => {\n                        let title = this.getTitle(item, category)\n                        let url = this.getUrl(item, category)\n\n                        this[symbolMap.mLayout].push({\n                            title: key.toString() === cate_temp[index] ? '““””<b><font color=' + this[symbolMap.mColor] + '>' + title + ' </font></b>' : title,\n                            url: $(url).lazyRule((params) => {\n                                let new_cate = []\n                                if (params.index === 0) {\n                                    params.cate_temp.forEach((cate, index) => {\n                                        new_cate.push(index === 0 ? params.key.toString() : \"0\")\n                                    });\n                                } else {\n                                    params.cate_temp[params.index] = params.key.toString()\n                                }\n                                putMyVar(params.tag + params.VARMAP.CATEGORY, JSON.stringify(params.index === 0 ? new_cate : params.cate_temp))\n                                putMyVar(params.tag + params.VARMAP.URL, input)\n                                refreshPage(true)\n                                return \"hiker://empty\"\n                            }, {\n                                cate_temp: cate_temp,\n                                index: index,\n                                VARMAP: this.VARMAP,\n                                tag: mTag,\n                                key: key,\n                                page: this[symbolMap.mPage],\n                            }),\n                            col_type: 'scroll_button',\n                        })\n                    })\n                    this[symbolMap.mLayout].push({\n                        col_type: \"blank_block\"\n                    });\n                } else if (this[symbolMap.mFold] === '0') {\n                    sub_categories.forEach((item, key) => {\n                        let title = this.getTitle(item, category)\n                        let url = this.getUrl(item, category)\n\n                        this[symbolMap.mLayout].push({\n                            title: key.toString() === cate_temp[index] ? '““””<b><font color=' + this[symbolMap.mColor] + '>' + title + ' </font></b>' : title,\n                            url: $(url).lazyRule((params) => {\n                                params.cate_temp[params.index] = params.key.toString()\n\n                                putMyVar(params.tag + params.VARMAP.CATEGORY, JSON.stringify(params.cate_temp))\n                                putMyVar(params.tag + params.VARMAP.URL, input)\n                                refreshPage(true)\n                                return \"hiker://empty\"\n                            }, {\n                                cate_temp: cate_temp,\n                                index: index,\n                                VARMAP: this.VARMAP,\n                                tag: mTag,\n                                key: key,\n                                page: this[symbolMap.mPage],\n                            }),\n                            col_type: 'scroll_button',\n                        })\n                    })\n                    this[symbolMap.mLayout].push({\n                        col_type: \"blank_block\"\n                    });\n                }\n            });\n        }\n    },\n\n    界面(layout) {\n        return this.layout(layout)\n    },\n    分类链接(trueUrl) {\n        return this.trueUrl(trueUrl);\n    },\n    页码(page) {\n        return this.page(page);\n    },\n    源码(html) {\n        return this.html(html);\n    },\n    定位一级分类(list) {\n        return this.list(list);\n    },\n    定位子分类(subList) {\n        return this.subList(subList);\n    },\n    定位分类标题(title) {\n        return this.title(title);\n    },\n    定位分类链接(url) {\n        return this.url(url);\n    },\n    开启内置折叠功能() {\n        return this.foldInner(true);\n    },\n    关闭内置折叠功能() {\n        return this.foldInner(false);\n    },\n    第几行开始折叠(index) {\n        return this.foldIndex(index);\n    },\n    折叠按钮样式(layout) {\n        return this.foldLayout(layout)\n    },\n    折叠(fold) {\n        return this.fold(fold);\n    },\n    选中的分类颜色(color) {\n        return this.color(color);\n    },\n    唯一标识(mTag) {\n        return this.tag(mTag)\n    },\n    添加分类定位(ruleObj) {\n        return this.add(ruleObj);\n    },\n    开始打造分类() {\n        return this.build();\n    },\n\n})\n$.exports = new CategoriesHeader();\n$.exports\n"},{"col_type":"movie_3","name":"链接处理工具","path":"url-processor","rule":"/**\n * 本地网页插件链接 hiker://files/rules/js/UrlProcessor.js\n * 子页面链接 hiker://page/url-processor\n * 道长仓库链接 http://hiker.nokia.press/hikerule/rulelist.json?id=2849\n * 码云 Gitee 链接 https://gitee.com/reborn0/HikerRules/raw/master/plugins/UrlProcessor.js\n */\nfunction UrlProcessor() {\n    this.params = {}\n    this.regexMap = [\n        {\n            reg: '(vodtype|videot)\\\\/\\\\w+',\n            exec: () => {\n                return this.params.url\n                    .replace(/-\\d+.html/, '-' + this.params.page + '.html')\n                    .replace(/((vodtype|videot)\\/\\w+).html/, '$1-' + this.params.page + '.html')\n            }\n        },\n        {\n            reg: '\\\\/?[\\\\w\\\\d]+-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\\\d*---\\\\d*.html',\n            exec: () => {\n                return this.params.url\n                    .replace(/\\d*(---.html)/, this.params.page + '$1')\n                    .replace(/(---\\d+.html)/, this.params.page + '$1'); // 拼接页码\n            }\n        },\n        {\n            reg: '((\\\\/vod\\\\/show)?(\\\\/area\\\\/[\\\\w\\\\d%]+)?(\\\\/by\\\\/[\\\\w\\\\d%]+)?(\\\\/id\\\\/\\\\d+)?(\\\\/letter\\\\/[\\\\w\\\\d%]+)?)(\\\\/page\\\\/\\\\d+)?(\\\\/year\\\\/\\\\d+)?\\\\.html',\n            exec: () => {\n                let regExp = /((\\/vod\\/show)?(\\/area\\/[\\w\\d%]+)?(\\/by\\/[\\w\\d%]+)?(\\/id\\/\\d+)?(\\/letter\\/[\\w\\d%]+)?)(\\/page\\/\\d+)?(\\/year\\/\\d+)?\\.html/\n                return this.params.url\n                    .replace(regExp, '$1' + (\"/page/\" + this.params.page) + '$8' + \".html\")\n            }\n        }\n    ]\n}\n\nObject.assign(UrlProcessor.prototype, {\n    constructor: UrlProcessor,\n    checkParams() {\n        if (!this.params.url) {\n            throw new Error(\"请先调用 .baseUrl(url) 传入链接进行初始化!\")\n        }\n        if (!this.params.page) {\n            throw new Error(\"请先调用 .page(page) 传入页码进行初始化!\")\n        }\n    },\n    baseUrl(url){\n        this.params.url = url\n        return this\n    },\n    page(page){\n        this.params.page = page\n        return this\n    },\n    addExtra(regExp) {\n        if (regExp.constructor === Array) {\n            this.regexMap = this.regexMap.concat(regExp)\n        } else {\n            this.regexMap.push(regExp)\n        }\n        return this;\n    },\n    debug() {\n        this.params.debug = true\n        return this;\n    },\n    exec() {\n        this.checkParams()\n        let true_url = ''\n        for (let i = 0; i < this.regexMap.length; i++) {\n            let regObj = this.regexMap[i];\n            let urlExp = regObj.reg;\n            if (typeof urlExp === 'string') {\n                urlExp = new RegExp(urlExp)\n            }\n            if (urlExp.test(this.params.url)) {\n                if (this.params.debug) {\n                    log(urlExp.toString())\n                }\n                true_url = regObj.exec();\n                break;\n            }\n        }\n        if (true_url) {\n            return true_url;\n        } else {\n            return this.params.url\n        }\n    },\n    获取处理结果() {\n        return this.exec()\n    },\n    链接(url) {\n        return this.baseUrl(url)\n    },\n    页码(page) {\n        return this.page(page)\n    },\n    插入新处理规则(regExp) {\n        return this.addExtra(regExp)\n    },\n    调试模式() {\n        return this.debug();\n    }\n})\n$.exports=new UrlProcessor()\n$.exports\n"},{"col_type":"movie_3","name":"函数","path":"jxhs","rule":"var fftt = 'Mw8giyH1CqnTz3B7VHj7MTzvcuXIErgr1D/PugFmhOWvF6WTnKV54M1uUckMlxnLIUMbZ7FiqgLuRWcbwGXhb+67fSMBdz5Vsf6zP1dv9f4hQxtnsWKqAu5FZxvAZeFv8ki+AZPvNsd/0JVRBjUHC5QmtCkVhlM/kpn/BFWtRr0H/ZHQQq4l4JDNzXnMXA0myyvLSNZWc/sIn/vWSAHU9kAbjU4qSZsSAu9by0bMwdCPDsU4ppskU39rBSPFNDBzYyvXsJhrztaabnexWz65cpcx/H34lECjupP0oLCkmODO4WZXi1C2GnAA+h1I7YDdyyvLSNZWc/sIn/vWSAHU9kBUv7gd1Qj5oRaCUU7r2I0mmFaoD3Q9RpDhmSenxUEIP7+zUU1QW0/0yvSKOLD/wrZEVUca7lD0mfnmHuCOPLg17QCC6yJ9qIcxo3Rh/YFMPKiB1xoeDNcCD97Cs8QBwhdbux6xz/HtOSlMGtu9/AWnr5tI3aX5+x8VcCVwJ/y+SXu9+l97W7KcATyE/A4fy963XgJY2zS48DLS/kiBU3Q873LlyBK4K9Q/z7oBZoTlepYzd6bnhzKgDBj5/fX1sDKHABIyMs4PqDBy1Epmzu3cXRvPGFj1xmg4sYTw/EpayyvLSNZWc/sIn/vWSAHU9qpRYwPSVaek0SQ+LoPrGP128aEqssiPJrXXIGnYsy3MmwePe41HTI6MhJlAVd+F1UkY7wLTnL4QS7GPJsBvvfYp1xWcgVqDWkR7GoNOOMNwoyRy8bMPTZJ2xeqVCEhXyL4CsuqbinNXddqoloYeAOkqzVkXD/VS903fB2lDun0pjVznHNJQFhgia6QLq2qZg9U+SVOiXOyVg2lNovINWuWfhc7+Ty7jXzR4CXArcUr2ItdtzQvj4A0229ZtBAXj1B2k8ocmCbW1+fJ4+xJTOEennAeM0zBL7Ze+W9MFZr9EoOeoToq7VEqmUEBdpKwQzpsGtGj9OLys264hCIF8Fc4dIeONwhRjuUi1Lfpm2i0swHelD1loEesCyD501H7RYzCFmPvn8znewphfbNGA5JP/fxoRrSNw+JnoOCSgLuJUg//XSvDUWNCk4IGr5YXTOSuOKLeuLncZ50H8JRU7fCY=';\nvar ssyz = 'TloGnnikThrfs/5fDNlk5CSsbaGtAH7W/uMZjuYoIupB6bCoo9CotLQHfPIdGgbkbynKqL2aUE2Xy558X2QxHYtTU09vD+4oaCDIuSZO7nxDbLfRGfWj7zql+yMbvF+aJoD/m6Psfw/PyYOAp/ZVGdrPzaCByfd0HL5DFVSw+YF2OC40V8SP9RxdFKKdrBuPxCWdxUCFrJ+1lRy/TU3LC84C4xxEBhgud7RtBp0zZArqBE06+Z3JtDP0eFCz/D5X0409qPHK3e1y/LuUgccuxpHnjYLE1GjlP8wYA2hQWe7yPngggQBHw33/gvb3tuCcxEKTWgmah/R32AH9ZF8jF7WemT26lUizVXe/spCdhDgHR/zUhODD4PO6glI8JPhdu+VwfPyRLG2D7CUo1L6SIF+0fYf0oTOWN13UPITo5+uZd/WnQQLU8NYx/WFCThEnkbzln9YGt60fRxsH+8uMDFgaBiC+z2SpcxB9gZ6GXypLSXWaj+qEUbGJKEx+jK/v5fnrkIhCdwNbkp9dRks6dmlYlBifzoWF8RkuC3rqPtoScBkMOMZu7GiVtoHEdHUozmnUIdrU1LGIqq9WnG7X2a3yH8s65mjLuLnd3q0U8v+LMPnHL2/GjQuTQKVh+RKEPqK/JdrChGLNrjcHvLHDbHEshrGZuQOdEphbx/PkhkvaYy4K1MO84R17guRsKs/V6niUPaL+XbQ7c3fqJS4VHJwludJTDe02euffGCm0PJIPlAOgLHnX0izJhA6q738R2UwQcWBQjJt79aF+kyqSdyt1QPVQVjaC3IpRf7PgsDhEJ7bi9nSclyIzgJ9DCJ4T+8dG1xHhKyZasT7L/x9Lfr1Mgs8nBZER2W9ax7iTkNK+X5ACU//p/YoP/uAanDtb3D0iKUUuXFH+Jbb0x1P322S2w6BJ46nuNHBMHTpVuWwhZeZzriGh7qoOywLWiExBMKyxTGLnmKh7r03/yXKYWIJnpBN2MMycVHRZJ7RumHV4CIsVrq7iRP48823RJVt9OtyP7uuc3wBBV3kcZUzbbaYdWBx1+Au+Od2u7lR6joOL810mcJm/f7J5TvGQP6HGph1YHHX4C7453a7uVHqOgyjjh5EBd720MEBY23c+TKq/z9UpWDDOg48ZFnwSIhFqitWdiZiqsaYuN0/SXwiK8EG9eQ29u2XDJoDW4mlwtcRO7vaX5XcFsgf4/mLU07mi'"},{"col_type":"movie_3","name":"二级mo-movs-item","path":"mo-movs-item","rule":"var d = [];\nvar html = getResCode();\nd.push({\n    title: '分类：' + pdfh(html, '.mo-cols-lays&&li,2--span&&Text') +\n        ' | ' + pdfh(html, '.mo-cols-lays&&li,3--span&&Text') +\n        ' | ' + pdfh(html, '.mo-cols-lays&&li,4--span&&Text') +\n        '\\n' + pdfh(html, '.mo-cols-lays&&li&&Text')\n        .substring(0, 15) +\n        '\\n' + pdfh(html, '.mo-cols-lays&&li,1&&Text')\n        .substring(0, 15),\n    desc: '更新时间：' + pdfh(html, '.mo-cols-lays&&li,5&&Text').substring(0, 15),\n    img: pd(html, '.mo-situ-pics&&data-original'),\n    url: MY_URL,\n    col_type: 'movie_1_vertical_pic_blur'\n});\n\nvar 线路 = 'body&&.mo-movs-btns'\nvar 选集 = 'body&&.mo-movs-item'\nvar 线路名 = 'Text'\nvar 选集列表 = 'ul&&li'\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\nsetResult(d);"},{"col_type":"movie_3","name":"数字验证码","path":"yzm","rule":"while (/输入验证码|系统安全验证/.test(html)) {\n    let headers = {\n        \"User-Agent\": MOBILE_UA,\n        \"Referer\": MY_URL\n    }\n    eval(JSON.parse(request('hiker://page/jxhs?rule=模板·Q')).rule);\n    evalPrivateJS(ssyz);\n\n    let vcode = getVCode2(MY_HOME + '/index.php/verify/index.html?', JSON.stringify(headers), 'num');\n    fetch(MY_HOME + html.match(/\\/index.php.*?verify=/)[0] + JSON.parse(vcode).ret, {\n        headers: headers,\n        method: 'POST'\n    })\n    var yz = MY_TYPE == 'home' ? true_url : MY_URL\n    log(MY_TYPE)\n    html = request(yz, {\n        //   headers: headers\n    })\n}\nif (/频繁操作/.test(html)) {\n    d.push({\n    title: '网站搜索时间间隔',\n    desc: \"下拉重试\"\n})\n\n}"},{"col_type":"movie_3","name":"二级y-playList","path":"y-playList","rule":"js:\nvar d = [];\nvar html = getResCode()\n\nd.push({\n    title: pdfh(html, '.module-info-item,3&&Text')\n        .substring(0, 18) +\n        '\\n' +\n        pdfh(html, '.module-info-item,1&&Text')\n        .substring(0, 18) +\n        '\\n' +\n        pdfh(html, '.module-info-item,4&&Text'),\n    img: pd(html, '.lazyload&&data-original||src') +\n        '@Referer=',\n    url: MY_URL,\n    desc: pdfh(html, '.module-info-item,5||.module-info-item&&Text'),\n    col_type: 'movie_1_vertical_pic_blur'\n});\n\nvar 线路 = '#y-playList&&span'\nvar 选集 = 'body&&.module-play-list'\nvar 线路名 = 'Text'\nvar 选集列表 = 'body&&a'\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\nsetResult(d);"},{"col_type":"movie_3","name":"动态分类3","path":"dtfl3","rule":"const empty = \"hiker://empty\"\n\nif (typeof(拼接分类) != 'undefined' && 拼接分类 != '') {\n    var categories = pdfa(html, 大类定位).concat(pdfa(html, 拼接分类))\n} else {\n    var categories = pdfa(html, 大类定位)\n}\n\nlet init_cate = []\n\nfor (let i = 0; i < 20; i++) {\n    init_cate.push(\"0\")\n}\n\n\nconst cate_temp_json = getVar(MY_RULE.title, JSON.stringify(init_cate))\nconst cate_temp = JSON.parse(cate_temp_json)\n\nif (parseInt(page) === 1) {\n    \n    categories.forEach((category, index) => {\n        let sub_categories = pdfa(category, 小类定位);\n        \n     \n     \n            sub_categories.forEach((item, key) => {\n                let title = pdfh(item, 分类标题)\n                if (typeof(排除) != 'undefined' && 排除 != '') {\n                    title = title.replace(new RegExp(排除, \"g\"), \"\")\n                }\n                d.push({\n                    title: key.toString() === cate_temp[index] ? \"““””<b>\" + title.fontcolor(分类颜色)+\"</b>\" : title,\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\n                        params.cate_temp[params.index] = params.key.toString()\n\n                        putVar(MY_RULE.title, JSON.stringify(params.cate_temp))\n                        putVar(params.url, input)\n                        clearMyVar(\"next_page\");\n                        refreshPage(true)\n                        return \"hiker://empty\"\n                    }, {\n                        cate_temp: cate_temp,\n                        \n                        index: index,\n                        url: MY_URL,\n                        key: key,\n                        page: page,\n                    }),\n                    col_type: 'scroll_button',\n                })\n            })\n            d.push({\n                col_type: \"blank_block\"\n            });\n        \n    })\n}"},{"col_type":"movie_3","name":"动态分类改","path":"dtfl4","rule":"js:\n/*\nVer 2023-10-28 1.0\n备注：不要用海阔代码格式化 内容会出错\n必须参数：\n分类颜色 大类定位 \n小类定位 分类标题 分类链接\nhtml =>源码 page =>页码\n可选参数：\n拼接分类 折叠标记 展开标记 排除\n大类链接 大类标题 清除键 开启折叠\n附加定位\n说明：\n外面用getMyVar(MY_RULE.url) 或者 状态 取链接\n魔改:α\n*/\n\nlet empty = \"hiker://empty\";\nlet categories = [];\nif (typeof (拼接分类) != 'undefined' && 拼接分类 != '') {\n    categories = [pdfa(html, 大类定位).join('\\n')];\n    if (拼接分类.includes(';')) {\n        拼接分类 = 拼接分类.split(';');\n    }\n    if (拼接分类.constructor == Array) {\n        拼接分类.forEach(item => {\n            categories = categories.concat(pdfa(html, item));\n        })\n    } else {\n        categories = [pdfa(html, 大类定位).join('\\n')].concat(pdfa(html, 拼接分类));\n    }\n    if (typeof (附加定位) != 'undefined' && 附加定位.length > 0) {\n        附加定位.forEach(x => {\n            var 一级 = pdfa(html, x.一级定位).map(s => {\n                var 定位 = pdfa(s, x.小类).map(q => {\n                    var title = pdfh(q, x.标题);\n                    var url = 'a'\n                    if (x.链接.includes('@@')) {\n                        state = x.链接.split('@@')[0]\n                        value = pdfh(q, x.链接.split('@@')[1]);\n                        if (x.转换 == true) {\n                            return `<li data-type=\"${state}\" data-val=\"${value}\"><a href=\"\">${title}</a></li>`\n                        } else {\n                            return `<a type=\"@extra\" state=\"${state}\" value=\"${value}\">${title}</a>`;\n                        }\n                    } else {\n                        href = pd(q, x.链接);\n                        return `<a href=\"${href}\">${title}</a>`;\n                    }\n                });\n                return 定位;\n            });\n            categories.push(一级.join('\\n'));\n        });\n    }\n} else {\n    categories = [pdfa(html, 大类定位).join('\\n')];\n}\n\nlet items = [];\nlet cates = [];\nlet init_cate = new Array(20).fill(\"0\");\nconst fold = getMyVar(MY_RULE.group, \"0\");\nconst cate_temp = JSON.parse(getMyVar(\"head.cate\", JSON.stringify(init_cate)));\nvar 折叠状态 = (typeof (开启折叠) != 'undefined') ? 开启折叠 : true;\nvar 折叠 = (typeof (折叠标记) != 'undefined' && 折叠标记 != '') ? 折叠标记 : '““””' + '∨'.fontcolor(\"#FF0000\");\nvar 展开 = (typeof (展开标记) != 'undefined' && 展开标记 != '') ? 展开标记 : '““””' + '∧'.fontcolor(\"#1aad19\");\nvar 清除 = (typeof (清除键) != 'undefined' && 清除键 != '') ? 清除键 : [];\nvar 状态 = (typeof (状态标记) != 'undefined' && 状态标记 != '') ? 状态标记 : MY_RULE.url;\nvar 大类处理 = typeof (一级分类处理) != 'undefined' ? true : false;\nvar 搜索 = typeof (开启搜索) != 'undefined' ? 开启搜索 : false;\nvar 全清 = (typeof (全清键) != 'undefined' && 全清键 != '') ? 全清键 : [];\n全清.unshift('yi_firstpage');\n\n\nif (parseInt(page) === 1) {\n    if (搜索) {\n        d.push({\n            title: \"\",\n            url: \"'hiker://search?rule=\" + MY_RULE.title + \"&s='+input\",\n            desc: \"搜索关键词\",\n            col_type: \"input\",\n            extra: {\n                defaultValue: getMyVar('keyword', ''),\n                onChange: $.toString(() => {\n                    putMyVar('keyword', input);\n                })\n            }\n        })\n    }\n    if (折叠状态) {\n        if (page == 1) {\n            items.push({\n                title: fold === '1' ? 折叠 : 展开,\n                url: $(\"#noLoading#\").lazyRule((title, fold, u, all, exps) => {\n                    var fold = getMyVar(MY_RULE.group, fold);\n                    var [展开, 折叠] = exps;\n                    if (fold == 1) {\n                        var cx = findItemsByCls(title + 'cate_button');\n                        storage0.putMyVar('cate_button', cx);\n                        deleteItemByCls(title + 'cate_button');\n                    } else {\n                        var cx = storage0.getMyVar('cate_button', []).map(x => {\n                            x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\n                            return x;\n                        });\n                        addItemAfter(title + 'cate_line', cx)\n                    }\n                    /*all.forEach((item) => {\n                      clearMyVar(item);\n                    });*/\n                    updateItem(title + 'cate_exp', {\n                        title: fold == 1 ? 展开 : 折叠,\n                    })\n                    putMyVar(MY_RULE.group, fold === \"1\" ? \"0\" : \"1\");\n                    return \"hiker://empty\";\n                }, MY_RULE.title, fold, 状态, 全清, [展开, 折叠]),\n                col_type: 'scroll_button',\n                extra: {\n                    id: MY_RULE.title + 'cate_exp',\n                    longClick: [{\n                        title: '清除状态',\n                        js: $.toString((x, all, cl) => {\n                            clearMyVar(x);\n                            clearMyVar('head.cate');\n                            all.forEach((item) => {\n                                clearMyVar(item)\n                            })\n                            cl.forEach((item) => {\n                                clearMyVar(item)\n                            })\n                            refreshPage();\n                        }, 状态, 全清, 清除)\n                    }]\n                }\n            })\n        }\n    }\n    let setTitle = (k, i, t) => {\n        return k == i ? \"““””\" + t.fontcolor(分类颜色) : t\n    }\n    categories.forEach((category, index) => {\n        let sub_categories = [];\n        if (小类定位.includes(';')) {\n            sub_categories = pdfa(category, 小类定位.split(';')[0]);\n            if (sub_categories.length == 0) {\n                sub_categories = pdfa(category, 小类定位.split(';')[1]);\n            }\n        } else {\n            sub_categories = pdfa(category, 小类定位);\n        }\n        if (index === 0) {\n            sub_categories.forEach((item, key) => {\n                let _大类链接 = (typeof (大类链接) != 'undefined' && 大类链接 != '') ? 大类链接 : 分类链接;\n\n                let _大类标题 = (typeof (大类标题) != 'undefined' && 大类标题 != '') ? 大类标题 : 分类标题;\n\n                let title = pdfh(item, _大类标题);\n                if (typeof (排除) != 'undefined' && 排除 != '') {\n                    title = title.replace(new RegExp(排除, \"g\"), \"\");\n                }\n                let params = {\n                    cate_temp: cate_temp, key: key, page: page, clears: 清除, state: 状态, allclears: 全清\n                }\n\n                let url = pd(item, _大类链接);\n                if (大类处理) {\n                    //log(一级分类处理)\n                    //log($.stringify(一级分类处理))\n                    let input = url;\n                    eval(\"result = \" + 一级分类处理);\n                    //log(result)\n                    url = result;\n                }\n                items.push({\n                    title: setTitle(key.toString(), cate_temp[index], title),\n                    col_type: 'scroll_button',\n                    url: $(url + '#noLoading#').lazyRule((params) => {\n                        let new_cate = [];\n                        params.clears.forEach((item) => {\n                            clearMyVar(item)\n                        })\n                        params.allclears.forEach((item) => {\n                            clearMyVar(item)\n                        })\n\n                        params.cate_temp.forEach((cate, index) => {\n                            new_cate.push(index === 0 ? params.key.toString() : \"0\")\n                        })\n                        putMyVar(\"head.cate\", JSON.stringify(new_cate));\n                        putMyVar(params.state, input);\n                        refreshPage(true);\n                        return \"hiker://empty\";\n                    }, params)\n                });\n            });\n            items.push({\n                col_type: \"blank_block\",\n                extra: {\n                    id: MY_RULE.title + 'cate_line',\n                }\n            })\n        } else {\n            sub_categories.forEach((item, key) => {\n                var extrapos = false;\n                if (item.includes('type=\"@extra\"')) {\n                    extrapos = true;\n                    //log('附加定位')\n                }\n\n                if (extrapos) {\n                    var title = pdfh(item, 'a&&Text');\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\n                        title = title.replace(new RegExp(排除, \"g\"), \"\");\n                    }\n                    var json = {\n                        type: pdfh(item, 'a&&state'),\n                        value: pdfh(item, 'a&&value'),\n                    }\n                } else {\n\n                    var title = pdfh(item, 分类标题);\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\n                        title = title.replace(new RegExp(排除, \"g\"), \"\");\n                    }\n\n                    var json = '';\n                    switch (true) {\n                        case 分类链接.includes('@@@'):\n                            json = {\n                                type: pdfh(item, 分类链接.split('@@@')[0]),\n                                value: pdfh(item, 分类链接.split('@@@')[1]),\n                            }\n                            break;\n                        case 分类链接.includes('@@'):\n                            json = {\n                                type: 分类链接.split('@@')[0],\n                                value: pdfh(item, 分类链接.split('@@')[1]),\n                            }\n                            break;\n                        default:\n                            json = pd(item, 分类链接);\n                            break;\n                    }\n                    /*var json=分类链接.includes('@@@')?{\n                         type:pdfh(item,分类链接.split('@@@')[0]),\n                         value:pdfh(item,分类链接.split('@@@')[1]),\n                     }:pd(item,分类链接);\n                     \n                     json=分类链接.includes('@@')?{\n                         type:分类链接.split('@@')[0],\n                         value:pdfh(item,分类链接.split('@@')[1]),\n                     }:pd(item,分类链接);*/\n\n                }\n\n                let params = {\n                    cate_temp: cate_temp, index: index, key: key, page: page, json: json, state: 状态, allclears: 全清\n                }\n                cates.push({\n                    title: setTitle(key.toString(), cate_temp[index], title),\n                    url: $('hiker://empty' + '#noLoading#').lazyRule((params) => {\n                        params.allclears.forEach((item) => {\n                            clearMyVar(item)\n                        })\n                        params.cate_temp[params.index] = params.key.toString();\n                        putMyVar(\"head.cate\", JSON.stringify(params.cate_temp));\n                        if (params.json.constructor === Object) {\n                            putMyVar('dt_' + params.json.type, params.json.value);\n                        } else {\n                            putMyVar(params.state, params.json);\n                        }\n                        refreshPage(true);\n                        return \"hiker://empty\";\n                    }, params),\n                    col_type: 'scroll_button',\n                    extra: {\n                        cls: MY_RULE.title + 'cate_button',\n                    }\n                });\n            });\n            cates.push({\n                col_type: \"blank_block\",\n                extra: {\n                    cls: MY_RULE.title + 'cate_button',\n                }\n            });\n        }\n    })\n}\n\n\nif (fold === \"1\" || 折叠状态 == false) {\n    items = items.concat(cates);\n}\nif (fold === \"0\") {\n    storage0.putMyVar('cate_button', cates)\n}\nif (typeof setPreResult != 'undefined') {\n    items = d.concat(items);\n    //清空继承数组\n    d.length = 0;\n    setPreResult(items);\n} else {\n    items.forEach(item => {\n        d.push(item);\n    })\n}\n"},{"col_type":"flex_button","name":"定位二级2","path":"erji2","rule":"d.push({\n    col_type: \"blank_block\"\n})\nvar name = getPageTitle()\nif(typeof(云盘)!=\"undefined\"){\nd.push({\n    title: \"云盘君\",\n    url: \"hiker://page/sou#noRecordHistory##noHistory#?rule=云盘君.简\",\n    img: \"http://123.56.105.145/tubiao/ke/25.png\",\n    col_type: \"icon_2_round\",\n    extra: {\n        searchTerms: name\n    }\n});\nvar qlist = JSON.parse(fetch(\"hiker://files/data/聚阅√/quark.txt\") || {});\nif (qlist[name]) {\n    var click = [{\n        title: \"更换\",\n        js: $.toString((name) => {\n            return $(\"{{clipboard}}\").input((name) => {\n                var qlist = JSON.parse(fetch(\"hiker://files/data/聚阅√/quark.txt\") || {});\n\n                qlist[name] = input\n\n                writeFile(\"hiker://files/data/聚阅√/quark.txt\", JSON.stringify(qlist));\n                refreshPage()\n\n                return \"toast://已保存\"\n\n            }, name)\n        }, name)\n    }]\n    try {\n        var qext = JSON.parse(qlist[name])\n        qext['longClick'] = click\n        qext['pageTitle'] = MY_PARAMS.name;\n        var qurl = \"hiker://page/quarkList#noRecordHistory#?rule=Quark.简&page=fypage\"\n    } catch (e) {\n        qext = {\n            longClick: click,\n            pageTitle: name\n        };\n        qurl = \"hiker://page/quarkList#noRecordHistory#?rule=Quark.简&realurl=\" + encodeURIComponent(qlist[MY_PARAMS.name]) + \"&sharePwd=\";\n\n    }\n    d.push({\n        title: '夸克网盘',\n        url: qurl,\n        extra: qext,\n        img: \"http://pic.7273.com/upload/2022-6/20226131744447587.png\",\n        col_type: \"icon_2_round\"\n    })\n} else {\n    d.push({\n        title: \"添加资源\",\n        col_type: \"icon_2_round\",\n        img: \"http://123.56.105.145/tubiao/system/124.png\",\n        url: $(\"{{clipboard}}\").input((name) => {\n            var qlist = JSON.parse(fetch(\"hiker://files/data/聚阅√/quark.txt\") || {});\n\n            qlist[name] = input\n\n            writeFile(\"hiker://files/data/聚阅√/quark.txt\", JSON.stringify(qlist));\n            refreshPage()\n\n            return \"toast://已保存\"\n\n        },name),\n\n    })\n}\n\n}\nd.push({\n    col_type: \"blank_block\"\n})\n\n\n\n\n\naddListener(\"onClose\", $.toString(() => {\n    clearMyVar(\"lists\");\n}));\nstorage0.putMyVar(\"lists\", lists);\nvar list = lists[getMyVar(MY_URL, '0')];\nvar 排序 = getMyVar(MY_URL + \"章节排序\", '#1aad19\">正序');\nvar 提示 = 排序 == '#FF0000\">倒序' ? '#1aad19\">正序' : '#FF0000\">倒序';\nvar 排序名 = '““””<b><span style=\"color:排序</span></b>';\n\nd.push({\n    title: '““””<b><span style=\"color: ' + 排序 + '</span></b>',\n    url: $(\"#noLoading#\").lazyRule((tabs, 排序名, lazy, d, TV推送) => {\n        var lists = storage0.getMyVar(\"lists\");\n        var 章节 = lists[getMyVar(MY_URL, '0')];\n        var 排序 = getMyVar(MY_URL + \"章节排序\", '#1aad19\">正序');\n        var 提示 = 排序 == '#FF0000\">倒序' ? '#1aad19\">正序' : '#FF0000\">倒序';\n        updateItem({\n            extra: {\n                id: MY_URL + \"_排序\",\n                longClick: [{\n                    title: \"TVbox推送\",\n                    js: TV推送(tabs, lists, d)\n                }]\n            },\n            title: 排序名.replace('排序', 提示)\n        });\n        if (排序 == '#1aad19\">正序') {\n            章节.reverse();\n        }\n        let cp = 章节.map((data, ssid) => ({\n            title: data.title,\n            url:  data.url + lazy,\n            col_type: 章节.length > 3 ? 'text_4' : 'text_2',\n            extra: {\n                cls: MY_URL + \"_选集\",\n                id: data.url\n            }\n        }));\n        deleteItemByCls(MY_URL + \"_选集\");\n        addItemBefore(MY_URL + \"footer\", cp);\n        putMyVar(MY_URL + \"章节排序\", 提示);\n        return \"hiker://empty\";\n    }, tabs, 排序名, lazy, d[0], TV推送),\n    col_type: 'flex_button',\n    extra: {\n        id: MY_URL + \"_排序\",\n        longClick: [{\n            title: \"TVbox推送\",\n            js: TV推送(tabs, lists, d[0])\n        }]\n    }\n});\n\nfunction TV推送(tabs, lists, d) {\n    return $.toString((tabs, lists, d) => {\n        var 推送 = {\n            \"name\": getPageTitle(),\n            \"content\": d.desc,\n            \"pic\": d.img || d.pic_url,\n            \"from\": tabs.join('$$$'),\n            \"url\": storage0.getMyVar(\"lists\").map(li => li.map(data => data.title + '$' +data.url).join('#')).join('$$$')\n        };\n        return \"hiker://page/push?rule=XYQ推送&pushurl=\" + encodeURIComponent(JSON.stringify(推送));\n    }, tabs, lists, d);\n}\n\ntabs.forEach((data, id) => {\n    d.push({\n        title: getMyVar(MY_URL, '0') == id ? `““${data}””` : data,\n        url: $(\"#noLoading#\").lazyRule((线路, lazy, id) => {\n            var lists = storage0.getMyVar(\"lists\");\n            var 排序 = getMyVar(MY_URL + \"章节排序\", '#1aad19\">正序');\n            var 提示 = 排序 == '#FF0000\">倒序' ? '#1aad19\">正序' : '#FF0000\">倒序';\n            线路.forEach((data, xlid) => {\n                updateItem({\n                    title: id == xlid ? `““${data}””` : data,\n                    extra: {\n                        id: MY_URL + \"_线路\" + xlid\n                    }\n                });\n            })\n            putMyVar(MY_URL, id)\n            var 章节 = lists[getMyVar(MY_URL, '0')];\n            if (排序 == '#FF0000\">倒序') {\n                章节.reverse()\n            }\n            let cp = 章节.map((data, ssid) => {\n                return {\n                    title: data.title,\n                    url: data.url+ lazy,\n                    col_type: 章节.length > 3 ? 'text_4' : 'text_2',\n                    extra: {\n                        cls: MY_URL + \"_选集\",\n                        id: data.url\n                    }\n                };\n            });\n            deleteItemByCls(MY_URL + \"_选集\");\n            addItemBefore(MY_URL + \"footer\", cp);\n            return \"hiker://empty\"\n        }, tabs, lazy, id),\n        col_type: 'flex_button',\n        extra: {\n            id: MY_URL + \"_线路\" + id\n        }\n    });\n})\n\nif (排序 == '#FF0000\">倒序') {\n    list.reverse()\n}\nlist.forEach((data, id) => {\n    d.push({\n        title: data.title,\n        url: data.url+ lazy,\n        col_type: list.length > 3 ? 'text_4' : 'text_2',\n        extra: {\n            cls: MY_URL + \"_选集\",\n            id: data.url\n        }\n    });\n})\n\n\nd.push({\n    col_type: \"big_blank_block\",\n    extra: {\n        id: MY_URL + \"footer\"\n    }\n});"},{"col_type":"movie_3","name":"选集","path":"details","rule":"surl = MY_URL\nvar d=[]\npic = details.img || \"https://p1.ssl.qhimgs1.com/sdr/400__/t018d6e64991221597b.jpg\";\npic = pic && pic.indexOf(\"@Referer=\") == -1 ? pic + \"@Referer=\" : pic;\n\nd.push({\n    title: details.detail1 || \"\",\n    desc: details.detail2 || \"\",\n    pic_url: details.img,\n    url: details.detailurl || (/^http/.test(MY_URL) ? MY_URL + '#noRecordHistory##noHistory#' : details.img),\n    col_type: 'movie_1_vertical_pic_blur',\n    extra: {\n        gradient: true\n    }\n})\nvar sname = MY_RULE.title;\nvar stype = \"影视\"\n\nvar name = getPageTitle()\nvar desc = details.desc\n\nfunction setDesc(d, desc, num) {\n    //log(desc)\n    if (desc == undefined) {\n        return;\n    }\n    desc = desc.constructor == Array ? desc.join('<br>') : desc;\n    if (desc.replace(/(<br>|\\s+|<\\/?p>|&nbsp;)/g, '').length == 0) {\n        return;\n    }\n    const mark = 'desc';\n    num = typeof(num) == 'undefined' ? 100 : num\n    desc = desc.startsWith('　　') ? desc : '　　' + desc;\n    desc = desc.replace(/'/g, \"&#39;\");\n    desc = desc.replace(/\\r\\n/g, \"<br>\");\n    desc = desc.replace(/\\r/g, \"<br>\");\n    desc = desc.replace(/\\n/g, \"<br>\");\n\n    function substr(str, maxLength) {\n        let len = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (str.charCodeAt(i) > 255) {\n                len += 2;\n            } else {\n                len++;\n            }\n            if (len > maxLength) {\n                return str.slice(0, i) + '...';\n            }\n        }\n        return str;\n    }\n    let sdesc = substr(desc, num);\n    var colors = {\n        show: \"black\",\n        hide: \"grey\"\n    }\n    var lazy = $(`#noLoading#`).lazyRule((dc, sdc, m, cs) => {\n        var show = storage0.getItem(m, '0');\n        var title = findItem('desc').title;\n        var re = /(<\\/small><br>.*?>).+/g;\n        var exp = '展开:';\n        var ret = '收起:';\n        if (show == '1') {\n            updateItem('desc', {\n                title: title\n                    .replace(ret, exp)\n                    .replace(re, '$1' + sdc + '</small>')\n                    .replace(/(<\\/small><br>\\<font color=\").*?(\">)/, '$1' + cs.hide + '$2')\n            })\n            storage0.setItem(m, '0');\n        } else {\n            updateItem('desc', {\n                title: title\n                    .replace(exp, ret)\n                    .replace(re, '$1' + dc + '</small>')\n                    .replace(/(<\\/small><br>\\<font color=\").*?(\">)/, '$1' + cs.show + '$2')\n            })\n            storage0.setItem(m, '1');\n        }\n        return `hiker://empty`\n    }, desc, sdesc, mark, colors)\n    var sc = storage0.getItem(mark, '0') == '0' ? '展开:' : '收起:';\n    var dc = storage0.getItem(mark, '0') == '0' ? sdesc : desc;\n    var cs = storage0.getItem(mark, '0') == '0' ? colors.hide : colors.show;\n    d.push({\n        title: '' + '<b><font color=\"#098AC1\">∷剧情简介\t</font></b>' + \"<small><a style='text-decoration: none;' href='\" + lazy + \"'>\" + sc + '</a></small><br><font color=\"' + cs + '\">' + `${dc}` + '</small>',\n        col_type: 'rich_text',\n        extra: {\n            id: 'desc',\n            lineSpacing: 6,\n            textSize: 15,\n            lineVisible: true,\n        }\n    })\n}\n\nsetDesc(d, details.desc)\n\n\nlineid = parseInt(getMyVar(\"SrcJu_\" + surl + \"_line\", \"0\"));\npageid = parseInt(getMyVar(\"SrcJu_\" + surl + \"_page\", \"0\"));\n\nlet 线路s = [\"线路\"];\nlet 列表s = [\n    []\n];\ntry {\n    线路s = details.line ? details.line : [\"线路\"];\n    列表s = details.line ? details.list : [details.list];\n    if (线路s.length != 列表s.length) {\n        log('√' + sname + '>源接口返回的线路数' + 线路s.length + '和列表数' + 列表s.length + '不相等');\n    }\n} catch (e) {\n    log('√' + sname + \">线路或列表返回数据有误>\" + e.message);\n}\nif (details.listparse) { //选集列表需要动态解析获取\n    let 线路选集 = details.listparse(lineid, 线路s[lineid]) || [];\n    if (线路选集.length > 0) {\n        列表s[lineid] = 线路选集;\n    }\n}\nif (details.page && details.pageparse) { //网站分页显示列表的，需要动态解析获取\n    try {\n        if ((detailsmark && pageid != details.pageid) || (!detailsmark && pageid > 0)) {\n            let 分页s = details.page;\n            if (pageid > 分页s.length) {\n                pageid = 0;\n            }\n            let 分页选集 = details.pageparse(分页s[pageid].url);\n            if ($.type(分页选集) == \"array\") {\n                列表s[lineid] = 分页选集;\n                details.list = details.line ? 列表s : 分页选集;\n            }\n        }\n    } catch (e) {\n        log('√' + sname + '分页选集处理失败>' + e.message);\n    }\n}\n\nif (lineid > 列表s.length - 1) {\n    toast('选择的线路无选集，将显示第1线路');\n    lineid = 0;\n}\n\nlet 列表 = 列表s[lineid] || [];\nif (列表.length > 0) {\n    function checkAndReverseArray(arr) {\n        const numbers = [];\n        arr.slice(0, 50).forEach(it => {\n            const digits = it.title.match(/\\d+/);\n            if (digits) {\n                numbers.push(parseInt(digits[0]));\n            }\n        })\n\n        if (numbers.length < 3) {\n            return arr;\n        }\n        let increasingCount = 0;\n        let decreasingCount = 0;\n        for (let i = 1; i < numbers.length; i++) {\n            if (numbers[i] > numbers[i - 1]) {\n                increasingCount++;\n            } else if (numbers[i] < numbers[i - 1]) {\n                decreasingCount++;\n            }\n        }\n        if (increasingCount > decreasingCount) {\n            return arr;\n        } else {\n            return arr.reverse();\n        }\n    }\n    try {\n        列表 = checkAndReverseArray(列表);\n    } catch (e) {\n        //log('√强制修正选集顺序失败>'+e.message)\n    }\n}\nif (getMyVar(sname + 'sort') == '1') {\n    列表.reverse();\n}\n\nlet line_col_type = getItem('SrcJuLine_col_type', 'scroll_button');\nlet addmoreitems = 0;\nif (getItem('extenditems', '1') == \"1\" && details.moreitems && $.type(details.moreitems) == 'array') {\n    let moreitems = details.moreitems;\n    if (moreitems.length > 0) {\n        moreitems.forEach(item => {\n            if (item.url != surl) {\n                \n                item.extra = item.extra || {};\n                item.extra['back'] = 1;\n                item.extra['cls'] = \"Juloadlist extendlist\";\n                d.push(item);\n                addmoreitems = 1;\n            }\n        })\n    }\n}\nif (line_col_type == 'scroll_button' && addmoreitems == 0) {\n    for (let i = 0; i < 10; i++) {\n        d.push({\n            col_type: \"blank_block\"\n        })\n    }\n}\n\n\nd.push({\n    title: getMyVar(sname + 'sort') == '1' ? `““””<b><span style=\"color: #66CCEE\">排序⇅</span></b>` : `““””<b><span style=\"color: #55AA44\">排序⇅</span></b>`,\n    url: $(\"#noLoading#\").lazyRule((sname) => {\n        let 列表 = findItemsByCls('playlist') || [];\n        if (列表.length == 0) {\n            return 'toast://未获取到列表'\n        }\n        deleteItemByCls('playlist');\n        if (getMyVar(sname + 'sort') == '1') {\n            putMyVar(sname + 'sort', '0');\n            updateItem('listsort', {\n                title: `““””<b><span style=\"color: #55AA44\">排序⇅</span></b>`\n            });\n        } else {\n            putMyVar(sname + 'sort', '1')\n            updateItem('listsort', {\n                title: `““””<b><span style=\"color: #66CCEE\">排序⇅</span></b>`\n            });\n        };\n        列表.reverse();\n        列表.forEach(item => {\n            item.col_type = item.type;\n        })\n\n        addItemBefore(getMyVar('二级加载扩展列表') ? \"extendlist\" : getMyVar('换源变更列表id') ? \"Julistloading2\" : \"Julistloading\", 列表); //排序和样式动态处理插入列表时查找id\n        return 'toast://切换排序成功'\n    }, sname),\n    col_type: line_col_type,\n    extra: {\n        id: \"listsort\",\n        cls: \"Juloadlist\"\n    }\n})\nlet reviseLiTitle = getItem('reviseLiTitle', '0');\nd.push({\n    title: `““””<b><span style=\"color: #f47983\">样式<small>🎨</small></span></b>`,\n    url: $([\"text_1\", \"text_2\", \"text_3\", \"text_4\", \"flex_button\", \"movie_2\", \"avatar\", \"分页设置\"], 2, \"选集列表样式\").select(() => {\n        if (input == \"分页设置\") {\n            return $([\"开启分页\", \"关闭分页\", \"每页数量\", \"分页阀值\"], 2).select(() => {\n                let partpage = storage0.getItem('partpage') || {};\n                if (input == \"开启分页\") {\n                    partpage.ispage = 1;\n                    storage0.setItem('partpage', partpage);\n                } else if (input == \"关闭分页\") {\n                    partpage.ispage = 0;\n                    storage0.setItem('partpage', partpage);\n                } else if (input == \"每页数量\") {\n                    return $(partpage.pagenum || \"40\", \"每页选集数量\").input((partpage) => {\n                        partpage.pagenum = parseInt(input);\n                        storage0.setItem('partpage', partpage);\n                        refreshPage(false);\n                        return 'hiker://empty'\n                    }, partpage)\n                } else if (input == \"分页阀值\") {\n                    return $(partpage.partnum || \"100\", \"选集数量超过多少才分页\").input((partpage) => {\n                        partpage.partnum = parseInt(input);\n                        storage0.setItem('partpage', partpage);\n                        refreshPage(false);\n                        return 'hiker://empty'\n                    }, partpage)\n                }\n                refreshPage(false);\n                return 'hiker://empty'\n            })\n        } else {\n            let 列表 = findItemsByCls('playlist') || [];\n            if (列表.length == 0) {\n                return 'toast://未获取到列表'\n            }\n            deleteItemByCls('playlist');\n            let list_col_type = input;\n            列表.forEach(item => {\n                item.col_type = list_col_type.replace(\"_left\", \"\");\n                if (list_col_type.indexOf(\"_left\") > -1) {\n                    item.extra.textAlign = 'left';\n                } else {\n                    delete item.extra.textAlign;\n                }\n            })\n            addItemBefore(getMyVar('二级加载扩展列表') ? \"extendlist\" : getMyVar('换源变更列表id') ? \"Julistloading2\" : \"Julistloading\", 列表);\n            setItem('SrcJuList_col_type', input);\n            return 'hiker://empty'\n        }\n    }),\n    col_type: line_col_type,\n    extra: {\n        cls: \"Juloadlist\",\n        longClick: [{\n            title: \"修正选集标题：\" + (reviseLiTitle == \"1\" ? \"是\" : \"否\"),\n            js: $.toString(() => {\n                let sm;\n                if (getItem('reviseLiTitle', '0') == \"1\") {\n                    clearItem('reviseLiTitle');\n                    sm = \"取消修正选集标题名称\";\n                } else {\n                    setItem('reviseLiTitle', '1');\n                    sm = \"统一修正选集标题名称\";\n                }\n                refreshPage(false);\n                return \"toast://\" + sm;\n            })\n        }, {\n            title: \"显示扩展项：\" + (getItem('extenditems', '1') == \"1\" ? \"是\" : \"否\"),\n            js: $.toString(() => {\n                let sm;\n                if (getItem('extenditems', '1') == \"1\") {\n                    setItem('extenditems', '0');\n                    sm = \"取消显示二级扩展项\";\n                } else {\n                    clearItem('extenditems');\n                    sm = \"显示二级扩展项\";\n                }\n                refreshPage(false);\n                return \"toast://\" + sm;\n            })\n        }, {\n            title: \"线路样式：\" + getItem('SrcJuLine_col_type', 'scroll_button'),\n            js: $.toString(() => {\n                let sm;\n                if (getItem('SrcJuLine_col_type', 'scroll_button') == \"flex_button\") {\n                    clearItem('SrcJuLine_col_type');\n                    sm = \"线路样式已切换为scroll_button\";\n                } else {\n                    setItem('SrcJuLine_col_type', 'flex_button');\n                    sm = \"线路样式已切换为flex_button\";\n                }\n                refreshPage(false);\n                return \"toast://\" + sm;\n            })\n        }]\n    }\n})\n\nif (线路s.length > 0 && 线路s[0] != \"线路\") {\n    线路s.forEach((it, i) => {\n        d.push({\n            title: lineid == i ? `““””<b><span style=\"color: #04B45F\">` + it + `</span></b>` : it,\n            url: $(\"#noLoading#\").lazyRule((lineurl, nowid, newid) => {\n                if (nowid != newid) {\n                    putMyVar(lineurl, newid);\n                    refreshPage(false);\n                }\n                return 'hiker://empty'\n            }, \"SrcJu_\" + surl + \"_line\", lineid, i),\n            col_type: line_col_type,\n            extra: {\n                cls: \"Juloadlist\"\n            }\n        })\n    })\n}\n//分页定义\nlet partpage = storage0.getItem('partpage') || {};\nif (details.page && details.pageparse) { //原网站有分页，不执行自定义分页\n    let 分页s = details.page\n    let 分页链接 = [];\n    let 分页名 = [];\n    分页s.forEach((it, i) => {\n        分页链接.push($(\"#noLoading#\").lazyRule((pageurl, nowid, newid) => {\n            if (nowid != newid) {\n                putMyVar(pageurl, newid);\n                refreshPage(false);\n            }\n            return 'hiker://empty'\n        }, \"SrcJu_\" + surl + \"_page\", pageid, i))\n        分页名.push(pageid == i ? '““””<span style=\"color: #87CEFA\">' + it.title : it.title)\n    })\n    if (分页名.length > 0) {\n        d.push({\n            col_type: \"blank_block\",\n            extra: {\n                cls: \"Juloadlist\"\n            }\n        });\n        d.push({\n            title: pageid == 0 ? \"↪️尾页\" : \"⏮️上页\",\n            url: pageid == 0 ? 分页链接[分页名.length - 1] : 分页链接[pageid - 1],\n            col_type: 'text_4',\n            extra: {\n                cls: \"Juloadlist\"\n            }\n        })\n        d.push({\n            title: 分页名[pageid],\n            url: $(分页名, 2).select((分页名, 分页链接) => {\n                return 分页链接[分页名.indexOf(input)];\n            }, 分页名, 分页链接),\n            col_type: 'text_2',\n            extra: {\n                cls: \"Juloadlist\"\n            }\n        })\n        d.push({\n            title: pageid == 分页名.length - 1 ? \"首页↩️\" : \"下页⏭️\",\n            url: pageid == 分页名.length - 1 ? 分页链接[0] : 分页链接[pageid + 1],\n            col_type: 'text_4',\n            extra: {\n                cls: \"Juloadlist\"\n            }\n        })\n    }\n} else if (partpage.ispage) { //启用分页\n    let 每页数量 = partpage.pagenum || 40; // 分页的每页数量       \n    let 翻页阀值 = partpage.partnum || 100; // 分页的翻页阀值，超过多少才显示翻页\n\n    if (列表.length > 翻页阀值) {\n        let 最大页数 = Math.ceil(列表.length / 每页数量);\n        let 分页页码 = pageid + 1; //当前页数\n        if (分页页码 > 最大页数) { //防止切换线路导致页数数组越界\n            分页页码 = 最大页数;\n        }\n        let 分页链接 = [];\n        let 分页名 = [];\n\n        function getNewArray(array, subGroupLength) {\n            let index = 0;\n            let newArray = [];\n            while (index < array.length) {\n                newArray.push(array.slice(index, index += subGroupLength));\n            }\n            return newArray;\n        }\n        let 分页s = getNewArray(列表, 每页数量); //按每页数据切割成小数组\n\n        分页s.forEach((it, i) => {\n            分页链接.push($(\"#noLoading#\").lazyRule((pageurl, nowid, newid) => {\n                if (nowid != newid) {\n                    putMyVar(pageurl, newid);\n                    refreshPage(false);\n                }\n                return 'hiker://empty'\n            }, \"SrcJu_\" + surl + \"_page\", pageid, i))\n            let start = i * 每页数量 + 1;\n            let end = i * 每页数量 + it.length;\n            let title = start + ' - ' + end;\n            分页名.push(pageid == i ? '““””<span style=\"color: #87CEFA\">' + title : title)\n        })\n        d.push({\n            col_type: \"blank_block\",\n            extra: {\n                cls: \"Juloadlist\"\n            }\n        });\n        d.push({\n            title: 分页页码 == 1 ? \"↪️尾页\" : \"⏮️上页\",\n            url: 分页页码 == 1 ? 分页链接[分页名.length - 1] : 分页链接[pageid - 1],\n            col_type: 'text_4',\n            extra: {\n                cls: \"Juloadlist\"\n            }\n        })\n        d.push({\n            title: 分页名[pageid],\n            url: $(分页名, 2).select((分页名, 分页链接) => {\n                return 分页链接[分页名.indexOf(input)];\n            }, 分页名, 分页链接),\n            col_type: 'text_2',\n            extra: {\n                cls: \"Juloadlist\"\n            }\n        })\n        d.push({\n            title: 分页页码 == 分页名.length ? \"首页↩️\" : \"下页⏭️\",\n            url: 分页页码 == 分页名.length ? 分页链接[0] : 分页链接[pageid + 1],\n            col_type: 'text_4',\n            extra: {\n                cls: \"Juloadlist\"\n            }\n        })\n        列表 = 分页s[pageid]; //取当前分页的选集列表\n    }\n}\n\nlet list_col_type = getItem('SrcJuList_col_type', 'text_2'); //列表样式\nfor (let i = 0; i < 列表.length; i++) {\n    let extra = Object.assign({}, details[\"extra\"] || {}); //二级返回数据中的extra设为默认\n    try {\n        extra = Object.assign(extra, 列表[i].extra || {}); //优先用选集的extra\n    } catch (e) {}\n\n    extra.id = name + \"_选集_\" + (pageid ? pageid + \"_\" : \"\") + i;\n    extra.cls = \"Juloadlist playlist\";\n    if (stype == \"听书\" || stype == \"影视\" || stype == \"音乐\") {\n        extra.jsLoadingInject = true;\n        if (!extra.blockRules) {\n            extra.blockRules = ['.m4a', '.mp3', '.gif', '.jpeg', '.jpg', '.ico', '.png', 'hm.baidu.com', '/ads/*.js', 'cnzz.com', '51.la'];\n        }\n    }\n\n    if (list_col_type.indexOf(\"_left\") > -1) {\n        extra.textAlign = 'left';\n    }\n    if (stype == \"小说\" || details[\"rule\"] || details[\"novel\"] || 列表[i].rule) {\n        extra.url = 列表[i].url;\n        lazy = lazy.replace(\"@lazyRule=.\", ((stype == \"小说\" || details[\"novel\"]) ? \"#readTheme##autoPage#\" : \"#noRecordHistory#\") + \"@rule=\").replace(`input.split(\"##\")[1]`, `MY_PARAMS.url || \"\"`);\n    }\n    d.push({\n        title: reviseLiTitle == \"1\" ? 列表[i].title.replace(name, '').replace(/‘|’|“|”|<[^>]+>| |-|_|第|集|话|章|\\</g, '').replace('（', '(').replace('）', ')') : 列表[i].title,\n        url: 列表[i].url + lazy,\n        desc: 列表[i].desc,\n        img: 列表[i].img,\n        col_type: 列表[i].col_type || list_col_type.replace(\"_left\", \"\"),\n        extra: extra\n    });\n\n}\n\nif (getItem('extenditems', '1') == \"1\" && details.extenditems && $.type(details.extenditems) == 'array') {\n    let extenditems = details.extenditems;\n    if (extenditems.length > 0) {\n        d.push({\n            col_type: \"blank_block\",\n            extra: {\n                cls: \"Juloadlist extendlist\",\n                id: \"extendlist\"\n            }\n        })\n        extenditems.forEach(item => {\n            if (item.url != surl) {\n               \n                item.extra = item.extra || {};\n                item.extra['back'] = 1;\n                item.extra['cls'] = \"Juloadlist extendlist\";\n                d.push(item)\n            }\n        })\n    }\n}\nd.push({\n    title: \"‘‘’’<small><font color=#f20c00>当前数据源：\" + sname + \"</font></small>\",\n    url: 'hiker://empty',\n    col_type: 'text_center_1',\n    extra: {\n        id: getMyVar('换源变更列表id') ? \"Julistloading2\" : \"Julistloading\",\n        lineVisible: false\n    }\n});\n\nsetResult(d)"}],"title":"模板·Q","author":"发粪涂墙","version":23111900,"type":"tool","url":"hiker://empty##fypage","col_type":"text_center_1","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nif (getItem(\"start\", \"\") == \"\") {\n    setItem(\"start\", \"1\")\n    confirm({\n        title: '温馨提示',\n        content: '请勿删除或改名此模板，以免依赖此模板的小程序无法使用！！\\n并特别感谢 Reborn LoyDgIk大佬的技术支持!!!',\n        confirm: '',\n        cancel: 'refreshPage()'\n    })\n}\naddListener(\"onClose\", $.toString(() => {\n    clearVar(\"template-url\")\n    clearVar(\"template-search-url\")\n    clearVar(\"template-pages-unfold\")\n}))\n\nlet d2 = [{\n    desc: \"输入分类或详情页链接测试匹配\",\n    col_type: \"input\",\n    url: \"input\",\n    title: \"测试\",\n    extra: {\n        onChange: \"putVar('template-url',input)\"\n    }\n},{\n    desc: \"输入搜索链接，**为关键字占位符\",\n    col_type: \"input\",\n    url: \"input\",\n    title: \"测试搜索\",\n    extra: {\n        titleVisible: false,\n        defaultValue: getVar(\"template-search-url\"),\n        onChange: \"putVar('template-search-url',input)\"\n    }\n}, {\n    desc: \"输入搜索关键词测试匹配\",\n    col_type: \"input\",\n    url: $.toString((ruleTitle)=>{\n            return \"hiker://search?s=\" + input +  \"&rule=\"+ ruleTitle;\n    }, MY_RULE.title),\n    title: \"测试搜索\",\n}, {\n    title: \"生成规则\",\n    col_type: \"text_center_1\",\n    url: \"input://////请输入规则名.js:\" + $.toString(() => {\n        var url = getVar('template-url', \"\");\n        if (url.length <= 0 || input.length <= 0) {\n            return \"toast://请先输入链接和规则名\"\n        }\n        var rule = {\n            \"last_chapter_rule\": \"\",\n            \"title\": input,\n            \"author\": \"\",\n            \"url\": url,\n            \"version\": 0,\n            \"col_type\": \"movie_3\",\n            \"class_name\": \"\",\n            \"class_url\": \"\",\n            \"area_name\": \"\",\n            \"area_url\": \"\",\n            \"sort_name\": \"\",\n            \"year_name\": \"\",\n            \"sort_url\": \"\",\n            \"year_url\": \"\",\n            \"find_rule\": \"js:\\nconst {\\n    autoPage\\n} = $.require(\\\"hiker://page/auto?rule=模板·Q\\\");\\nautoPage(getResCode())\",\n            \"search_url\": getVar(\"template-search-url\"),\n            \"titleColor\": \"\",\n            \"group\": \"测试\",\n            \"searchFind\": \"js:\\nconst {\\n    autoPage\\n} = $.require(\\\"hiker://page/auto?rule=模板·Q\\\");\\nautoPage(getResCode())\",\n            \"detail_col_type\": \"movie_1\",\n            \"detail_find_rule\": \"js:\\nvar lazy = $('').lazyRule(() => {\\n    try {\\n        var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\\n            var url = html.url\\n            if (html.encrypt == '1') {\\n                url = unescape(url);\\n            } else if (html.encrypt == '2') {\\n                url = unescape(base64Decode(url));\\n            }\\n            if (/m3u8|mp4/.test(url)) {\\n                return url\\n            } else {\\n                return 'video://' + input\\n            }\\n    } catch (e) {\\n        return 'video://' + input\\n    }\\n})\\n\\nconst {\\n    autoPage\\n} = $.require(\\\"hiker://page/auto?rule=模板·Q\\\");\\nautoPage(getResCode())\",\n            \"sdetail_col_type\": \"movie_1\",\n            \"sdetail_find_rule\": \"*\",\n            \"ua\": \"mobile\",\n            \"preRule\": \"if (request('hiker://home@模板·Q') == 'null') {\\n    confirm({\\n        title: '依赖检测',\\n        content: '检测到缺少模板依赖,请导入!',\\n        confirm: () => {\\n            return \\\"海阔视界首页频道规则【模板·Q】￥home_rule_url￥http://hiker.nokia.press/hikerule/rulelist.json?id=3055\\\"\\n        }\\n    })\\n}\",\n            \"pages\": \"[]\"\n        };\n        return \"海阔视界规则分享，当前分享的是：小程序￥home_rule￥\" + JSON.stringify(rule)\n    })\n},{\ntitle: '文字教程',\ncol_type: 'text_2',\nurl: 'hiker://page/detail?rule=视界论坛R',\nextra: {\n    url: 'https://haikuoshijie.cn/topic/8440#fypage#noHistory#',\n}\n},{\ntitle: '视频教程',\ncol_type: 'text_2',\nurl: \"video://https://www.bilibili.com/video/BV1dM4y1g7re?share_source=copy_web\"\n},{\ntitle: getVar('template-pages-unfold', 'false') === 'true'? '点我收缩模板列表': '点我展开模板列表',\ncol_type: 'text_center_1',\nurl: $(\"#noLoading#\").lazyRule((pageUnfold) => {\n     putVar('template-pages-unfold', pageUnfold === 'true' ? 'false' : 'true')\nrefreshPage(false)\nreturn 'toast://' + (getVar('template-pages-unfold', 'false') === 'true'? '展开成功': '收缩成功')\n}, getVar('template-pages-unfold', 'false'))\n},{\ntitle: '测试首页链接需要把页码改成fypage,如果上面的测试通过能显示图片，那么就说明是可以生成规则的，依次填入分类链接与搜索链接，第三个框留空点击生成规则，填好名字即可，详细添加分类词之类的请点击上面的两个教程链接参考！！',\ncol_type: 'rich_text'\n}]\nif(getVar('template-pages-unfold', 'false') === 'true') {\nlet d = []\nd.push({\n    title: '点击模板可查看代码：',\n    col_type: 'rich_text'\n})\nlet pageList = MY_RULE.pageList.filter(page => page.name != '字符串处理工具'\n&& page.name != '#Mapping'\n&& page.name != '#auto')\nfor (let page of pageList) {\n    d.push({\n        title: page.name,\n        col_type: 'text_2',\n        url: $().rule((page) => {\n            const {\n                htmlEscape\n            } = $.require(\"hiker://page/stringtool\");\n            let d = []\n            d.push({\n                title: htmlEscape(page.rule),\n                col_type: 'rich_text'\n            })\n            setResult(d)\n        }, page)\n    })\n}\nd2.push.apply(d2, d)\n}\nsetResult(d2)","searchFind":"js:\nvar d = []\nvar html = getResCode()\neval(JSON.parse(request('hiker://page/yzm?rule=模板·Q')).rule)\nconst {\n    autoPage\n} = $.require(\"hiker://page/auto?rule=模板·Q\");\nautoPage(html)","search_url":"hiker://empty#**#fypage.js: let surl =  getVar(\"template-search-url\")；；let insplits=input.split(\"#\")；；let url = surl.replace(base64Decode(\"Kio=\"), insplits[1]).replace(base64Decode(\"ZnlwYWdl\"), insplits[2])；；url；；","titleColor":"","group":"开发中心","detail_col_type":"movie_3","detail_find_rule":"js:\nvar lazy = '';\nconst {\n    autoPage\n} = $.require(\"hiker://page/auto?rule=模板·Q\");\nautoPage(getResCode())","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"auto","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"一级stui-vodlist\",\"path\":\"stui-vodlist\",\"rule\":\"var d = [];\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), '.stui-vodlist&&li');\\nfor (var j in list) {\\n    d.push({\\n        title: pdfh(list[j], 'a&&title'),\\n        desc: pdfh(list[j], '.pic-text&&Text'),\\n        img: pd(list[j], '.lazyload||a&&data-original')+'@Referer=',\\n        url: pd(list[j], 'a&&href') + '#immersiveTheme#'\\n    });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"二级.b\",\"path\":\".b\",\"rule\":\"var d = [];\\nvar html = getResCode();\\nif (html.indexOf('检测中') != -1) {\\n    html = request(MY_URL + '?btwaf' + html.match(/btwaf(.*?)\\\\\\\"/)[1], {});\\n}\\nd.push({\\n    title: pdfh(html, '.stui-content__detail--h1&&Text')\\n        .replace('地区', '\\\\n地区')\\n        .replace('主演', '\\\\n主演'),\\n    desc: pdfh(html, '.desc||.detail-content&&Text'),\\n    pic_url: pd(html, '.lazyload&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nvar 线路 = 'body&&.b'\\nvar 选集 = 线路\\nvar 线路名 = 'h3&&Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"搜索stui-vodlist__media\",\"path\":\"stui-vodlist__media\",\"rule\":\"var d = [];\\nvar list = pdfa(getResCode(), '.stui-vodlist__media&&li');\\nlog('搜索结果')\\nlog(list)\\nif (list.length == 0) throw \\\"搜索为空，可能匹配错误\\\"\\nfor (var j in list) {\\n    d.push({\\n        title: pdfh(list[j], 'a&&title'),\\n        desc: pdfh(list[j], '.pic-text&&Text'),\\n        img: pd(list[j], 'a&&data-original'),\\n        content: pdfh(list[j], '.detail--h3&&Text'),\\n        url: pd(list[j], 'a&&href')+'#immersiveTheme#'\\n    });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"一级myui-vodlist\",\"path\":\"myui-vodlist\",\"rule\":\"var d = []\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), '.myui-vodlist&&li')\\nfor (var j in list) {\\n    d.push({\\n        title: pdfh(list[j], 'h4&&Text'),\\n        desc: pdfh(list[j], '.pic-tag||.pic-text&&Text'),\\n        img: pd(list[j], '.lazyload&&data-original'),\\n        url: pd(list[j], 'a&&href').replace('vodplay','voddetail') + '#immersiveTheme#'\\n    })\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"二级nav-tabs\",\"path\":\"nav-tabs\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\nd.push({\\n    title: pdfh(html, '.data&&Text')\\n        .replace('地区：', '  ')\\n        .replace('年份：', '  ') + '\\\\n' +\\n        pdfh(html, '.data,1&&Text')\\n        .substring(0, 15) + '\\\\n' +\\n        pdfh(html, '.data,2&&Text'),\\n    desc: pdfh(html, '.data,3&&Text'),\\n    img: pd(html, '.lazyload&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nvar 线路 = '.nav-tabs&&a'\\nvar 选集 = '.tab-content&&.myui-content__list||.stui-content__playlist'\\nvar 线路名 = 'Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"搜索myui-vodlist__media\",\"path\":\"myui-vodlist__media\",\"rule\":\"var d = [];\\nvar list = pdfa(getResCode(), '#searchList&&li');\\nif (list.length == 0) throw \\\"搜索为空，可能匹配错误\\\"\\nfor (var j in list) {\\n    d.push({\\n        title: pdfh(list[j], 'a&&title'),\\n        desc: pdfh(list[j], '.pic-text&&Text'),\\n        pic_url: pd(list[j], 'a&&data-original'),\\n        content: pdfh(list[j], '.detail--h4&&Text'),\\n        url: pd(list[j], 'a&&href')+'#immersiveTheme#'\\n    })\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"一级vodlist\",\"path\":\"vodlist\",\"rule\":\"var d = [];\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), '.vodlist&&li');\\nfor (var j in list) {\\n  d.push({\\n       title: pdfh(list[j], 'a&&title'),\\n       desc: pdfh(list[j], 'a&&Text'),\\n       pic_url: pd(list[j], '.lazyload&&data-original')+'@Referer=',\\n       url: pd(list[j],'a&&href') + '#immersiveTheme#'\\n  });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"二级mo-play-load\",\"path\":\"mo-play-load\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\nd.push({\\n    title: pdfh(html, '.video-info-items,2&&Text')\\n  .replace('分类|', '')\\n  .replace('地区：', '')\\n  .replace('年份：', ' ').substring(0, 18) + '\\\\n' + '\\\\n' + \\n  pdfh(html, '.video-info-items,1&&Text').substring(0, 18),\\n    pic_url: pd(html, '.lazyload&&data-src'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\n\\nvar 线路 = 'body&&.module-tab-content&&.module-tab-item'\\nvar 选集 = 'body&&.sort-item'\\nvar 线路名 = 'span&&Text'\\nvar 选集列表 = 'body&&a'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"二级nav-tabs1\",\"path\":\"nav-tabs1\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\nd.push({\\n    title: pdfh(html, 'p,1&&Text')\\n        .replace('类型：', '')\\n        .replace('地区：', ' ')\\n        .replace('年份：', '')\\n        .replace('语言：', '') +\\n        '\\\\n\\\\n' + pdfh(html, 'p,4&&Text')\\n        .substring(0, 30),\\n    desc: pdfh(html, 'p,2&&Text'),\\n    pic_url: pd(html, '.lazyload&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\n\\nvar 线路 = '.nav-tabs&&a'\\nvar 选集 = 'body&&.stui-content__playlist'\\nvar 线路名 = 'a&&Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"flex_button\",\"name\":\"定位二级\",\"path\":\"erji\",\"rule\":\"if(typeof(简介)!=\\\"undefined\\\"){\\nfunction setDesc(d, desc, num) {\\n    //log(desc)\\n    if (desc == undefined) {\\n        return;\\n    }\\n    desc = desc.constructor == Array ? desc.join('<br>') : desc;\\n    if (desc.replace(/(<br>|\\\\s+|<\\\\/?p>|&nbsp;)/g, '').length == 0) {\\n        return;\\n    }\\n    const mark = 'desc';\\n    num = typeof(num) == 'undefined' ? 100 : num\\n    desc = desc.startsWith('　　') ? desc : '　　' + desc;\\n    desc = desc.replace(/'/g, \\\"&#39;\\\");\\n    desc = desc.replace(/\\\\r\\\\n/g, \\\"<br>\\\");\\n    desc = desc.replace(/\\\\r/g, \\\"<br>\\\");\\n    desc = desc.replace(/\\\\n/g, \\\"<br>\\\");\\n\\n    function substr(str, maxLength) {\\n        let len = 0;\\n        for (let i = 0; i < str.length; i++) {\\n            if (str.charCodeAt(i) > 255) {\\n                len += 2;\\n            } else {\\n                len++;\\n            }\\n            if (len > maxLength) {\\n                return str.slice(0, i) + '...';\\n            }\\n        }\\n        return str;\\n    }\\n    let sdesc = substr(desc, num);\\n    var colors = {\\n        show: \\\"black\\\",\\n        hide: \\\"grey\\\"\\n    }\\n    var lazy = $(`#noLoading#`).lazyRule((dc, sdc, m, cs) => {\\n        var show = storage0.getItem(m, '0');\\n        var title = findItem('desc').title;\\n        var re = /(<\\\\/small><br>.*?>).+/g;\\n        var exp = '展开:';\\n        var ret = '收起:';\\n        if (show == '1') {\\n            updateItem('desc', {\\n                title: title\\n                    .replace(ret, exp)\\n                    .replace(re, '$1' + sdc + '</small>')\\n                    .replace(/(<\\\\/small><br>\\\\<font color=\\\").*?(\\\">)/, '$1' + cs.hide + '$2')\\n            })\\n            storage0.setItem(m, '0');\\n        } else {\\n            updateItem('desc', {\\n                title: title\\n                    .replace(exp, ret)\\n                    .replace(re, '$1' + dc + '</small>')\\n                    .replace(/(<\\\\/small><br>\\\\<font color=\\\").*?(\\\">)/, '$1' + cs.show + '$2')\\n            })\\n            storage0.setItem(m, '1');\\n        }\\n        return `hiker://empty`\\n    }, desc, sdesc, mark, colors)\\n    var sc = storage0.getItem(mark, '0') == '0' ? '展开:' : '收起:';\\n    var dc = storage0.getItem(mark, '0') == '0' ? sdesc : desc;\\n    var cs = storage0.getItem(mark, '0') == '0' ? colors.hide : colors.show;\\n    d.push({\\n        title: '' + '<b><font color=\\\"#098AC1\\\">∷剧情简介\\t</font></b>' + \\\"<small><a style='text-decoration: none;' href='\\\" + lazy + \\\"'>\\\" + sc + '</a></small><br><font color=\\\"' + cs + '\\\">' + `${dc}` + '</small>',\\n        col_type: 'rich_text',\\n        extra: {\\n            id: 'desc',\\n            lineSpacing: 6,\\n            textSize: 15,\\n            lineVisible: true,\\n        }\\n    })\\n}\\n\\nsetDesc(d, 简介)\\n\\n}\\n\\n\\nd.push({\\n    col_type: \\\"blank_block\\\"\\n})\\n\\n\\nif(typeof(云盘)!=\\\"undefined\\\"){\\nvar name = getPageTitle()\\nd.push({\\n    title: \\\"云盘君\\\",\\n    url: \\\"hiker://page/sou#noRecordHistory##noHistory#?rule=云盘君.简\\\",\\n    img: \\\"http://123.56.105.145/tubiao/ke/25.png\\\",\\n    col_type: \\\"icon_2_round\\\",\\n    extra: {\\n        searchTerms: name\\n    }\\n});\\nvar qlist = JSON.parse(fetch(\\\"hiker://files/data/聚阅√/quark.txt\\\") || {});\\nif (qlist[name]) {\\n    var click = [{\\n        title: \\\"更换\\\",\\n        js: $.toString((name) => {\\n            return $(\\\"{{clipboard}}\\\").input((name) => {\\n                var qlist = JSON.parse(fetch(\\\"hiker://files/data/聚阅√/quark.txt\\\") || {});\\n\\n                qlist[name] = input\\n\\n                writeFile(\\\"hiker://files/data/聚阅√/quark.txt\\\", JSON.stringify(qlist));\\n                refreshPage()\\n\\n                return \\\"toast://已保存\\\"\\n\\n            }, name)\\n        }, name)\\n    }]\\n    try {\\n        var qext = JSON.parse(qlist[name])\\n        qext['longClick'] = click\\n        qext['pageTitle'] = MY_PARAMS.name;\\n        var qurl = \\\"hiker://page/quarkList#noRecordHistory#?rule=Quark.简&page=fypage\\\"\\n    } catch (e) {\\n        qext = {\\n            longClick: click,\\n            pageTitle: name\\n        };\\n        qurl = \\\"hiker://page/quarkList#noRecordHistory#?rule=Quark.简&realurl=\\\" + encodeURIComponent(qlist[MY_PARAMS.name]) + \\\"&sharePwd=\\\";\\n\\n    }\\n    d.push({\\n        title: '夸克网盘',\\n        url: qurl,\\n        extra: qext,\\n        img: \\\"http://pic.7273.com/upload/2022-6/20226131744447587.png\\\",\\n        col_type: \\\"icon_2_round\\\"\\n    })\\n} else {\\n    d.push({\\n        title: \\\"添加资源\\\",\\n        col_type: \\\"icon_2_round\\\",\\n        img: \\\"http://123.56.105.145/tubiao/system/124.png\\\",\\n        url: $(\\\"{{clipboard}}\\\").input((name) => {\\n            var qlist = JSON.parse(fetch(\\\"hiker://files/data/聚阅√/quark.txt\\\") || {});\\n\\n            qlist[name] = input\\n\\n            writeFile(\\\"hiker://files/data/聚阅√/quark.txt\\\", JSON.stringify(qlist));\\n            refreshPage()\\n\\n            return \\\"toast://已保存\\\"\\n\\n        },name),\\n\\n    })\\n}\\nd.push({\\n    col_type: \\\"blank_block\\\"\\n})\\n}\\n\\n\\nvar tabs = pdfa(html, 线路).map(data => {\\n    data = pdfh(data, 线路名)\\n    if (typeof(排除) != 'undefined' && 排除 != '') {\\n        data = data.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n    }\\n    return data;\\n});\\n\\nvar lists = pdfa(html, 选集).map(data => pdfa(data, 选集列表))\\n\\naddListener(\\\"onClose\\\", $.toString(() => {\\n    clearMyVar(\\\"lists\\\");\\n}));\\nstorage0.putMyVar(\\\"lists\\\", lists);\\nvar list = lists[getMyVar(MY_URL, '0')];\\nvar 排序 = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\nvar 提示 = 排序 == '#FF0000\\\">倒序' ? '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\nvar 排序名 = '““””<b><span style=\\\"color:排序</span></b>';\\n\\nd.push({\\n    title: '““””<b><span style=\\\"color: ' + 排序 + '</span></b>',\\n    url: $(\\\"#noLoading#\\\").lazyRule((tabs, 排序名, lazy, d, TV推送) => {\\n        var lists = storage0.getMyVar(\\\"lists\\\");\\n        var 章节 = lists[getMyVar(MY_URL, '0')];\\n        var 排序 = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\n        var 提示 = 排序 == '#FF0000\\\">倒序' ? '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\n        updateItem({\\n            extra: {\\n                id: MY_URL + \\\"_排序\\\",\\n                longClick: [{\\n                    title: \\\"TVbox推送\\\",\\n                    js: TV推送(tabs, lists, d)\\n                }]\\n            },\\n            title: 排序名.replace('排序', 提示)\\n        });\\n        if (排序 == '#1aad19\\\">正序') {\\n            章节.reverse();\\n        }\\n        let cp = 章节.map((data, ssid) => ({\\n            title: pdfh(data, 'a&&Text'),\\n            url: pd(data, 'a&&href') + lazy,\\n            col_type: 章节.length > 3 ? 'text_4' : 'text_2',\\n            extra: {\\n                cls: MY_URL + \\\"_选集\\\",\\n                id: pd(data, 'a&&href')\\n            }\\n        }));\\n        deleteItemByCls(MY_URL + \\\"_选集\\\");\\n        addItemBefore(MY_URL + \\\"footer\\\", cp);\\n        putMyVar(MY_URL + \\\"章节排序\\\", 提示);\\n        return \\\"hiker://empty\\\";\\n    }, tabs, 排序名, lazy, d[0], TV推送),\\n    col_type: 'flex_button',\\n    extra: {\\n        id: MY_URL + \\\"_排序\\\",\\n        longClick: [{\\n            title: \\\"TVbox推送\\\",\\n            js: TV推送(tabs, lists, d[0])\\n        }]\\n    }\\n});\\n\\nfunction TV推送(tabs, lists, d) {\\n    return $.toString((tabs, lists, d) => {\\n        var 推送 = {\\n            \\\"name\\\": getPageTitle(),\\n            \\\"content\\\": d.desc,\\n            \\\"pic\\\": d.img || d.pic_url,\\n            \\\"from\\\": tabs.join('$$$'),\\n            \\\"url\\\": storage0.getMyVar(\\\"lists\\\").map(li => li.map(li1 => pdfh(li1, 'Text') + '$' + pd(li1, 'a&&href')).join('#')).join('$$$')\\n        };\\n        return \\\"hiker://page/push?rule=XYQ推送&pushurl=\\\" + encodeURIComponent(JSON.stringify(推送));\\n    }, tabs, lists, d);\\n}\\n\\ntabs.forEach((data, id) => {\\n    d.push({\\n        title: getMyVar(MY_URL, '0') == id ? `““${data}””` : data,\\n        url: $(\\\"#noLoading#\\\").lazyRule((线路, lazy, id) => {\\n            var lists = storage0.getMyVar(\\\"lists\\\");\\n            var 排序 = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\n            var 提示 = 排序 == '#FF0000\\\">倒序' ? '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\n            线路.forEach((data, xlid) => {\\n                updateItem({\\n                    title: id == xlid ? `““${data}””` : data,\\n                    extra: {\\n                        id: MY_URL + \\\"_线路\\\" + xlid\\n                    }\\n                });\\n            })\\n            putMyVar(MY_URL, id)\\n            var 章节 = lists[getMyVar(MY_URL, '0')];\\n            if (排序 == '#FF0000\\\">倒序') {\\n                章节.reverse()\\n            }\\n            let cp = 章节.map((data, ssid) => {\\n                return {\\n                    title: pdfh(data, 'a&&Text'),\\n                    url: pd(data, 'a&&href') + lazy,\\n                    col_type: 章节.length > 3 ? 'text_4' : 'text_2',\\n                    extra: {\\n                        cls: MY_URL + \\\"_选集\\\",\\n                        id: pd(data, 'a&&href')\\n                    }\\n                };\\n            });\\n            deleteItemByCls(MY_URL + \\\"_选集\\\");\\n            addItemBefore(MY_URL + \\\"footer\\\", cp);\\n            return \\\"hiker://empty\\\"\\n        }, tabs, lazy, id),\\n        col_type: 'flex_button',\\n        extra: {\\n            id: MY_URL + \\\"_线路\\\" + id\\n        }\\n    });\\n})\\n\\nif (排序 == '#FF0000\\\">倒序') {\\n    list.reverse()\\n}\\nlist.forEach((data, id) => {\\n    d.push({\\n        title: pdfh(data, 'a&&Text'),\\n        url: pd(data, 'a&&href') + lazy,\\n        col_type: list.length > 3 ? 'text_4' : 'text_2',\\n        extra: {\\n            cls: MY_URL + \\\"_选集\\\",\\n            id: pd(data, 'a&&href')\\n        }\\n    });\\n})\\n\\nsetLastChapterRule('js:' + $.toString((选集, 选集列表) => {\\n    setResult('更新至: 第' + pdfa(getResCode(), 选集).map(data => pdfa(data, 选集列表).length).sort((a, b) => b - a)[0] + \\\"集\\\");\\n}, 选集, 选集列表));\\nd.push({\\n    col_type: \\\"big_blank_block\\\",\\n    extra: {\\n        id: MY_URL + \\\"footer\\\"\\n    }\\n});\"},{\"col_type\":\"movie_3\",\"name\":\"二级play_source_tab\",\"path\":\"play_source_tab\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\nd.push({\\n    title: pdfh(html, '.remarks&&Text') +\\n        '\\\\n' + pdfh(html, '.s-top-info-detail&&a&&Text') +\\n        pdfh(html, '.s-top-info-detail&&a,1&&Text') +\\n        pdfh(html, '.s-top-info-detail&&a,2&&Text') +\\n        '\\\\n““简介：不能用就删掉吧””',\\n    desc: pdfh(html, '.desc_txt&&Text').substring(0, 20),\\n    img: pd(html, '.img-cover||.vod-detail-bj&&src'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nvar 线路 = '.play_source_tab&&a'\\nvar 选集 = 'body&&.player_list||#playlistbox||#playsx'\\nvar 线路名 = 'a&&Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"二级fed-play-item\",\"path\":\"fed-play-item\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\nd.push({\\n    title: pdfh(html, 'dd&&li,3&&Text') +\\n        '\\\\n' + pdfh(html, 'dd&&li,4&&Text')\\n        .substring(0, 15) + '\\\\n' +\\n        pdfh(html, 'dd&&li,5&&Text')\\n        .substring(0, 15),\\n    desc: pdfh(html, 'dd&&li,6&&Text').substring(0, 25),\\n    pic_url: pd(html, '.fed-lazy&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic'\\n});\\nvar 线路 = 'body&&.fed-drop-btns'\\nvar 选集 = 'body&&.fed-play-item'\\nvar 线路名 = 'a&&Text'\\nvar 选集列表 = 'body&&.fed-btns-info'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"搜索dl\",\"path\":\"dl\",\"rule\":\"var d = [];\\nvar list = pdfa(getResCode(), 'body&&dl');\\nlog('搜索结果')\\nlog(list)\\nif (list.length == 0) throw \\\"搜索为空，可能匹配错误\\\"\\nfor (var j in list) {\\n  d.push({\\n       title: pdfh(list[j], 'h1&&Text'),\\n       desc: pdfh(list[j], '.fed-list-remarks&&Text'),\\n\\t    content: pdfh(list[j], '.fed-part-esan--span&&Text'),\\n       img: pd(list[j], 'a&&data-original'),\\n       url: pd(list[j], 'a&&href')\\n  });\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"#Mapping\",\"path\":\"Mapping\",\"rule\":\"js:\\n$.exports = {\\n    \\\"home\\\": [{\\n            keys: [\\\" b \\\"],\\n            url: \\\".b\\\",\\n            //     allKey: true,\\n        },\\n        {\\n            keys: [\\\"nav-tabs\\\"],\\n            url: \\\"nav-tabs\\\",\\n        },\\n        {\\n            keys: [\\\"myui-content__list\\\"],\\n            url: \\\"myui-content__list\\\",\\n        },\\n        {\\n            keys: [\\\"nav-tabs\\\", \\\"stui-content__playlist\\\"],\\n            url: \\\"nav-tabs1\\\",\\n            allKey: true,\\n        },\\n        {\\n            keys: [\\\"h3\\\", \\\"stui-content__playlist\\\"],\\n            url: \\\"h3\\\",\\n            allKey: true,\\n        },\\n        {\\n            keys: [\\\"myui-vodlist \\\"],\\n            url: \\\"myui-vodlist\\\",\\n        },\\n        {\\n            keys: [\\\"mo-movs-item\\\"],\\n            url: \\\"mo-movs-item\\\",\\n        },\\n        {\\n            keys: [\\\"module-tab-item\\\"],\\n            url: \\\"module-tab-item\\\",\\n            //     allKey: true,\\n        },{\\n            keys: [\\\"y-playList\\\"],\\n            url: \\\"y-playList\\\",\\n        },\\n        {\\n            keys: [\\\"stui-vodlist \\\"],\\n            url: \\\"stui-vodlist\\\",\\n            //     allKey: true,\\n        },\\n        {\\n            keys: [\\\"play_source_tab\\\"],\\n            url: \\\"play_source_tab\\\",\\n        },\\n        {\\n            keys: [\\\"fed-play-item\\\"],\\n            url: \\\"fed-play-item\\\",\\n        },\\n        {\\n            keys: [\\\"module-item\\\"],\\n            url: \\\"module-items\\\",\\n        },\\n        {\\n            keys: [\\\"vodlist \\\", \\\"lazyload\\\"],\\n            url: \\\"vodlist\\\",\\n            allKey: true,\\n        },\\n        {\\n            keys: [\\\"mo-play-load\\\"],\\n            url: \\\"mo-play-load\\\",\\n        },\\n        {\\n            keys: [\\\"fed-list-title\\\"],\\n            url: \\\"fed-list-title\\\",\\n            //allKey: true,\\n        },\\n        {\\n            keys: [\\\"pack-ykpack\\\\\\\"\\\"],\\n            url: \\\"pack-ykpack\\\",\\n        },\\n        /*\\n                {\\n                    keys: [\\\"item\\\"],\\n                    url: \\\"item\\\",\\n                },*/\\n        {\\n            keys: [\\\"data_list\\\"],\\n            url: \\\"data_list\\\",\\n        },\\n    ],\\n    \\\"search\\\": [{\\n            keys: [\\\"stui-vodlist__media\\\"],\\n            url: \\\"stui-vodlist__media\\\",\\n        },\\n        {\\n            keys: [\\\"myui-vodlist__media\\\"],\\n            url: \\\"myui-vodlist__media\\\",\\n        },\\n        {\\n            keys: [\\\"module-search-item\\\"],\\n            url: \\\"module-search-item\\\",\\n        },\\n        {\\n            keys: [\\\"stui-vodlist \\\"],\\n            url: \\\"stui-vodlist\\\",\\n            //     allKey: true,\\n        },\\n        {\\n            keys: [\\\"dl \\\"],\\n            url: \\\"dl\\\",\\n            allKey: true,\\n        },\\n        {\\n            keys: [\\\"module-items\\\"],\\n            url: \\\"module-items\\\",\\n        },\\n    ]\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"#auto\",\"path\":\"auto\",\"rule\":\"js:\\nfunction getPageSource(key) {\\n    let src = request(\\\"hiker://page/\\\" + key + \\\"?rule=模板·Q\\\");\\n    src = JSON.parse(src).rule;\\n    return src;\\n}\\nconst sourceMap = $.require(\\\"hiker://page/Mapping?rule=模板·Q\\\");\\n\\nfunction autoPage(htmlsrc, type) {\\n    let pageRules = [],\\n        htmlSource = htmlsrc,\\n        pageType,\\n        mMapping;\\n    if (type !== undefined) {\\n        pageType = type;\\n    } else {\\n        pageType = MY_TYPE;\\n    }\\n    mMapping = sourceMap[pageType];\\n    if (mMapping === undefined || !Array.isArray(mMapping)) {\\n        throw new Error(\\\"不存在\\\" + pageType + \\\"类型的模板\\\");\\n    }\\n    for (let item of mMapping) {\\n        if (item.allKey) {\\n            if (item.keys.every(key => htmlSource.includes(key))) {\\n                pageRules.push(item);\\n            }\\n        } else {\\n            if (item.keys.some(key => htmlSource.includes(key))) {\\n                pageRules.push(item);\\n            }\\n        }\\n    }\\n    if(pageRules.length == 0) {\\n        log(\\\"暂无合适的模板\\\");\\n    }\\n    for (let pageRule of pageRules) {\\n        log(\\\"正在匹配：\\\" + pageRule.url);\\n        try {\\n            eval.call(null, \\\";(function(){\\\" + getPageSource(pageRule.url) + \\\"})()\\\");\\n            log(\\\"匹配模板成功，正在结束匹配进程\\\");\\n            break;\\n        } catch (e) {\\n            log(\\\"匹配模板错误\\\");\\n            log(e.toString())\\n            log(\\\"正在匹配下一个模板......\\\")\\n            if (pageRule.url == pageRules[pageRules.length - 1].url) {\\n                log(\\\"已匹配到最后一个模板，暂无合适的模板\\\");\\n                setResult([]);\\n            }\\n        }\\n    }\\n\\n}\\n$.exports.autoPage = autoPage;\"},{\"col_type\":\"movie_3\",\"name\":\"一级pack-ykpack\",\"path\":\"pack-ykpack\",\"rule\":\"var d =[];\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), 'body&&.pack-ykpack');\\nfor (var j in list) {\\n  d.push({\\n       title: pdfh(list[j], 'a&&title'),\\n       desc: pdfh(list[j], 'span,-1&&Text'),\\n       img: pd(list[j], '.eclazy&&data-original')+'@Referer=',\\n       url: pd(list[j],'a&&href')+ '#immersiveTheme#'\\n  });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"一级module-items\",\"path\":\"module-items\",\"rule\":\"MY_RULE.url.match(/fypage/)[0]\\nvar d = []\\nvar list = pdfa(getResCode(), 'body&&.module-item');\\nfor (var j in list) {\\n    d.push({\\n        title: pdfh(list[j], 'strong||a&&Text||title'),\\n        desc: pdfh(list[j], '.module-item-text||.module-item-note&&Text'),\\n        pic_url: pd(list[j], 'img||.lazy&&data-src||data-original||src') + '@Referer=',\\n        url: pd(list[j], 'a&&href') + \\\"#immersiveTheme#\\\"\\n    });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"二级module-tab-item\",\"path\":\"module-tab-item\",\"rule\":\"var d = [];\\nvar html = fetch(MY_URL)\\n\\ntry {\\n    var title = pdfa(html, 'body--a&&.tag-link');\\n} catch (e) {\\n    var title = '';\\n}\\nvar T = [];\\nfor (var i in title) {\\n    T.push(pdfh(title[i], 'a&&Text'))\\n}\\n\\nd.push({\\n    title: T.join('  ') + '\\\\n' +\\n        pdfh(html, '.video-info-items,1&&Text')\\n        .split('/').join('  ')\\n        .substring(0, 20) + '\\\\n' +\\n        pdfh(html, '.video-info-items&&Text')\\n        .split('/').join('  ')\\n        .substring(0, 20),\\n    desc: pdfh(html, '.video-info-items,2&&Text'),\\n    img: pd(html, '.lazyload&&data-original||data-src||src'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nvar 线路 = 'body&&.module-tab-item'\\nvar 选集 = 'body&&.scroll-box-y||.module-list'\\nvar 线路名 = 'span&&Text'\\nvar 选集列表 = 'body&&a'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"搜索module-search-item\",\"path\":\"module-search-item\",\"rule\":\"var d = [];\\nvar list = pdfa(getResCode(), 'body&&.module-search-item');\\nlog('搜索结果')\\nlog(list)\\nif (list.length == 0) throw \\\"搜索为空，可能匹配错误\\\"\\nfor (var j in list) {\\n    d.push({\\n        title: pdfh(list[j], 'h3&&Text'),\\n        desc: pdfh(list[j], '.video-serial&&Text'),\\n        content: pdfh(list[j], '.video-info-aux&&Text'),\\n        img: pd(list[j], 'img&&data-original||data-src'),\\n        url: pd(list[j], '.video-serial&&href') + '#immersiveTheme#'\\n    });\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"一级item\",\"path\":\"item\",\"rule\":\"var d = [];\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), 'body&&.item');\\nfor (let i in list) {\\n    d.push({\\n        title: pdfh(list[i], 'img&&alt'),\\n        desc: pdfh(list[i], 'p&&Text'),\\n        pic_url: pd(list[i], 'img&&src'),\\n        url: pd(list[i], 'a&&href'),\\n        col_type: 'movie_3'\\n    })\\n}\\nsetResult(d)\"},{\"name\":\"一级data_list\",\"path\":\"data_list\",\"rule\":\"var d = [];\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), '#data_list&&li');\\nfor (let i in list) {\\n    d.push({\\n        title: pdfh(list[i], 'a&&title'),\\n        desc: pdfh(list[i], 'em&&Text'),\\n        pic_url: pd(list[i], 'img&&data-src'),\\n        url: pd(list[i], 'a&&href'),\\n        col_type: 'movie_3'\\n    })\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"二级h3\",\"path\":\"h3\",\"rule\":\"var d = [];\\nvar html = getResCode();\\nif (html.indexOf('检测中') != -1) {\\n    html = request(MY_URL + '?btwaf' + html.match(/btwaf(.*?)\\\\\\\"/)[1]);\\n}\\nd.push({\\n    title: pdfh(html, '.data,2&&Text')\\n        .replace('类型：', '')\\n        .replace('地区：', '')\\n        .replace('年份：', ' ')\\n        .substring(0, 18) + '\\\\n' +\\n        pdfh(html, '.data,1&&Text')\\n        .substring(0, 15) + '\\\\n' +\\n        pdfh(html, '.data&&Text')\\n        .substring(0, 15),\\n    desc: pdfh(html, '.detail-sketch||.data,3||#desc&&Text'),\\n    img: pd(html, '.lazyload&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\n\\nvar 线路 = 'body&&.stui-pannel:has(.stui-content__playlist)'\\nvar 选集 = 'body&&.stui-content__playlist'\\nvar 线路名 = 'h3&&Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"一级fed-list-title\",\"path\":\"fed-list-title\",\"rule\":\"var d = [];\\nMY_RULE.url.match(/fypage/)[0]\\nvar list = pdfa(getResCode(), '.fed-list-info&&li');\\nfor (var j in list) {\\n  d.push({\\n       title: pdfh(list[j], '.fed-list-title&&Text'),\\n       desc: pdfh(list[j], '.fed-text-center&&Text'),\\n       img: pd(list[j], 'a&&data-original')+'@Referer=',\\n       url: pd(list[j], 'a&&href')\\n  });\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"二级myui-content__list\",\"path\":\"myui-content__list\",\"rule\":\"var d = [];\\nvar html = getResCode();\\n\\nd.push({\\n    title: pdfh(html, '.data,0&&Text')\\n        .replace('地区：', '  ')\\n        .replace('年份：', '  ') + '\\\\n' +\\n        pdfh(html, '.data,1&&Text')\\n        .substring(0, 15) + '\\\\n' +\\n        pdfh(html, '.data,2&&Text'),\\n    desc: pdfh(html, '.data,3&&Text'),\\n    pic_url: pd(html, '.lazyload&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nvar 线路 = 'body&&.myui-panel-box:has(.myui-content__list)'\\nvar 选集 = 'body&&.myui-content__list'\\nvar 线路名 = 'h3&&Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"字符串处理工具\",\"path\":\"stringtool\",\"rule\":\"js:\\nconst matchList  = {\\n  // \\\"<\\\":\\\"&lt;\\\",\\n  // \\\">\\\": \\\"&gt;\\\",\\n  // \\\"&\\\": \\\"&amp;\\\",\\n  // '\\\"': \\\"&quot;\\\",\\n  // \\\"'\\\": \\\"acute;\\\",\\n  \\\" \\\": \\\"&nbsp;\\\",\\n  \\\"\\\\n\\\":\\\"<br>\\\"\\n}\\n// 字符过滤器\\nfunction htmlEscape(text){\\n  let regStr = '(' + Object.keys(matchList).toString() + ')'\\n  regStr = regStr.replace(/,/g, ')|(')  \\n  const regExp = new RegExp(regStr, 'g')\\n  return text.replace(regExp, match => matchList[match])\\n}\\n$.exports.htmlEscape = htmlEscape\"},{\"col_type\":\"movie_3\",\"name\":\"动态分类1\",\"path\":\"dtfl\",\"rule\":\"const empty = \\\"hiker://empty\\\"\\n\\nif (typeof(拼接分类) != 'undefined' && 拼接分类 != '') {\\n    var categories = pdfa(html, 大类定位).concat(pdfa(html, 拼接分类))\\n} else {\\n    var categories = pdfa(html, 大类定位)\\n   \\n}\\n\\nlet s = []\\nlet init_cate = []\\n\\nfor (let i = 0; i < 20; i++) {\\n    init_cate.push(\\\"0\\\")\\n}\\n\\nconst fold = getVar(MY_RULE.group, \\\"0\\\")\\nconst cate_temp_json = getVar(MY_RULE.title, JSON.stringify(init_cate))\\nconst cate_temp = JSON.parse(cate_temp_json)\\n\\nif (parseInt(page) === 1) {\\n    s.push({\\n        title: fold === '1' ? '““””<b>' + '∨'.fontcolor(\\\"#FF0000\\\") + '</b>' : '““””<b>' + '∧'.fontcolor(\\\"#1aad19\\\") + '</b>',\\n        url: $().lazyRule((fold) => {\\n            putVar(MY_RULE.group, fold === '1' ? '0' : '1');\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\"\\n        }, fold),\\n        col_type: 'scroll_button',\\n    })\\n    categories.forEach((category, index) => {\\n        let sub_categories = pdfa(category, 小类定位);\\n        log(sub_categories)\\n        if (index === 0) {\\n            sub_categories.forEach((item, key) => {\\n                let title = pdfh(item, 分类标题)\\n                if (typeof(排除) != 'undefined' && 排除 != '') {\\n                    title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\")\\n                }\\n                s.push({\\n                    title: key.toString() === cate_temp[index] ? \\\"““””\\\" + title.fontcolor(分类颜色) : title,\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\n                        let new_cate = []\\n                        params.cate_temp.forEach((cate, index) => {\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\")\\n                        })\\n                        putVar(MY_RULE.title, JSON.stringify(new_cate))\\n                        putVar(MY_RULE.url, input)\\n                        refreshPage(true)\\n                        return \\\"hiker://empty\\\"\\n                    }, {\\n                        cate_temp: cate_temp,\\n                        key: key,\\n                        page: page,\\n                    }),\\n                    col_type: 'scroll_button',\\n                })\\n            })\\n            s.push({\\n                col_type: \\\"blank_block\\\"\\n            });\\n        } else if (fold === '1') {\\n            sub_categories.forEach((item, key) => {\\n                let title = pdfh(item, 分类标题)\\n                if (typeof(排除) != 'undefined' && 排除 != '') {\\n                    title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\")\\n                }\\n                s.push({\\n                    title: key.toString() === cate_temp[index] ? \\\"““””\\\" + title.fontcolor(分类颜色) : title,\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\n                        params.cate_temp[params.index] = params.key.toString()\\n\\n                        putVar(MY_RULE.title, JSON.stringify(params.cate_temp))\\n                        putVar(MY_RULE.url, input)\\n                        refreshPage(true)\\n                        return \\\"hiker://empty\\\"\\n                    }, {\\n                        cate_temp: cate_temp,\\n                        index: index,\\n                        key: key,\\n                        page: page,\\n                    }),\\n                    col_type: 'scroll_button',\\n                })\\n            })\\n            s.push({\\n                col_type: \\\"blank_block\\\"\\n            });\\n        }\\n    })\\n}\\nsetPreResult(s)\"},{\"col_type\":\"movie_3\",\"name\":\"一级公共模板\",\"path\":\"yiji\",\"rule\":\"function 一级() {};\\nObject.assign(一级.prototype, {\\n    constructor: 一级,\\n    test() {},\\n    获取源码(url, header) {\\n        return fetch(true_url, {\\n            headers: header || {\\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0)'\\n            }\\n        }) // 默认统一使用PC UA\\n    },\\n    获取正确链接(page, regex) {\\n        let true_url = getMyVar('header.url', MY_URL);\\n        let 链接处理工具 = $.require('hiker://page/url-processor?rule=模板·Q')\\n        true_url = 链接处理工具\\n            .链接(true_url)\\n            .页码(page)\\n            .插入新处理规则(regex || [])\\n            .获取处理结果();\\n        return true_url;\\n    },\\n    打造分类(ruleList) {\\n        // '0' 为默认不折叠，'1' 为默认折叠\\n        const 当前折叠状态 = getMyVar('header.fold', '1')\\n\\n        // 引入动态分类依赖\\n        let htmlCategories = $.require('hiker://page/categories-header?rule=模板·Q')\\nvar getRangeColors = function(){\\n        return '#'+('00000'+(Math.random()*0x1000000<<0).toString(16)).substr(-6);\\n      }\\n        htmlCategories.界面(d)\\n            // .分类链接(true_url)\\n            .源码(html)\\n            .页码(page)\\n            .添加分类定位(ruleList)\\n            .开启内置折叠功能() // 必须\\n            .折叠(当前折叠状态) // 必须\\n            .选中的分类颜色(getRangeColors())\\n         //   .选中的分类颜色('#098AC1')\\n            .开始打造分类();\\n    },\\n    生成片单(d, html) {\\n        let list = pdfa(html, 列表);\\n        for (let j in list) {\\n            let img = pd(list[j], 图片);\\n            d.push({\\n                title: pdfh(list[j], 标题),\\n                desc: pdfh(list[j], 描述),\\n                img: img + '@Referer=' + img,\\n                url: pd(list[j], 链接).replace('vodplay','voddetail') + \\\"#immersiveTheme#\\\"\\n            });\\n        }\\n    }\\n})\\n\\n$.exports = new 一级();\\n$.exports\"},{\"col_type\":\"movie_3\",\"name\":\"动态分类2\",\"path\":\"categories-header\",\"rule\":\"const symbolMap = {\\n    // checkParams: Symbol('checkParams'),\\n    mLayout: Symbol('mLayout'),\\n    true_url: Symbol('true_url'),\\n    mPage: Symbol('mPage'),\\n    src: Symbol('src'),\\n    ruleObjList: Symbol('ruleObjList'),\\n    mFold: Symbol('mFold'),\\n    mFoldInnerEnable: Symbol('mFoldInnerEnable'),\\n    mFoldIndex: Symbol('mFoldIndex'),\\n    mFoldLayout: Symbol('mFoldLayout'),\\n    mColor: Symbol('mColor'),\\n    mTag: Symbol('mTag'),\\n}\\n\\nfunction CategoriesHeader(color) {\\n    // 'use strict';\\n    // ...\\n    // this[symbolMap.listRule] = []\\n    // this[symbolMap.subListRule] = []\\n    this[symbolMap.mColor] = color || \\\"#FA7298\\\";\\n    this[symbolMap.ruleObjList] = []\\n    this.VARMAP = {\\n        CATEGORY: \\\"header.category\\\",\\n        URL: \\\"header.url\\\",\\n        FOLD: \\\"header.fold\\\",\\n    }\\n    this[symbolMap.mFoldLayout] = {\\n        injectIndex: 1\\n    }\\n    this[symbolMap.mFoldIndex] = 1\\n}\\n\\nObject.assign(CategoriesHeader.prototype, {\\n    // Override 构造方法，相当于 function.prototype.constructor = (...) => {...}，new function() 的时候会自动执行\\n    constructor: CategoriesHeader,\\n    // 定义私有方法\\n    VERSION: 202112011900,\\n    checkParams() {\\n        if (!this[symbolMap.mLayout]) {\\n            throw new Error(\\\"请调用 layout(d) 传入当前界面\\\")\\n        }\\n        if (!(this[symbolMap.src] || this[symbolMap.true_url])) {\\n            throw new Error(\\\"请调用 trueUrl(url) 传入当前分类的链接或调用 html(mHtml) 传入当前分类页面的源码\\\")\\n        }\\n        if (!this[symbolMap.mPage]) {\\n            throw new Error(\\\"请调用 page(mPage) 传入当前页数\\\")\\n        }\\n        if (this[symbolMap.ruleObjList].length < 1) {\\n            throw new Error(\\\"请调用相关方法传入定位规则\\\")\\n        }\\n        if (!this[symbolMap.mFold]) {\\n            this[symbolMap.mFold] = '0'\\n        }\\n    },\\n    layout(mLayout) {\\n        this[symbolMap.mLayout] = mLayout\\n        return this\\n    },\\n    trueUrl(url) {\\n        this[symbolMap.true_url] = url\\n        return this\\n    },\\n    page(mPage) {\\n        if (typeof (mPage) === 'string') {\\n            mPage = parseInt(mPage)\\n        }\\n        this[symbolMap.mPage] = mPage\\n        return this\\n    },\\n    html(mSrc) {\\n        this[symbolMap.src] = mSrc\\n        return this\\n    },\\n    list(rule) {\\n        if (this[symbolMap.ruleObjList].length > 0) {\\n            throw new Error(\\\"list(rule) add(ruleObj) 只能二选一！\\\")\\n        }\\n        this[symbolMap.ruleObjList] = [{}]\\n        this[symbolMap.ruleObjList][0].listRule = rule\\n        this[symbolMap.ruleObjList][0]['一级分类'] = rule\\n        return this\\n    },\\n    subList(rule) {\\n        if (this[symbolMap.ruleObjList].length > 1) {\\n            throw new Error(\\\"subList(rule) add(ruleObj) 只能二选一！\\\")\\n        }\\n        if (!this[symbolMap.ruleObjList][0] || (!this[symbolMap.ruleObjList][0].listRule && !this[symbolMap.ruleObjList][0]['一级分类'])) {\\n            throw new Error(\\\"请先调用 list(rule) 或 一级分类(rule) 定位一级分类\\\")\\n        }\\n        this[symbolMap.ruleObjList][0].subListRule = rule\\n        this[symbolMap.ruleObjList][0]['子分类'] = rule\\n        return this\\n    },\\n    title(rule) {\\n        if (this[symbolMap.ruleObjList].length > 1) {\\n            throw new Error(\\\"title(rule) add(ruleObj) 只能二选一！\\\")\\n        }\\n        if (!this[symbolMap.ruleObjList][0] || (!this[symbolMap.ruleObjList][0].listRule && !this[symbolMap.ruleObjList][0]['一级分类'])) {\\n            throw new Error(\\\"请先调用 list(rule) 或 一级分类(rule) 定位一级分类\\\")\\n        }\\n        this[symbolMap.ruleObjList][0].titleRule = rule\\n        this[symbolMap.ruleObjList][0]['分类标题'] = this[symbolMap.ruleObjList][0].titleRule\\n        return this\\n    },\\n    url(rule) {\\n        if (this[symbolMap.ruleObjList].length > 1) {\\n            throw new Error(\\\"url(rule) add(ruleObj) 只能二选一！\\\")\\n        }\\n        if (!this[symbolMap.ruleObjList][0] || (!this[symbolMap.ruleObjList][0].listRule && !this[symbolMap.ruleObjList][0]['一级分类'])) {\\n            throw new Error(\\\"请先调用 list(rule) 或 一级分类(rule) 定位一级分类\\\")\\n        }\\n        this[symbolMap.ruleObjList][0].urlRule = rule\\n        this[symbolMap.ruleObjList][0]['分类链接'] = this[symbolMap.ruleObjList][0].urlRule\\n        return this\\n    },\\n    /**\\n     * 是否开启折叠功能\\n     *\\n     * @param enabled true 表示开启，false 表示禁用\\n     * @returns {CategoriesHeader}\\n     */\\n    foldInner(enabled) {\\n        if (!(typeof (enabled) === 'boolean')) {\\n            throw new Error(\\\"请传入 true 或 false 表示开启或关闭折叠功能！\\\")\\n        }\\n        this[symbolMap.mFoldInnerEnable] = enabled\\n        return this\\n    },\\n    /**\\n     * 从第 index 行开始折叠\\n     *\\n     * @param index 开始折叠的行数\\n     * @returns {CategoriesHeader}\\n     */\\n    foldIndex(index) {\\n        if (!(typeof (index) === 'number')) {\\n            throw new Error(\\\"开始折叠行请传入数字！\\\")\\n        }\\n        if (index < 1) {\\n            throw new Error(\\\"开始折叠行请传入大于 0 的整数！\\\")\\n        }\\n        this[symbolMap.mFoldIndex] = index || 1;\\n        return this\\n    },\\n    /**\\n     * 折叠按钮的界面\\n     *\\n     * @param layout 与 d.push 结构一致，\\n     *        例：{ title:\\\"标题1\\\", url:\\\"xxx\\\", col_type:\\\"scroll_button\\\" };\\n     *        参数采用可选覆盖模式，不写的参数则使用默认;\\n     *        比如传入 { col_type:\\\"text_1\\\" }，那最终结果就是 { title:\\\"标题1\\\", url:\\\"xxx\\\", col_type:\\\"text_1\\\" }\\n     * @returns {CategoriesHeader}\\n     */\\n    foldLayout(layout) {\\n        if (typeof layout === 'object') {\\n            let keys = Object.keys(layout)\\n            let injectIndex = layout.injectIndex || layout['折叠按钮插入行']\\n            if (layout.title || layout.url || layout.col_type || injectIndex) {\\n                for (let i = 0; i < keys.length; i++) {\\n                    const key = keys[i]\\n                    this[symbolMap.mFoldLayout][key] = layout[key];\\n                }\\n            } else {\\n                throw new Error(\\\"请传入正确的折叠界面元素！\\\")\\n            }\\n            // injectIndex 折叠按钮插入第 injectIndex 行\\n            if (injectIndex) {\\n                if (!(typeof (injectIndex) === 'number')) {\\n                    throw new Error(\\\"折叠按钮插入行请传入数字！\\\")\\n                }\\n                if (injectIndex < 1) {\\n                    throw new Error(\\\"折叠按钮插入行请传入大于 0 的整数！\\\")\\n                }\\n                if (injectIndex > this[symbolMap.mFoldIndex]) {\\n                    throw new Error(\\\"折叠按钮插入行不得大于显示折叠行数！请调用 .foldIndex(index) 或 .第几行开始折叠(index) 传入正确的显示折叠行数\\\")\\n                }\\n                this[symbolMap.mFoldLayout].injectIndex = injectIndex || 1;\\n            }\\n        } else {\\n            throw new Error(\\\"请传入正确的折叠界面元素！\\\")\\n        }\\n        return this;\\n    },\\n    // 当前是否折叠\\n    fold(isFold) {\\n        if (typeof (isFold) === 'string') {\\n            isFold = isFold === '1'\\n        }\\n        if (isFold) {\\n            this[symbolMap.mFold] = '1';\\n        } else {\\n            this[symbolMap.mFold] = '0';\\n        }\\n        return this\\n    },\\n    color(mColor) {\\n        this[symbolMap.mColor] = mColor\\n        return this\\n    },\\n    tag(mTag) {\\n        this[symbolMap.mTag] = mTag\\n        return this\\n    },\\n    add(ruleObj) {\\n        // log($.stringify(ruleObj))\\n        if (ruleObj.constructor === Array) {\\n            this[symbolMap.ruleObjList] = this[symbolMap.ruleObjList].concat(ruleObj)\\n        } else {\\n            this[symbolMap.ruleObjList].push(ruleObj)\\n        }\\n        return this;\\n    },\\n    evalJSRule(item, jsRule) {\\n        let rule = jsRule.replace(\\\"@js:\\\", \\\"\\\")\\n        rule = rule.trim()\\n        // log($.stringify(rule))\\n        let input = item\\n        if (rule.startsWith(\\\"(\\\")) {\\n            eval('result = ' + rule)\\n        } else {\\n            /**\\n             * 还原成 $.toString(...) 的最终结果，达到最终处理方式跟上面的 if 一致的目的\\n             */\\n            eval('result = ' + '(() => {' + rule + '})()')\\n        }\\n        return (result || '')\\n    },\\n    getTitle(src, category) {\\n        let title = ''\\n        let titleRule = category.titleRule || 'a&&Text'\\n        if (titleRule.startsWith(\\\"@js:\\\")) {\\n            title = this.evalJSRule(src, titleRule)\\n        } else {\\n            title = parseDomForHtml(src, titleRule)\\n        }\\n        return title || \\\"\\\";\\n    },\\n    getUrl(src, category) {\\n        let url = ''\\n        let urlRule = category.urlRule || 'a&&href'\\n        if (typeof urlRule === 'object') {\\n            let mUrlRule = urlRule.rule || urlRule['解析规则'] || 'a&&href';\\n            if (mUrlRule.startsWith(\\\"@js:\\\")) {\\n                url = this.evalJSRule(src, mUrlRule);\\n            } else {\\n                let parse = parseDom;\\n                if (urlRule.parseOption) {\\n                    switch (urlRule.parseOption) {\\n                        case \\\"parseDom\\\":\\n                        case \\\"pd\\\":\\n                            parse = parseDom;\\n                            break;\\n                        case \\\"parseDomForHtml\\\":\\n                        case \\\"pdfh\\\":\\n                            parse = parseDomForHtml;\\n                            break;\\n                        default:\\n                            parse = parseDom;\\n                    }\\n                } else if (urlRule[\\\"解析方法\\\"]) {\\n                    switch (urlRule[\\\"解析方法\\\"]) {\\n                        case \\\"parseDom\\\":\\n                        case \\\"pd\\\":\\n                            parse = parseDom;\\n                            break;\\n                        case \\\"parseDomForHtml\\\":\\n                        case \\\"pdfh\\\":\\n                            parse = parseDomForHtml;\\n                            break;\\n                        default:\\n                            parse = parseDom;\\n                    }\\n                }\\n                url = parse(src, mUrlRule);\\n            }\\n            if (urlRule.dealUrl) {\\n                url = urlRule.dealUrl(url)\\n            } else if (urlRule['二次处理']) {\\n                url = urlRule['二次处理'](url)\\n            }\\n        } else {\\n            if (urlRule.startsWith(\\\"@js:\\\")) {\\n                url = this.evalJSRule(src, urlRule);\\n            } else {\\n                url = parseDom(src, urlRule);\\n            }\\n        }\\n        return url || \\\"\\\";\\n    },\\n    build() {\\n        // 检测是否传入需要的参数\\n        this.checkParams()\\n        // 每一个分类的唯一标识\\n        let mTag = this[symbolMap.mTag] || \\\"\\\"\\n        //翻页 需要根据实际替换\\n        const html = this[symbolMap.src] || request(this[symbolMap.true_url])\\n        const empty = \\\"hiker://empty\\\"\\n        //获取列表\\n        const categories = []\\n        this[symbolMap.ruleObjList].map(ruleObj => {\\n            let list = []\\n            let listRule = ruleObj.listRule || ruleObj[\\\"一级分类\\\"]\\n            if (listRule.startsWith(\\\"@js:\\\")) {\\n                // log($.stringify(listRule))\\n                list = this.evalJSRule(html, listRule)\\n            } else {\\n                list = parseDomForArray(html, listRule)\\n            }\\n            // log(list)\\n            list.map(category => {\\n                categories.push({\\n                    list: category,\\n                    subListRule: ruleObj.subListRule || ruleObj[\\\"子分类\\\"],\\n                    titleRule: ruleObj.titleRule || ruleObj[\\\"分类标题\\\"],\\n                    urlRule: ruleObj.urlRule || ruleObj[\\\"分类链接\\\"],\\n                });\\n            })\\n        })\\n\\n        // log($.stringify(categories))\\n\\n        let init_cate = []\\n        for (let i = 0; i < 20; i++) {\\n            init_cate.push(\\\"0\\\")\\n        }\\n\\n        const cate_temp_json = getMyVar(mTag + this.VARMAP.CATEGORY, JSON.stringify(init_cate))\\n        const cate_temp = JSON.parse(cate_temp_json)\\n\\n        if (this[symbolMap.mPage] === 1) {\\n\\n            categories.forEach((category, index) => {\\n\\n                // 折叠 UI\\n                if (this[symbolMap.mFoldInnerEnable] && this[symbolMap.mFoldLayout].injectIndex === (index+1)) {\\n                    let foldLayout = {\\n                        title: this[symbolMap.mFoldLayout].title || (this[symbolMap.mFold] === '1' ? '““””<b><span style=\\\"color: #FF0000\\\">∨</span></b>' : '““””<b><span style=\\\"color: #1aad19\\\">∧</span></b>'),\\n                        url: this[symbolMap.mFoldLayout].url || $(\\\"hiker://empty#noHistory#\\\").lazyRule((params) => {\\n                            putMyVar(params.mTag + params.VARMAP.FOLD, getMyVar(params.mTag + params.VARMAP.FOLD, params.isFold) === '1' ? '0' : '1')\\n                            refreshPage(false);\\n                            return \\\"hiker://empty\\\"\\n                        }, {\\n                            mTag: mTag,\\n                            isFold: this[symbolMap.mFold],\\n                            VARMAP: this.VARMAP\\n                        }),\\n                        col_type: this[symbolMap.mFoldLayout].col_type || \\\"scroll_button\\\",\\n                    }\\n                    this[symbolMap.mLayout].push(foldLayout)\\n                }\\n\\n                //具体列表下的分类\\n                let sub_categories = [];\\n                if (category.subListRule.startsWith(\\\"@js:\\\")) {\\n                    sub_categories = this.evalJSRule(category.list, category.subListRule)\\n                } else {\\n                    sub_categories = parseDomForArray(category.list, category.subListRule);\\n                }\\n                if (index < (this[symbolMap.mFoldIndex] || 1)) {\\n                    sub_categories.forEach((item, key) => {\\n                        let title = this.getTitle(item, category)\\n                        let url = this.getUrl(item, category)\\n\\n                        this[symbolMap.mLayout].push({\\n                            title: key.toString() === cate_temp[index] ? '““””<b><font color=' + this[symbolMap.mColor] + '>' + title + ' </font></b>' : title,\\n                            url: $(url).lazyRule((params) => {\\n                                let new_cate = []\\n                                if (params.index === 0) {\\n                                    params.cate_temp.forEach((cate, index) => {\\n                                        new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\")\\n                                    });\\n                                } else {\\n                                    params.cate_temp[params.index] = params.key.toString()\\n                                }\\n                                putMyVar(params.tag + params.VARMAP.CATEGORY, JSON.stringify(params.index === 0 ? new_cate : params.cate_temp))\\n                                putMyVar(params.tag + params.VARMAP.URL, input)\\n                                refreshPage(true)\\n                                return \\\"hiker://empty\\\"\\n                            }, {\\n                                cate_temp: cate_temp,\\n                                index: index,\\n                                VARMAP: this.VARMAP,\\n                                tag: mTag,\\n                                key: key,\\n                                page: this[symbolMap.mPage],\\n                            }),\\n                            col_type: 'scroll_button',\\n                        })\\n                    })\\n                    this[symbolMap.mLayout].push({\\n                        col_type: \\\"blank_block\\\"\\n                    });\\n                } else if (this[symbolMap.mFold] === '0') {\\n                    sub_categories.forEach((item, key) => {\\n                        let title = this.getTitle(item, category)\\n                        let url = this.getUrl(item, category)\\n\\n                        this[symbolMap.mLayout].push({\\n                            title: key.toString() === cate_temp[index] ? '““””<b><font color=' + this[symbolMap.mColor] + '>' + title + ' </font></b>' : title,\\n                            url: $(url).lazyRule((params) => {\\n                                params.cate_temp[params.index] = params.key.toString()\\n\\n                                putMyVar(params.tag + params.VARMAP.CATEGORY, JSON.stringify(params.cate_temp))\\n                                putMyVar(params.tag + params.VARMAP.URL, input)\\n                                refreshPage(true)\\n                                return \\\"hiker://empty\\\"\\n                            }, {\\n                                cate_temp: cate_temp,\\n                                index: index,\\n                                VARMAP: this.VARMAP,\\n                                tag: mTag,\\n                                key: key,\\n                                page: this[symbolMap.mPage],\\n                            }),\\n                            col_type: 'scroll_button',\\n                        })\\n                    })\\n                    this[symbolMap.mLayout].push({\\n                        col_type: \\\"blank_block\\\"\\n                    });\\n                }\\n            });\\n        }\\n    },\\n\\n    界面(layout) {\\n        return this.layout(layout)\\n    },\\n    分类链接(trueUrl) {\\n        return this.trueUrl(trueUrl);\\n    },\\n    页码(page) {\\n        return this.page(page);\\n    },\\n    源码(html) {\\n        return this.html(html);\\n    },\\n    定位一级分类(list) {\\n        return this.list(list);\\n    },\\n    定位子分类(subList) {\\n        return this.subList(subList);\\n    },\\n    定位分类标题(title) {\\n        return this.title(title);\\n    },\\n    定位分类链接(url) {\\n        return this.url(url);\\n    },\\n    开启内置折叠功能() {\\n        return this.foldInner(true);\\n    },\\n    关闭内置折叠功能() {\\n        return this.foldInner(false);\\n    },\\n    第几行开始折叠(index) {\\n        return this.foldIndex(index);\\n    },\\n    折叠按钮样式(layout) {\\n        return this.foldLayout(layout)\\n    },\\n    折叠(fold) {\\n        return this.fold(fold);\\n    },\\n    选中的分类颜色(color) {\\n        return this.color(color);\\n    },\\n    唯一标识(mTag) {\\n        return this.tag(mTag)\\n    },\\n    添加分类定位(ruleObj) {\\n        return this.add(ruleObj);\\n    },\\n    开始打造分类() {\\n        return this.build();\\n    },\\n\\n})\\n$.exports = new CategoriesHeader();\\n$.exports\\n\"},{\"col_type\":\"movie_3\",\"name\":\"链接处理工具\",\"path\":\"url-processor\",\"rule\":\"/**\\n * 本地网页插件链接 hiker://files/rules/js/UrlProcessor.js\\n * 子页面链接 hiker://page/url-processor\\n * 道长仓库链接 http://hiker.nokia.press/hikerule/rulelist.json?id=2849\\n * 码云 Gitee 链接 https://gitee.com/reborn0/HikerRules/raw/master/plugins/UrlProcessor.js\\n */\\nfunction UrlProcessor() {\\n    this.params = {}\\n    this.regexMap = [\\n        {\\n            reg: '(vodtype|videot)\\\\\\\\/\\\\\\\\w+',\\n            exec: () => {\\n                return this.params.url\\n                    .replace(/-\\\\d+.html/, '-' + this.params.page + '.html')\\n                    .replace(/((vodtype|videot)\\\\/\\\\w+).html/, '$1-' + this.params.page + '.html')\\n            }\\n        },\\n        {\\n            reg: '\\\\\\\\/?[\\\\\\\\w\\\\\\\\d]+-.*?-.*?-.*?-.*?-.*?-.*?-.*?-\\\\\\\\d*---\\\\\\\\d*.html',\\n            exec: () => {\\n                return this.params.url\\n                    .replace(/\\\\d*(---.html)/, this.params.page + '$1')\\n                    .replace(/(---\\\\d+.html)/, this.params.page + '$1'); // 拼接页码\\n            }\\n        },\\n        {\\n            reg: '((\\\\\\\\/vod\\\\\\\\/show)?(\\\\\\\\/area\\\\\\\\/[\\\\\\\\w\\\\\\\\d%]+)?(\\\\\\\\/by\\\\\\\\/[\\\\\\\\w\\\\\\\\d%]+)?(\\\\\\\\/id\\\\\\\\/\\\\\\\\d+)?(\\\\\\\\/letter\\\\\\\\/[\\\\\\\\w\\\\\\\\d%]+)?)(\\\\\\\\/page\\\\\\\\/\\\\\\\\d+)?(\\\\\\\\/year\\\\\\\\/\\\\\\\\d+)?\\\\\\\\.html',\\n            exec: () => {\\n                let regExp = /((\\\\/vod\\\\/show)?(\\\\/area\\\\/[\\\\w\\\\d%]+)?(\\\\/by\\\\/[\\\\w\\\\d%]+)?(\\\\/id\\\\/\\\\d+)?(\\\\/letter\\\\/[\\\\w\\\\d%]+)?)(\\\\/page\\\\/\\\\d+)?(\\\\/year\\\\/\\\\d+)?\\\\.html/\\n                return this.params.url\\n                    .replace(regExp, '$1' + (\\\"/page/\\\" + this.params.page) + '$8' + \\\".html\\\")\\n            }\\n        }\\n    ]\\n}\\n\\nObject.assign(UrlProcessor.prototype, {\\n    constructor: UrlProcessor,\\n    checkParams() {\\n        if (!this.params.url) {\\n            throw new Error(\\\"请先调用 .baseUrl(url) 传入链接进行初始化!\\\")\\n        }\\n        if (!this.params.page) {\\n            throw new Error(\\\"请先调用 .page(page) 传入页码进行初始化!\\\")\\n        }\\n    },\\n    baseUrl(url){\\n        this.params.url = url\\n        return this\\n    },\\n    page(page){\\n        this.params.page = page\\n        return this\\n    },\\n    addExtra(regExp) {\\n        if (regExp.constructor === Array) {\\n            this.regexMap = this.regexMap.concat(regExp)\\n        } else {\\n            this.regexMap.push(regExp)\\n        }\\n        return this;\\n    },\\n    debug() {\\n        this.params.debug = true\\n        return this;\\n    },\\n    exec() {\\n        this.checkParams()\\n        let true_url = ''\\n        for (let i = 0; i < this.regexMap.length; i++) {\\n            let regObj = this.regexMap[i];\\n            let urlExp = regObj.reg;\\n            if (typeof urlExp === 'string') {\\n                urlExp = new RegExp(urlExp)\\n            }\\n            if (urlExp.test(this.params.url)) {\\n                if (this.params.debug) {\\n                    log(urlExp.toString())\\n                }\\n                true_url = regObj.exec();\\n                break;\\n            }\\n        }\\n        if (true_url) {\\n            return true_url;\\n        } else {\\n            return this.params.url\\n        }\\n    },\\n    获取处理结果() {\\n        return this.exec()\\n    },\\n    链接(url) {\\n        return this.baseUrl(url)\\n    },\\n    页码(page) {\\n        return this.page(page)\\n    },\\n    插入新处理规则(regExp) {\\n        return this.addExtra(regExp)\\n    },\\n    调试模式() {\\n        return this.debug();\\n    }\\n})\\n$.exports=new UrlProcessor()\\n$.exports\\n\"},{\"col_type\":\"movie_3\",\"name\":\"函数\",\"path\":\"jxhs\",\"rule\":\"var fftt = 'Mw8giyH1CqnTz3B7VHj7MTzvcuXIErgr1D/PugFmhOWvF6WTnKV54M1uUckMlxnLIUMbZ7FiqgLuRWcbwGXhb+67fSMBdz5Vsf6zP1dv9f4hQxtnsWKqAu5FZxvAZeFv8ki+AZPvNsd/0JVRBjUHC5QmtCkVhlM/kpn/BFWtRr0H/ZHQQq4l4JDNzXnMXA0myyvLSNZWc/sIn/vWSAHU9kAbjU4qSZsSAu9by0bMwdCPDsU4ppskU39rBSPFNDBzYyvXsJhrztaabnexWz65cpcx/H34lECjupP0oLCkmODO4WZXi1C2GnAA+h1I7YDdyyvLSNZWc/sIn/vWSAHU9kBUv7gd1Qj5oRaCUU7r2I0mmFaoD3Q9RpDhmSenxUEIP7+zUU1QW0/0yvSKOLD/wrZEVUca7lD0mfnmHuCOPLg17QCC6yJ9qIcxo3Rh/YFMPKiB1xoeDNcCD97Cs8QBwhdbux6xz/HtOSlMGtu9/AWnr5tI3aX5+x8VcCVwJ/y+SXu9+l97W7KcATyE/A4fy963XgJY2zS48DLS/kiBU3Q873LlyBK4K9Q/z7oBZoTlepYzd6bnhzKgDBj5/fX1sDKHABIyMs4PqDBy1Epmzu3cXRvPGFj1xmg4sYTw/EpayyvLSNZWc/sIn/vWSAHU9qpRYwPSVaek0SQ+LoPrGP128aEqssiPJrXXIGnYsy3MmwePe41HTI6MhJlAVd+F1UkY7wLTnL4QS7GPJsBvvfYp1xWcgVqDWkR7GoNOOMNwoyRy8bMPTZJ2xeqVCEhXyL4CsuqbinNXddqoloYeAOkqzVkXD/VS903fB2lDun0pjVznHNJQFhgia6QLq2qZg9U+SVOiXOyVg2lNovINWuWfhc7+Ty7jXzR4CXArcUr2ItdtzQvj4A0229ZtBAXj1B2k8ocmCbW1+fJ4+xJTOEennAeM0zBL7Ze+W9MFZr9EoOeoToq7VEqmUEBdpKwQzpsGtGj9OLys264hCIF8Fc4dIeONwhRjuUi1Lfpm2i0swHelD1loEesCyD501H7RYzCFmPvn8znewphfbNGA5JP/fxoRrSNw+JnoOCSgLuJUg//XSvDUWNCk4IGr5YXTOSuOKLeuLncZ50H8JRU7fCY=';\\nvar ssyz = 'TloGnnikThrfs/5fDNlk5CSsbaGtAH7W/uMZjuYoIupB6bCoo9CotLQHfPIdGgbkbynKqL2aUE2Xy558X2QxHYtTU09vD+4oaCDIuSZO7nxDbLfRGfWj7zql+yMbvF+aJoD/m6Psfw/PyYOAp/ZVGdrPzaCByfd0HL5DFVSw+YF2OC40V8SP9RxdFKKdrBuPxCWdxUCFrJ+1lRy/TU3LC84C4xxEBhgud7RtBp0zZArqBE06+Z3JtDP0eFCz/D5X0409qPHK3e1y/LuUgccuxpHnjYLE1GjlP8wYA2hQWe7yPngggQBHw33/gvb3tuCcxEKTWgmah/R32AH9ZF8jF7WemT26lUizVXe/spCdhDgHR/zUhODD4PO6glI8JPhdu+VwfPyRLG2D7CUo1L6SIF+0fYf0oTOWN13UPITo5+uZd/WnQQLU8NYx/WFCThEnkbzln9YGt60fRxsH+8uMDFgaBiC+z2SpcxB9gZ6GXypLSXWaj+qEUbGJKEx+jK/v5fnrkIhCdwNbkp9dRks6dmlYlBifzoWF8RkuC3rqPtoScBkMOMZu7GiVtoHEdHUozmnUIdrU1LGIqq9WnG7X2a3yH8s65mjLuLnd3q0U8v+LMPnHL2/GjQuTQKVh+RKEPqK/JdrChGLNrjcHvLHDbHEshrGZuQOdEphbx/PkhkvaYy4K1MO84R17guRsKs/V6niUPaL+XbQ7c3fqJS4VHJwludJTDe02euffGCm0PJIPlAOgLHnX0izJhA6q738R2UwQcWBQjJt79aF+kyqSdyt1QPVQVjaC3IpRf7PgsDhEJ7bi9nSclyIzgJ9DCJ4T+8dG1xHhKyZasT7L/x9Lfr1Mgs8nBZER2W9ax7iTkNK+X5ACU//p/YoP/uAanDtb3D0iKUUuXFH+Jbb0x1P322S2w6BJ46nuNHBMHTpVuWwhZeZzriGh7qoOywLWiExBMKyxTGLnmKh7r03/yXKYWIJnpBN2MMycVHRZJ7RumHV4CIsVrq7iRP48823RJVt9OtyP7uuc3wBBV3kcZUzbbaYdWBx1+Au+Od2u7lR6joOL810mcJm/f7J5TvGQP6HGph1YHHX4C7453a7uVHqOgyjjh5EBd720MEBY23c+TKq/z9UpWDDOg48ZFnwSIhFqitWdiZiqsaYuN0/SXwiK8EG9eQ29u2XDJoDW4mlwtcRO7vaX5XcFsgf4/mLU07mi'\"},{\"col_type\":\"movie_3\",\"name\":\"二级mo-movs-item\",\"path\":\"mo-movs-item\",\"rule\":\"var d = [];\\nvar html = getResCode();\\nd.push({\\n    title: '分类：' + pdfh(html, '.mo-cols-lays&&li,2--span&&Text') +\\n        ' | ' + pdfh(html, '.mo-cols-lays&&li,3--span&&Text') +\\n        ' | ' + pdfh(html, '.mo-cols-lays&&li,4--span&&Text') +\\n        '\\\\n' + pdfh(html, '.mo-cols-lays&&li&&Text')\\n        .substring(0, 15) +\\n        '\\\\n' + pdfh(html, '.mo-cols-lays&&li,1&&Text')\\n        .substring(0, 15),\\n    desc: '更新时间：' + pdfh(html, '.mo-cols-lays&&li,5&&Text').substring(0, 15),\\n    img: pd(html, '.mo-situ-pics&&data-original'),\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\n\\nvar 线路 = 'body&&.mo-movs-btns'\\nvar 选集 = 'body&&.mo-movs-item'\\nvar 线路名 = 'Text'\\nvar 选集列表 = 'ul&&li'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"数字验证码\",\"path\":\"yzm\",\"rule\":\"while (/输入验证码|系统安全验证/.test(html)) {\\n    let headers = {\\n        \\\"User-Agent\\\": MOBILE_UA,\\n        \\\"Referer\\\": MY_URL\\n    }\\n    eval(JSON.parse(request('hiker://page/jxhs?rule=模板·Q')).rule);\\n    evalPrivateJS(ssyz);\\n\\n    let vcode = getVCode2(MY_HOME + '/index.php/verify/index.html?', JSON.stringify(headers), 'num');\\n    fetch(MY_HOME + html.match(/\\\\/index.php.*?verify=/)[0] + JSON.parse(vcode).ret, {\\n        headers: headers,\\n        method: 'POST'\\n    })\\n    var yz = MY_TYPE == 'home' ? true_url : MY_URL\\n    log(MY_TYPE)\\n    html = request(yz, {\\n        //   headers: headers\\n    })\\n}\\nif (/频繁操作/.test(html)) {\\n    d.push({\\n    title: '网站搜索时间间隔',\\n    desc: \\\"下拉重试\\\"\\n})\\n\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"二级y-playList\",\"path\":\"y-playList\",\"rule\":\"js:\\nvar d = [];\\nvar html = getResCode()\\n\\nd.push({\\n    title: pdfh(html, '.module-info-item,3&&Text')\\n        .substring(0, 18) +\\n        '\\\\n' +\\n        pdfh(html, '.module-info-item,1&&Text')\\n        .substring(0, 18) +\\n        '\\\\n' +\\n        pdfh(html, '.module-info-item,4&&Text'),\\n    img: pd(html, '.lazyload&&data-original||src') +\\n        '@Referer=',\\n    url: MY_URL,\\n    desc: pdfh(html, '.module-info-item,5||.module-info-item&&Text'),\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\n\\nvar 线路 = '#y-playList&&span'\\nvar 选集 = 'body&&.module-play-list'\\nvar 线路名 = 'Text'\\nvar 选集列表 = 'body&&a'\\neval(JSON.parse(request('hiker://page/erji?rule=模板·Q')).rule)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"动态分类3\",\"path\":\"dtfl3\",\"rule\":\"const empty = \\\"hiker://empty\\\"\\n\\nif (typeof(拼接分类) != 'undefined' && 拼接分类 != '') {\\n    var categories = pdfa(html, 大类定位).concat(pdfa(html, 拼接分类))\\n} else {\\n    var categories = pdfa(html, 大类定位)\\n}\\n\\nlet init_cate = []\\n\\nfor (let i = 0; i < 20; i++) {\\n    init_cate.push(\\\"0\\\")\\n}\\n\\n\\nconst cate_temp_json = getVar(MY_RULE.title, JSON.stringify(init_cate))\\nconst cate_temp = JSON.parse(cate_temp_json)\\n\\nif (parseInt(page) === 1) {\\n    \\n    categories.forEach((category, index) => {\\n        let sub_categories = pdfa(category, 小类定位);\\n        \\n     \\n     \\n            sub_categories.forEach((item, key) => {\\n                let title = pdfh(item, 分类标题)\\n                if (typeof(排除) != 'undefined' && 排除 != '') {\\n                    title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\")\\n                }\\n                d.push({\\n                    title: key.toString() === cate_temp[index] ? \\\"““””<b>\\\" + title.fontcolor(分类颜色)+\\\"</b>\\\" : title,\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\n                        params.cate_temp[params.index] = params.key.toString()\\n\\n                        putVar(MY_RULE.title, JSON.stringify(params.cate_temp))\\n                        putVar(params.url, input)\\n                        clearMyVar(\\\"next_page\\\");\\n                        refreshPage(true)\\n                        return \\\"hiker://empty\\\"\\n                    }, {\\n                        cate_temp: cate_temp,\\n                        \\n                        index: index,\\n                        url: MY_URL,\\n                        key: key,\\n                        page: page,\\n                    }),\\n                    col_type: 'scroll_button',\\n                })\\n            })\\n            d.push({\\n                col_type: \\\"blank_block\\\"\\n            });\\n        \\n    })\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"动态分类改\",\"path\":\"dtfl4\",\"rule\":\"js:\\n/*\\nVer 2023-10-28 1.0\\n备注：不要用海阔代码格式化 内容会出错\\n必须参数：\\n分类颜色 大类定位 \\n小类定位 分类标题 分类链接\\nhtml =>源码 page =>页码\\n可选参数：\\n拼接分类 折叠标记 展开标记 排除\\n大类链接 大类标题 清除键 开启折叠\\n附加定位\\n说明：\\n外面用getMyVar(MY_RULE.url) 或者 状态 取链接\\n魔改:α\\n*/\\n\\nlet empty = \\\"hiker://empty\\\";\\nlet categories = [];\\nif (typeof (拼接分类) != 'undefined' && 拼接分类 != '') {\\n    categories = [pdfa(html, 大类定位).join('\\\\n')];\\n    if (拼接分类.includes(';')) {\\n        拼接分类 = 拼接分类.split(';');\\n    }\\n    if (拼接分类.constructor == Array) {\\n        拼接分类.forEach(item => {\\n            categories = categories.concat(pdfa(html, item));\\n        })\\n    } else {\\n        categories = [pdfa(html, 大类定位).join('\\\\n')].concat(pdfa(html, 拼接分类));\\n    }\\n    if (typeof (附加定位) != 'undefined' && 附加定位.length > 0) {\\n        附加定位.forEach(x => {\\n            var 一级 = pdfa(html, x.一级定位).map(s => {\\n                var 定位 = pdfa(s, x.小类).map(q => {\\n                    var title = pdfh(q, x.标题);\\n                    var url = 'a'\\n                    if (x.链接.includes('@@')) {\\n                        state = x.链接.split('@@')[0]\\n                        value = pdfh(q, x.链接.split('@@')[1]);\\n                        if (x.转换 == true) {\\n                            return `<li data-type=\\\"${state}\\\" data-val=\\\"${value}\\\"><a href=\\\"\\\">${title}</a></li>`\\n                        } else {\\n                            return `<a type=\\\"@extra\\\" state=\\\"${state}\\\" value=\\\"${value}\\\">${title}</a>`;\\n                        }\\n                    } else {\\n                        href = pd(q, x.链接);\\n                        return `<a href=\\\"${href}\\\">${title}</a>`;\\n                    }\\n                });\\n                return 定位;\\n            });\\n            categories.push(一级.join('\\\\n'));\\n        });\\n    }\\n} else {\\n    categories = [pdfa(html, 大类定位).join('\\\\n')];\\n}\\n\\nlet items = [];\\nlet cates = [];\\nlet init_cate = new Array(20).fill(\\\"0\\\");\\nconst fold = getMyVar(MY_RULE.group, \\\"0\\\");\\nconst cate_temp = JSON.parse(getMyVar(\\\"head.cate\\\", JSON.stringify(init_cate)));\\nvar 折叠状态 = (typeof (开启折叠) != 'undefined') ? 开启折叠 : true;\\nvar 折叠 = (typeof (折叠标记) != 'undefined' && 折叠标记 != '') ? 折叠标记 : '““””' + '∨'.fontcolor(\\\"#FF0000\\\");\\nvar 展开 = (typeof (展开标记) != 'undefined' && 展开标记 != '') ? 展开标记 : '““””' + '∧'.fontcolor(\\\"#1aad19\\\");\\nvar 清除 = (typeof (清除键) != 'undefined' && 清除键 != '') ? 清除键 : [];\\nvar 状态 = (typeof (状态标记) != 'undefined' && 状态标记 != '') ? 状态标记 : MY_RULE.url;\\nvar 大类处理 = typeof (一级分类处理) != 'undefined' ? true : false;\\nvar 搜索 = typeof (开启搜索) != 'undefined' ? 开启搜索 : false;\\nvar 全清 = (typeof (全清键) != 'undefined' && 全清键 != '') ? 全清键 : [];\\n全清.unshift('yi_firstpage');\\n\\n\\nif (parseInt(page) === 1) {\\n    if (搜索) {\\n        d.push({\\n            title: \\\"\\\",\\n            url: \\\"'hiker://search?rule=\\\" + MY_RULE.title + \\\"&s='+input\\\",\\n            desc: \\\"搜索关键词\\\",\\n            col_type: \\\"input\\\",\\n            extra: {\\n                defaultValue: getMyVar('keyword', ''),\\n                onChange: $.toString(() => {\\n                    putMyVar('keyword', input);\\n                })\\n            }\\n        })\\n    }\\n    if (折叠状态) {\\n        if (page == 1) {\\n            items.push({\\n                title: fold === '1' ? 折叠 : 展开,\\n                url: $(\\\"#noLoading#\\\").lazyRule((title, fold, u, all, exps) => {\\n                    var fold = getMyVar(MY_RULE.group, fold);\\n                    var [展开, 折叠] = exps;\\n                    if (fold == 1) {\\n                        var cx = findItemsByCls(title + 'cate_button');\\n                        storage0.putMyVar('cate_button', cx);\\n                        deleteItemByCls(title + 'cate_button');\\n                    } else {\\n                        var cx = storage0.getMyVar('cate_button', []).map(x => {\\n                            x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\\n                            return x;\\n                        });\\n                        addItemAfter(title + 'cate_line', cx)\\n                    }\\n                    /*all.forEach((item) => {\\n                      clearMyVar(item);\\n                    });*/\\n                    updateItem(title + 'cate_exp', {\\n                        title: fold == 1 ? 展开 : 折叠,\\n                    })\\n                    putMyVar(MY_RULE.group, fold === \\\"1\\\" ? \\\"0\\\" : \\\"1\\\");\\n                    return \\\"hiker://empty\\\";\\n                }, MY_RULE.title, fold, 状态, 全清, [展开, 折叠]),\\n                col_type: 'scroll_button',\\n                extra: {\\n                    id: MY_RULE.title + 'cate_exp',\\n                    longClick: [{\\n                        title: '清除状态',\\n                        js: $.toString((x, all, cl) => {\\n                            clearMyVar(x);\\n                            clearMyVar('head.cate');\\n                            all.forEach((item) => {\\n                                clearMyVar(item)\\n                            })\\n                            cl.forEach((item) => {\\n                                clearMyVar(item)\\n                            })\\n                            refreshPage();\\n                        }, 状态, 全清, 清除)\\n                    }]\\n                }\\n            })\\n        }\\n    }\\n    let setTitle = (k, i, t) => {\\n        return k == i ? \\\"““””\\\" + t.fontcolor(分类颜色) : t\\n    }\\n    categories.forEach((category, index) => {\\n        let sub_categories = [];\\n        if (小类定位.includes(';')) {\\n            sub_categories = pdfa(category, 小类定位.split(';')[0]);\\n            if (sub_categories.length == 0) {\\n                sub_categories = pdfa(category, 小类定位.split(';')[1]);\\n            }\\n        } else {\\n            sub_categories = pdfa(category, 小类定位);\\n        }\\n        if (index === 0) {\\n            sub_categories.forEach((item, key) => {\\n                let _大类链接 = (typeof (大类链接) != 'undefined' && 大类链接 != '') ? 大类链接 : 分类链接;\\n\\n                let _大类标题 = (typeof (大类标题) != 'undefined' && 大类标题 != '') ? 大类标题 : 分类标题;\\n\\n                let title = pdfh(item, _大类标题);\\n                if (typeof (排除) != 'undefined' && 排除 != '') {\\n                    title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                }\\n                let params = {\\n                    cate_temp: cate_temp, key: key, page: page, clears: 清除, state: 状态, allclears: 全清\\n                }\\n\\n                let url = pd(item, _大类链接);\\n                if (大类处理) {\\n                    //log(一级分类处理)\\n                    //log($.stringify(一级分类处理))\\n                    let input = url;\\n                    eval(\\\"result = \\\" + 一级分类处理);\\n                    //log(result)\\n                    url = result;\\n                }\\n                items.push({\\n                    title: setTitle(key.toString(), cate_temp[index], title),\\n                    col_type: 'scroll_button',\\n                    url: $(url + '#noLoading#').lazyRule((params) => {\\n                        let new_cate = [];\\n                        params.clears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n                        params.allclears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n\\n                        params.cate_temp.forEach((cate, index) => {\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\")\\n                        })\\n                        putMyVar(\\\"head.cate\\\", JSON.stringify(new_cate));\\n                        putMyVar(params.state, input);\\n                        refreshPage(true);\\n                        return \\\"hiker://empty\\\";\\n                    }, params)\\n                });\\n            });\\n            items.push({\\n                col_type: \\\"blank_block\\\",\\n                extra: {\\n                    id: MY_RULE.title + 'cate_line',\\n                }\\n            })\\n        } else {\\n            sub_categories.forEach((item, key) => {\\n                var extrapos = false;\\n                if (item.includes('type=\\\"@extra\\\"')) {\\n                    extrapos = true;\\n                    //log('附加定位')\\n                }\\n\\n                if (extrapos) {\\n                    var title = pdfh(item, 'a&&Text');\\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\\n                        title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                    }\\n                    var json = {\\n                        type: pdfh(item, 'a&&state'),\\n                        value: pdfh(item, 'a&&value'),\\n                    }\\n                } else {\\n\\n                    var title = pdfh(item, 分类标题);\\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\\n                        title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                    }\\n\\n                    var json = '';\\n                    switch (true) {\\n                        case 分类链接.includes('@@@'):\\n                            json = {\\n                                type: pdfh(item, 分类链接.split('@@@')[0]),\\n                                value: pdfh(item, 分类链接.split('@@@')[1]),\\n                            }\\n                            break;\\n                        case 分类链接.includes('@@'):\\n                            json = {\\n                                type: 分类链接.split('@@')[0],\\n                                value: pdfh(item, 分类链接.split('@@')[1]),\\n                            }\\n                            break;\\n                        default:\\n                            json = pd(item, 分类链接);\\n                            break;\\n                    }\\n                    /*var json=分类链接.includes('@@@')?{\\n                         type:pdfh(item,分类链接.split('@@@')[0]),\\n                         value:pdfh(item,分类链接.split('@@@')[1]),\\n                     }:pd(item,分类链接);\\n                     \\n                     json=分类链接.includes('@@')?{\\n                         type:分类链接.split('@@')[0],\\n                         value:pdfh(item,分类链接.split('@@')[1]),\\n                     }:pd(item,分类链接);*/\\n\\n                }\\n\\n                let params = {\\n                    cate_temp: cate_temp, index: index, key: key, page: page, json: json, state: 状态, allclears: 全清\\n                }\\n                cates.push({\\n                    title: setTitle(key.toString(), cate_temp[index], title),\\n                    url: $('hiker://empty' + '#noLoading#').lazyRule((params) => {\\n                        params.allclears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n                        params.cate_temp[params.index] = params.key.toString();\\n                        putMyVar(\\\"head.cate\\\", JSON.stringify(params.cate_temp));\\n                        if (params.json.constructor === Object) {\\n                            putMyVar('dt_' + params.json.type, params.json.value);\\n                        } else {\\n                            putMyVar(params.state, params.json);\\n                        }\\n                        refreshPage(true);\\n                        return \\\"hiker://empty\\\";\\n                    }, params),\\n                    col_type: 'scroll_button',\\n                    extra: {\\n                        cls: MY_RULE.title + 'cate_button',\\n                    }\\n                });\\n            });\\n            cates.push({\\n                col_type: \\\"blank_block\\\",\\n                extra: {\\n                    cls: MY_RULE.title + 'cate_button',\\n                }\\n            });\\n        }\\n    })\\n}\\n\\n\\nif (fold === \\\"1\\\" || 折叠状态 == false) {\\n    items = items.concat(cates);\\n}\\nif (fold === \\\"0\\\") {\\n    storage0.putMyVar('cate_button', cates)\\n}\\nif (typeof setPreResult != 'undefined') {\\n    items = d.concat(items);\\n    //清空继承数组\\n    d.length = 0;\\n    setPreResult(items);\\n} else {\\n    items.forEach(item => {\\n        d.push(item);\\n    })\\n}\\n\"},{\"col_type\":\"flex_button\",\"name\":\"定位二级2\",\"path\":\"erji2\",\"rule\":\"d.push({\\n    col_type: \\\"blank_block\\\"\\n})\\nvar name = getPageTitle()\\nif(typeof(云盘)!=\\\"undefined\\\"){\\nd.push({\\n    title: \\\"云盘君\\\",\\n    url: \\\"hiker://page/sou#noRecordHistory##noHistory#?rule=云盘君.简\\\",\\n    img: \\\"http://123.56.105.145/tubiao/ke/25.png\\\",\\n    col_type: \\\"icon_2_round\\\",\\n    extra: {\\n        searchTerms: name\\n    }\\n});\\nvar qlist = JSON.parse(fetch(\\\"hiker://files/data/聚阅√/quark.txt\\\") || {});\\nif (qlist[name]) {\\n    var click = [{\\n        title: \\\"更换\\\",\\n        js: $.toString((name) => {\\n            return $(\\\"{{clipboard}}\\\").input((name) => {\\n                var qlist = JSON.parse(fetch(\\\"hiker://files/data/聚阅√/quark.txt\\\") || {});\\n\\n                qlist[name] = input\\n\\n                writeFile(\\\"hiker://files/data/聚阅√/quark.txt\\\", JSON.stringify(qlist));\\n                refreshPage()\\n\\n                return \\\"toast://已保存\\\"\\n\\n            }, name)\\n        }, name)\\n    }]\\n    try {\\n        var qext = JSON.parse(qlist[name])\\n        qext['longClick'] = click\\n        qext['pageTitle'] = MY_PARAMS.name;\\n        var qurl = \\\"hiker://page/quarkList#noRecordHistory#?rule=Quark.简&page=fypage\\\"\\n    } catch (e) {\\n        qext = {\\n            longClick: click,\\n            pageTitle: name\\n        };\\n        qurl = \\\"hiker://page/quarkList#noRecordHistory#?rule=Quark.简&realurl=\\\" + encodeURIComponent(qlist[MY_PARAMS.name]) + \\\"&sharePwd=\\\";\\n\\n    }\\n    d.push({\\n        title: '夸克网盘',\\n        url: qurl,\\n        extra: qext,\\n        img: \\\"http://pic.7273.com/upload/2022-6/20226131744447587.png\\\",\\n        col_type: \\\"icon_2_round\\\"\\n    })\\n} else {\\n    d.push({\\n        title: \\\"添加资源\\\",\\n        col_type: \\\"icon_2_round\\\",\\n        img: \\\"http://123.56.105.145/tubiao/system/124.png\\\",\\n        url: $(\\\"{{clipboard}}\\\").input((name) => {\\n            var qlist = JSON.parse(fetch(\\\"hiker://files/data/聚阅√/quark.txt\\\") || {});\\n\\n            qlist[name] = input\\n\\n            writeFile(\\\"hiker://files/data/聚阅√/quark.txt\\\", JSON.stringify(qlist));\\n            refreshPage()\\n\\n            return \\\"toast://已保存\\\"\\n\\n        },name),\\n\\n    })\\n}\\n\\n}\\nd.push({\\n    col_type: \\\"blank_block\\\"\\n})\\n\\n\\n\\n\\n\\naddListener(\\\"onClose\\\", $.toString(() => {\\n    clearMyVar(\\\"lists\\\");\\n}));\\nstorage0.putMyVar(\\\"lists\\\", lists);\\nvar list = lists[getMyVar(MY_URL, '0')];\\nvar 排序 = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\nvar 提示 = 排序 == '#FF0000\\\">倒序' ? '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\nvar 排序名 = '““””<b><span style=\\\"color:排序</span></b>';\\n\\nd.push({\\n    title: '““””<b><span style=\\\"color: ' + 排序 + '</span></b>',\\n    url: $(\\\"#noLoading#\\\").lazyRule((tabs, 排序名, lazy, d, TV推送) => {\\n        var lists = storage0.getMyVar(\\\"lists\\\");\\n        var 章节 = lists[getMyVar(MY_URL, '0')];\\n        var 排序 = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\n        var 提示 = 排序 == '#FF0000\\\">倒序' ? '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\n        updateItem({\\n            extra: {\\n                id: MY_URL + \\\"_排序\\\",\\n                longClick: [{\\n                    title: \\\"TVbox推送\\\",\\n                    js: TV推送(tabs, lists, d)\\n                }]\\n            },\\n            title: 排序名.replace('排序', 提示)\\n        });\\n        if (排序 == '#1aad19\\\">正序') {\\n            章节.reverse();\\n        }\\n        let cp = 章节.map((data, ssid) => ({\\n            title: data.title,\\n            url:  data.url + lazy,\\n            col_type: 章节.length > 3 ? 'text_4' : 'text_2',\\n            extra: {\\n                cls: MY_URL + \\\"_选集\\\",\\n                id: data.url\\n            }\\n        }));\\n        deleteItemByCls(MY_URL + \\\"_选集\\\");\\n        addItemBefore(MY_URL + \\\"footer\\\", cp);\\n        putMyVar(MY_URL + \\\"章节排序\\\", 提示);\\n        return \\\"hiker://empty\\\";\\n    }, tabs, 排序名, lazy, d[0], TV推送),\\n    col_type: 'flex_button',\\n    extra: {\\n        id: MY_URL + \\\"_排序\\\",\\n        longClick: [{\\n            title: \\\"TVbox推送\\\",\\n            js: TV推送(tabs, lists, d[0])\\n        }]\\n    }\\n});\\n\\nfunction TV推送(tabs, lists, d) {\\n    return $.toString((tabs, lists, d) => {\\n        var 推送 = {\\n            \\\"name\\\": getPageTitle(),\\n            \\\"content\\\": d.desc,\\n            \\\"pic\\\": d.img || d.pic_url,\\n            \\\"from\\\": tabs.join('$$$'),\\n            \\\"url\\\": storage0.getMyVar(\\\"lists\\\").map(li => li.map(data => data.title + '$' +data.url).join('#')).join('$$$')\\n        };\\n        return \\\"hiker://page/push?rule=XYQ推送&pushurl=\\\" + encodeURIComponent(JSON.stringify(推送));\\n    }, tabs, lists, d);\\n}\\n\\ntabs.forEach((data, id) => {\\n    d.push({\\n        title: getMyVar(MY_URL, '0') == id ? `““${data}””` : data,\\n        url: $(\\\"#noLoading#\\\").lazyRule((线路, lazy, id) => {\\n            var lists = storage0.getMyVar(\\\"lists\\\");\\n            var 排序 = getMyVar(MY_URL + \\\"章节排序\\\", '#1aad19\\\">正序');\\n            var 提示 = 排序 == '#FF0000\\\">倒序' ? '#1aad19\\\">正序' : '#FF0000\\\">倒序';\\n            线路.forEach((data, xlid) => {\\n                updateItem({\\n                    title: id == xlid ? `““${data}””` : data,\\n                    extra: {\\n                        id: MY_URL + \\\"_线路\\\" + xlid\\n                    }\\n                });\\n            })\\n            putMyVar(MY_URL, id)\\n            var 章节 = lists[getMyVar(MY_URL, '0')];\\n            if (排序 == '#FF0000\\\">倒序') {\\n                章节.reverse()\\n            }\\n            let cp = 章节.map((data, ssid) => {\\n                return {\\n                    title: data.title,\\n                    url: data.url+ lazy,\\n                    col_type: 章节.length > 3 ? 'text_4' : 'text_2',\\n                    extra: {\\n                        cls: MY_URL + \\\"_选集\\\",\\n                        id: data.url\\n                    }\\n                };\\n            });\\n            deleteItemByCls(MY_URL + \\\"_选集\\\");\\n            addItemBefore(MY_URL + \\\"footer\\\", cp);\\n            return \\\"hiker://empty\\\"\\n        }, tabs, lazy, id),\\n        col_type: 'flex_button',\\n        extra: {\\n            id: MY_URL + \\\"_线路\\\" + id\\n        }\\n    });\\n})\\n\\nif (排序 == '#FF0000\\\">倒序') {\\n    list.reverse()\\n}\\nlist.forEach((data, id) => {\\n    d.push({\\n        title: data.title,\\n        url: data.url+ lazy,\\n        col_type: list.length > 3 ? 'text_4' : 'text_2',\\n        extra: {\\n            cls: MY_URL + \\\"_选集\\\",\\n            id: data.url\\n        }\\n    });\\n})\\n\\n\\nd.push({\\n    col_type: \\\"big_blank_block\\\",\\n    extra: {\\n        id: MY_URL + \\\"footer\\\"\\n    }\\n});\"},{\"col_type\":\"movie_3\",\"name\":\"选集\",\"path\":\"details\",\"rule\":\"surl = MY_URL\\nvar d=[]\\npic = details.img || \\\"https://p1.ssl.qhimgs1.com/sdr/400__/t018d6e64991221597b.jpg\\\";\\npic = pic && pic.indexOf(\\\"@Referer=\\\") == -1 ? pic + \\\"@Referer=\\\" : pic;\\n\\nd.push({\\n    title: details.detail1 || \\\"\\\",\\n    desc: details.detail2 || \\\"\\\",\\n    pic_url: details.img,\\n    url: details.detailurl || (/^http/.test(MY_URL) ? MY_URL + '#noRecordHistory##noHistory#' : details.img),\\n    col_type: 'movie_1_vertical_pic_blur',\\n    extra: {\\n        gradient: true\\n    }\\n})\\nvar sname = MY_RULE.title;\\nvar stype = \\\"影视\\\"\\n\\nvar name = getPageTitle()\\nvar desc = details.desc\\n\\nfunction setDesc(d, desc, num) {\\n    //log(desc)\\n    if (desc == undefined) {\\n        return;\\n    }\\n    desc = desc.constructor == Array ? desc.join('<br>') : desc;\\n    if (desc.replace(/(<br>|\\\\s+|<\\\\/?p>|&nbsp;)/g, '').length == 0) {\\n        return;\\n    }\\n    const mark = 'desc';\\n    num = typeof(num) == 'undefined' ? 100 : num\\n    desc = desc.startsWith('　　') ? desc : '　　' + desc;\\n    desc = desc.replace(/'/g, \\\"&#39;\\\");\\n    desc = desc.replace(/\\\\r\\\\n/g, \\\"<br>\\\");\\n    desc = desc.replace(/\\\\r/g, \\\"<br>\\\");\\n    desc = desc.replace(/\\\\n/g, \\\"<br>\\\");\\n\\n    function substr(str, maxLength) {\\n        let len = 0;\\n        for (let i = 0; i < str.length; i++) {\\n            if (str.charCodeAt(i) > 255) {\\n                len += 2;\\n            } else {\\n                len++;\\n            }\\n            if (len > maxLength) {\\n                return str.slice(0, i) + '...';\\n            }\\n        }\\n        return str;\\n    }\\n    let sdesc = substr(desc, num);\\n    var colors = {\\n        show: \\\"black\\\",\\n        hide: \\\"grey\\\"\\n    }\\n    var lazy = $(`#noLoading#`).lazyRule((dc, sdc, m, cs) => {\\n        var show = storage0.getItem(m, '0');\\n        var title = findItem('desc').title;\\n        var re = /(<\\\\/small><br>.*?>).+/g;\\n        var exp = '展开:';\\n        var ret = '收起:';\\n        if (show == '1') {\\n            updateItem('desc', {\\n                title: title\\n                    .replace(ret, exp)\\n                    .replace(re, '$1' + sdc + '</small>')\\n                    .replace(/(<\\\\/small><br>\\\\<font color=\\\").*?(\\\">)/, '$1' + cs.hide + '$2')\\n            })\\n            storage0.setItem(m, '0');\\n        } else {\\n            updateItem('desc', {\\n                title: title\\n                    .replace(exp, ret)\\n                    .replace(re, '$1' + dc + '</small>')\\n                    .replace(/(<\\\\/small><br>\\\\<font color=\\\").*?(\\\">)/, '$1' + cs.show + '$2')\\n            })\\n            storage0.setItem(m, '1');\\n        }\\n        return `hiker://empty`\\n    }, desc, sdesc, mark, colors)\\n    var sc = storage0.getItem(mark, '0') == '0' ? '展开:' : '收起:';\\n    var dc = storage0.getItem(mark, '0') == '0' ? sdesc : desc;\\n    var cs = storage0.getItem(mark, '0') == '0' ? colors.hide : colors.show;\\n    d.push({\\n        title: '' + '<b><font color=\\\"#098AC1\\\">∷剧情简介\\t</font></b>' + \\\"<small><a style='text-decoration: none;' href='\\\" + lazy + \\\"'>\\\" + sc + '</a></small><br><font color=\\\"' + cs + '\\\">' + `${dc}` + '</small>',\\n        col_type: 'rich_text',\\n        extra: {\\n            id: 'desc',\\n            lineSpacing: 6,\\n            textSize: 15,\\n            lineVisible: true,\\n        }\\n    })\\n}\\n\\nsetDesc(d, details.desc)\\n\\n\\nlineid = parseInt(getMyVar(\\\"SrcJu_\\\" + surl + \\\"_line\\\", \\\"0\\\"));\\npageid = parseInt(getMyVar(\\\"SrcJu_\\\" + surl + \\\"_page\\\", \\\"0\\\"));\\n\\nlet 线路s = [\\\"线路\\\"];\\nlet 列表s = [\\n    []\\n];\\ntry {\\n    线路s = details.line ? details.line : [\\\"线路\\\"];\\n    列表s = details.line ? details.list : [details.list];\\n    if (线路s.length != 列表s.length) {\\n        log('√' + sname + '>源接口返回的线路数' + 线路s.length + '和列表数' + 列表s.length + '不相等');\\n    }\\n} catch (e) {\\n    log('√' + sname + \\\">线路或列表返回数据有误>\\\" + e.message);\\n}\\nif (details.listparse) { //选集列表需要动态解析获取\\n    let 线路选集 = details.listparse(lineid, 线路s[lineid]) || [];\\n    if (线路选集.length > 0) {\\n        列表s[lineid] = 线路选集;\\n    }\\n}\\nif (details.page && details.pageparse) { //网站分页显示列表的，需要动态解析获取\\n    try {\\n        if ((detailsmark && pageid != details.pageid) || (!detailsmark && pageid > 0)) {\\n            let 分页s = details.page;\\n            if (pageid > 分页s.length) {\\n                pageid = 0;\\n            }\\n            let 分页选集 = details.pageparse(分页s[pageid].url);\\n            if ($.type(分页选集) == \\\"array\\\") {\\n                列表s[lineid] = 分页选集;\\n                details.list = details.line ? 列表s : 分页选集;\\n            }\\n        }\\n    } catch (e) {\\n        log('√' + sname + '分页选集处理失败>' + e.message);\\n    }\\n}\\n\\nif (lineid > 列表s.length - 1) {\\n    toast('选择的线路无选集，将显示第1线路');\\n    lineid = 0;\\n}\\n\\nlet 列表 = 列表s[lineid] || [];\\nif (列表.length > 0) {\\n    function checkAndReverseArray(arr) {\\n        const numbers = [];\\n        arr.slice(0, 50).forEach(it => {\\n            const digits = it.title.match(/\\\\d+/);\\n            if (digits) {\\n                numbers.push(parseInt(digits[0]));\\n            }\\n        })\\n\\n        if (numbers.length < 3) {\\n            return arr;\\n        }\\n        let increasingCount = 0;\\n        let decreasingCount = 0;\\n        for (let i = 1; i < numbers.length; i++) {\\n            if (numbers[i] > numbers[i - 1]) {\\n                increasingCount++;\\n            } else if (numbers[i] < numbers[i - 1]) {\\n                decreasingCount++;\\n            }\\n        }\\n        if (increasingCount > decreasingCount) {\\n            return arr;\\n        } else {\\n            return arr.reverse();\\n        }\\n    }\\n    try {\\n        列表 = checkAndReverseArray(列表);\\n    } catch (e) {\\n        //log('√强制修正选集顺序失败>'+e.message)\\n    }\\n}\\nif (getMyVar(sname + 'sort') == '1') {\\n    列表.reverse();\\n}\\n\\nlet line_col_type = getItem('SrcJuLine_col_type', 'scroll_button');\\nlet addmoreitems = 0;\\nif (getItem('extenditems', '1') == \\\"1\\\" && details.moreitems && $.type(details.moreitems) == 'array') {\\n    let moreitems = details.moreitems;\\n    if (moreitems.length > 0) {\\n        moreitems.forEach(item => {\\n            if (item.url != surl) {\\n                \\n                item.extra = item.extra || {};\\n                item.extra['back'] = 1;\\n                item.extra['cls'] = \\\"Juloadlist extendlist\\\";\\n                d.push(item);\\n                addmoreitems = 1;\\n            }\\n        })\\n    }\\n}\\nif (line_col_type == 'scroll_button' && addmoreitems == 0) {\\n    for (let i = 0; i < 10; i++) {\\n        d.push({\\n            col_type: \\\"blank_block\\\"\\n        })\\n    }\\n}\\n\\n\\nd.push({\\n    title: getMyVar(sname + 'sort') == '1' ? `““””<b><span style=\\\"color: #66CCEE\\\">排序⇅</span></b>` : `““””<b><span style=\\\"color: #55AA44\\\">排序⇅</span></b>`,\\n    url: $(\\\"#noLoading#\\\").lazyRule((sname) => {\\n        let 列表 = findItemsByCls('playlist') || [];\\n        if (列表.length == 0) {\\n            return 'toast://未获取到列表'\\n        }\\n        deleteItemByCls('playlist');\\n        if (getMyVar(sname + 'sort') == '1') {\\n            putMyVar(sname + 'sort', '0');\\n            updateItem('listsort', {\\n                title: `““””<b><span style=\\\"color: #55AA44\\\">排序⇅</span></b>`\\n            });\\n        } else {\\n            putMyVar(sname + 'sort', '1')\\n            updateItem('listsort', {\\n                title: `““””<b><span style=\\\"color: #66CCEE\\\">排序⇅</span></b>`\\n            });\\n        };\\n        列表.reverse();\\n        列表.forEach(item => {\\n            item.col_type = item.type;\\n        })\\n\\n        addItemBefore(getMyVar('二级加载扩展列表') ? \\\"extendlist\\\" : getMyVar('换源变更列表id') ? \\\"Julistloading2\\\" : \\\"Julistloading\\\", 列表); //排序和样式动态处理插入列表时查找id\\n        return 'toast://切换排序成功'\\n    }, sname),\\n    col_type: line_col_type,\\n    extra: {\\n        id: \\\"listsort\\\",\\n        cls: \\\"Juloadlist\\\"\\n    }\\n})\\nlet reviseLiTitle = getItem('reviseLiTitle', '0');\\nd.push({\\n    title: `““””<b><span style=\\\"color: #f47983\\\">样式<small>🎨</small></span></b>`,\\n    url: $([\\\"text_1\\\", \\\"text_2\\\", \\\"text_3\\\", \\\"text_4\\\", \\\"flex_button\\\", \\\"movie_2\\\", \\\"avatar\\\", \\\"分页设置\\\"], 2, \\\"选集列表样式\\\").select(() => {\\n        if (input == \\\"分页设置\\\") {\\n            return $([\\\"开启分页\\\", \\\"关闭分页\\\", \\\"每页数量\\\", \\\"分页阀值\\\"], 2).select(() => {\\n                let partpage = storage0.getItem('partpage') || {};\\n                if (input == \\\"开启分页\\\") {\\n                    partpage.ispage = 1;\\n                    storage0.setItem('partpage', partpage);\\n                } else if (input == \\\"关闭分页\\\") {\\n                    partpage.ispage = 0;\\n                    storage0.setItem('partpage', partpage);\\n                } else if (input == \\\"每页数量\\\") {\\n                    return $(partpage.pagenum || \\\"40\\\", \\\"每页选集数量\\\").input((partpage) => {\\n                        partpage.pagenum = parseInt(input);\\n                        storage0.setItem('partpage', partpage);\\n                        refreshPage(false);\\n                        return 'hiker://empty'\\n                    }, partpage)\\n                } else if (input == \\\"分页阀值\\\") {\\n                    return $(partpage.partnum || \\\"100\\\", \\\"选集数量超过多少才分页\\\").input((partpage) => {\\n                        partpage.partnum = parseInt(input);\\n                        storage0.setItem('partpage', partpage);\\n                        refreshPage(false);\\n                        return 'hiker://empty'\\n                    }, partpage)\\n                }\\n                refreshPage(false);\\n                return 'hiker://empty'\\n            })\\n        } else {\\n            let 列表 = findItemsByCls('playlist') || [];\\n            if (列表.length == 0) {\\n                return 'toast://未获取到列表'\\n            }\\n            deleteItemByCls('playlist');\\n            let list_col_type = input;\\n            列表.forEach(item => {\\n                item.col_type = list_col_type.replace(\\\"_left\\\", \\\"\\\");\\n                if (list_col_type.indexOf(\\\"_left\\\") > -1) {\\n                    item.extra.textAlign = 'left';\\n                } else {\\n                    delete item.extra.textAlign;\\n                }\\n            })\\n            addItemBefore(getMyVar('二级加载扩展列表') ? \\\"extendlist\\\" : getMyVar('换源变更列表id') ? \\\"Julistloading2\\\" : \\\"Julistloading\\\", 列表);\\n            setItem('SrcJuList_col_type', input);\\n            return 'hiker://empty'\\n        }\\n    }),\\n    col_type: line_col_type,\\n    extra: {\\n        cls: \\\"Juloadlist\\\",\\n        longClick: [{\\n            title: \\\"修正选集标题：\\\" + (reviseLiTitle == \\\"1\\\" ? \\\"是\\\" : \\\"否\\\"),\\n            js: $.toString(() => {\\n                let sm;\\n                if (getItem('reviseLiTitle', '0') == \\\"1\\\") {\\n                    clearItem('reviseLiTitle');\\n                    sm = \\\"取消修正选集标题名称\\\";\\n                } else {\\n                    setItem('reviseLiTitle', '1');\\n                    sm = \\\"统一修正选集标题名称\\\";\\n                }\\n                refreshPage(false);\\n                return \\\"toast://\\\" + sm;\\n            })\\n        }, {\\n            title: \\\"显示扩展项：\\\" + (getItem('extenditems', '1') == \\\"1\\\" ? \\\"是\\\" : \\\"否\\\"),\\n            js: $.toString(() => {\\n                let sm;\\n                if (getItem('extenditems', '1') == \\\"1\\\") {\\n                    setItem('extenditems', '0');\\n                    sm = \\\"取消显示二级扩展项\\\";\\n                } else {\\n                    clearItem('extenditems');\\n                    sm = \\\"显示二级扩展项\\\";\\n                }\\n                refreshPage(false);\\n                return \\\"toast://\\\" + sm;\\n            })\\n        }, {\\n            title: \\\"线路样式：\\\" + getItem('SrcJuLine_col_type', 'scroll_button'),\\n            js: $.toString(() => {\\n                let sm;\\n                if (getItem('SrcJuLine_col_type', 'scroll_button') == \\\"flex_button\\\") {\\n                    clearItem('SrcJuLine_col_type');\\n                    sm = \\\"线路样式已切换为scroll_button\\\";\\n                } else {\\n                    setItem('SrcJuLine_col_type', 'flex_button');\\n                    sm = \\\"线路样式已切换为flex_button\\\";\\n                }\\n                refreshPage(false);\\n                return \\\"toast://\\\" + sm;\\n            })\\n        }]\\n    }\\n})\\n\\nif (线路s.length > 0 && 线路s[0] != \\\"线路\\\") {\\n    线路s.forEach((it, i) => {\\n        d.push({\\n            title: lineid == i ? `““””<b><span style=\\\"color: #04B45F\\\">` + it + `</span></b>` : it,\\n            url: $(\\\"#noLoading#\\\").lazyRule((lineurl, nowid, newid) => {\\n                if (nowid != newid) {\\n                    putMyVar(lineurl, newid);\\n                    refreshPage(false);\\n                }\\n                return 'hiker://empty'\\n            }, \\\"SrcJu_\\\" + surl + \\\"_line\\\", lineid, i),\\n            col_type: line_col_type,\\n            extra: {\\n                cls: \\\"Juloadlist\\\"\\n            }\\n        })\\n    })\\n}\\n//分页定义\\nlet partpage = storage0.getItem('partpage') || {};\\nif (details.page && details.pageparse) { //原网站有分页，不执行自定义分页\\n    let 分页s = details.page\\n    let 分页链接 = [];\\n    let 分页名 = [];\\n    分页s.forEach((it, i) => {\\n        分页链接.push($(\\\"#noLoading#\\\").lazyRule((pageurl, nowid, newid) => {\\n            if (nowid != newid) {\\n                putMyVar(pageurl, newid);\\n                refreshPage(false);\\n            }\\n            return 'hiker://empty'\\n        }, \\\"SrcJu_\\\" + surl + \\\"_page\\\", pageid, i))\\n        分页名.push(pageid == i ? '““””<span style=\\\"color: #87CEFA\\\">' + it.title : it.title)\\n    })\\n    if (分页名.length > 0) {\\n        d.push({\\n            col_type: \\\"blank_block\\\",\\n            extra: {\\n                cls: \\\"Juloadlist\\\"\\n            }\\n        });\\n        d.push({\\n            title: pageid == 0 ? \\\"↪️尾页\\\" : \\\"⏮️上页\\\",\\n            url: pageid == 0 ? 分页链接[分页名.length - 1] : 分页链接[pageid - 1],\\n            col_type: 'text_4',\\n            extra: {\\n                cls: \\\"Juloadlist\\\"\\n            }\\n        })\\n        d.push({\\n            title: 分页名[pageid],\\n            url: $(分页名, 2).select((分页名, 分页链接) => {\\n                return 分页链接[分页名.indexOf(input)];\\n            }, 分页名, 分页链接),\\n            col_type: 'text_2',\\n            extra: {\\n                cls: \\\"Juloadlist\\\"\\n            }\\n        })\\n        d.push({\\n            title: pageid == 分页名.length - 1 ? \\\"首页↩️\\\" : \\\"下页⏭️\\\",\\n            url: pageid == 分页名.length - 1 ? 分页链接[0] : 分页链接[pageid + 1],\\n            col_type: 'text_4',\\n            extra: {\\n                cls: \\\"Juloadlist\\\"\\n            }\\n        })\\n    }\\n} else if (partpage.ispage) { //启用分页\\n    let 每页数量 = partpage.pagenum || 40; // 分页的每页数量       \\n    let 翻页阀值 = partpage.partnum || 100; // 分页的翻页阀值，超过多少才显示翻页\\n\\n    if (列表.length > 翻页阀值) {\\n        let 最大页数 = Math.ceil(列表.length / 每页数量);\\n        let 分页页码 = pageid + 1; //当前页数\\n        if (分页页码 > 最大页数) { //防止切换线路导致页数数组越界\\n            分页页码 = 最大页数;\\n        }\\n        let 分页链接 = [];\\n        let 分页名 = [];\\n\\n        function getNewArray(array, subGroupLength) {\\n            let index = 0;\\n            let newArray = [];\\n            while (index < array.length) {\\n                newArray.push(array.slice(index, index += subGroupLength));\\n            }\\n            return newArray;\\n        }\\n        let 分页s = getNewArray(列表, 每页数量); //按每页数据切割成小数组\\n\\n        分页s.forEach((it, i) => {\\n            分页链接.push($(\\\"#noLoading#\\\").lazyRule((pageurl, nowid, newid) => {\\n                if (nowid != newid) {\\n                    putMyVar(pageurl, newid);\\n                    refreshPage(false);\\n                }\\n                return 'hiker://empty'\\n            }, \\\"SrcJu_\\\" + surl + \\\"_page\\\", pageid, i))\\n            let start = i * 每页数量 + 1;\\n            let end = i * 每页数量 + it.length;\\n            let title = start + ' - ' + end;\\n            分页名.push(pageid == i ? '““””<span style=\\\"color: #87CEFA\\\">' + title : title)\\n        })\\n        d.push({\\n            col_type: \\\"blank_block\\\",\\n            extra: {\\n                cls: \\\"Juloadlist\\\"\\n            }\\n        });\\n        d.push({\\n            title: 分页页码 == 1 ? \\\"↪️尾页\\\" : \\\"⏮️上页\\\",\\n            url: 分页页码 == 1 ? 分页链接[分页名.length - 1] : 分页链接[pageid - 1],\\n            col_type: 'text_4',\\n            extra: {\\n                cls: \\\"Juloadlist\\\"\\n            }\\n        })\\n        d.push({\\n            title: 分页名[pageid],\\n            url: $(分页名, 2).select((分页名, 分页链接) => {\\n                return 分页链接[分页名.indexOf(input)];\\n            }, 分页名, 分页链接),\\n            col_type: 'text_2',\\n            extra: {\\n                cls: \\\"Juloadlist\\\"\\n            }\\n        })\\n        d.push({\\n            title: 分页页码 == 分页名.length ? \\\"首页↩️\\\" : \\\"下页⏭️\\\",\\n            url: 分页页码 == 分页名.length ? 分页链接[0] : 分页链接[pageid + 1],\\n            col_type: 'text_4',\\n            extra: {\\n                cls: \\\"Juloadlist\\\"\\n            }\\n        })\\n        列表 = 分页s[pageid]; //取当前分页的选集列表\\n    }\\n}\\n\\nlet list_col_type = getItem('SrcJuList_col_type', 'text_2'); //列表样式\\nfor (let i = 0; i < 列表.length; i++) {\\n    let extra = Object.assign({}, details[\\\"extra\\\"] || {}); //二级返回数据中的extra设为默认\\n    try {\\n        extra = Object.assign(extra, 列表[i].extra || {}); //优先用选集的extra\\n    } catch (e) {}\\n\\n    extra.id = name + \\\"_选集_\\\" + (pageid ? pageid + \\\"_\\\" : \\\"\\\") + i;\\n    extra.cls = \\\"Juloadlist playlist\\\";\\n    if (stype == \\\"听书\\\" || stype == \\\"影视\\\" || stype == \\\"音乐\\\") {\\n        extra.jsLoadingInject = true;\\n        if (!extra.blockRules) {\\n            extra.blockRules = ['.m4a', '.mp3', '.gif', '.jpeg', '.jpg', '.ico', '.png', 'hm.baidu.com', '/ads/*.js', 'cnzz.com', '51.la'];\\n        }\\n    }\\n\\n    if (list_col_type.indexOf(\\\"_left\\\") > -1) {\\n        extra.textAlign = 'left';\\n    }\\n    if (stype == \\\"小说\\\" || details[\\\"rule\\\"] || details[\\\"novel\\\"] || 列表[i].rule) {\\n        extra.url = 列表[i].url;\\n        lazy = lazy.replace(\\\"@lazyRule=.\\\", ((stype == \\\"小说\\\" || details[\\\"novel\\\"]) ? \\\"#readTheme##autoPage#\\\" : \\\"#noRecordHistory#\\\") + \\\"@rule=\\\").replace(`input.split(\\\"##\\\")[1]`, `MY_PARAMS.url || \\\"\\\"`);\\n    }\\n    d.push({\\n        title: reviseLiTitle == \\\"1\\\" ? 列表[i].title.replace(name, '').replace(/‘|’|“|”|<[^>]+>| |-|_|第|集|话|章|\\\\</g, '').replace('（', '(').replace('）', ')') : 列表[i].title,\\n        url: 列表[i].url + lazy,\\n        desc: 列表[i].desc,\\n        img: 列表[i].img,\\n        col_type: 列表[i].col_type || list_col_type.replace(\\\"_left\\\", \\\"\\\"),\\n        extra: extra\\n    });\\n\\n}\\n\\nif (getItem('extenditems', '1') == \\\"1\\\" && details.extenditems && $.type(details.extenditems) == 'array') {\\n    let extenditems = details.extenditems;\\n    if (extenditems.length > 0) {\\n        d.push({\\n            col_type: \\\"blank_block\\\",\\n            extra: {\\n                cls: \\\"Juloadlist extendlist\\\",\\n                id: \\\"extendlist\\\"\\n            }\\n        })\\n        extenditems.forEach(item => {\\n            if (item.url != surl) {\\n               \\n                item.extra = item.extra || {};\\n                item.extra['back'] = 1;\\n                item.extra['cls'] = \\\"Juloadlist extendlist\\\";\\n                d.push(item)\\n            }\\n        })\\n    }\\n}\\nd.push({\\n    title: \\\"‘‘’’<small><font color=#f20c00>当前数据源：\\\" + sname + \\\"</font></small>\\\",\\n    url: 'hiker://empty',\\n    col_type: 'text_center_1',\\n    extra: {\\n        id: getMyVar('换源变更列表id') ? \\\"Julistloading2\\\" : \\\"Julistloading\\\",\\n        lineVisible: false\\n    }\\n});\\n\\nsetResult(d)\"}]","proxy":"","icon":"http://q1.qlogo.cn/g?b=qq&nk=569617079&s=640"}