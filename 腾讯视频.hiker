{"firstHeader":"class","last_chapter_rule":"js:\n//log(MY_URL)\nvar cid = MY_URL.split('#')[1];\nvar vid = MY_URL.split('#')[2];\n//log(cid)\n//log(vid)\nconst ejUrl = \"https://pbaccess.video.qq.com/trpc.universal_backend_service.page_server_rpc.PageServer/GetPageData?video_appid=3000010&vplatform=2\";\nvar info_fetchData = JSON.parse(fetchPC(ejUrl, {\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"referer\": \"https://v.qq.com/\",\n        \"Cookie\": \"video_platform=2;vversion_name=8.2.96\"\n    },\n    method: \"POST\",\n    body: {\n        \"page_params\": {\n            \"req_from\": \"web\",\n            \"cid\": (cid ? cid : \"\"),\n            \"vid\": vid,\n            \"lid\": \"\",\n            \"page_type\": \"detail_operation\",\n            \"page_id\": \"detail_page_introduction\"\n        },\n        \"has_cache\": 1\n    }\n}));\n//log(info_fetchData)\nvar info_Json = info_fetchData.data.module_list_datas[0].module_datas[0].item_data_lists.item_datas[0];\n//log(info_Json)\nvar item_params = info_Json.item_params; //影视信息\nvar update_notify_desc = item_params.detail_info ? pdfh(item_params.detail_info,\"Text\") : item_params.update_notify_desc;\nsetResult(update_notify_desc);\n","pageList":[{"col_type":"movie_3","name":"动态分类","path":"dt","rule":"var getRangeColors = function() {       \n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);     \n}\nconst empty = \"hiker://empty\";\nconst 分类颜色 = getRangeColors();\nvar categories = SCates;\n//log(categories)\nlet init_cate = []\nfor (let i = 0; i < 20; i++) {\n    init_cate.push(\"0\")\n}\nconst fold = getMyVar('header.group', \"0\")\nconst cate_temp_json = getMyVar('header.category', JSON.stringify(init_cate))\nconst cate_temp = JSON.parse(cate_temp_json)\n\nif (parseInt(page) === 1) {\n    /*\n    d.push({\n        title: \"🔍\",\n        url: $.toString(() => {\n            putMyVar(\"Mykey\", input);\n            refreshPage(true)\n        }),\n           desc: \"搜你想看的影视、剧集、动漫等...\",\n           col_type: \"input\",\n        extra: {\n            defaultValue: getMyVar(\"Mykey\")\n        }\n    });\n    */\n\n    d.push({\n        title: fold === '1' ? '““””<b><span style=\"color: #19B89D\">: (</span></b>' : '““””<b><span style=\"color: #910113\">: )</span></b>',\n        url: $('#noLoading#').lazyRule((fold) => {\n            putMyVar('header.group', fold === '1' ? '0' : '1');\n            refreshPage(false);\n            return \"hiker://empty\"\n        }, fold),\n        col_type: 'scroll_button',\n    })\n\n    //log(categories.length)\n    categories.forEach((category, index) => {\n        //log(category)\n        let class_key = category.filter_key;\n        let sub_categories = category.items;\n        //log(sub_categories)    \n        if (index === 0) {\n            //log(class_key)\n            sub_categories.forEach((item, key) => {\n                let title = item.params.option_name;\n                let op_value = item.params.option_value;\n                if (getMyVar(class_key)) {               \n                    title = getMyVar(class_key) == op_value ? '““””<b><span style=\"color: ' + 分类颜色 + '\">' + title + '</span></b>' : title;\n                } else {\n                    title = key.toString() === cate_temp[index] ? '““””<b><span style=\"color: ' + 分类颜色 + '\">' + title + '</span></b>' : title;\n                }\n                d.push({\n                    title: title,\n                    url: $(op_value + '#noLoading#').lazyRule((params) => {\n                        let new_cate = []\n                        params.cate_temp.forEach((cate, index) => {\n                            new_cate.push(index === 0 ? params.key.toString() : \"0\")\n                        });\n\n                        for (let i = 0; i < params.Sfilter_key.length; i++) {\n                            clearMyVar(params.Sfilter_key[i])\n                        }\n                        putMyVar('header.category', JSON.stringify(new_cate))\n                        putMyVar(params.class_key, input)\n                        //log(input)\n                        refreshPage(true)\n                        return \"hiker://empty\"\n                    }, {\n                        cate_temp: cate_temp,\n                        key: key,\n                        class_key: class_key,\n                        Sfilter_key: Sfilter_key,\n                        page: page,\n                    }),\n                    col_type: 'scroll_button',\n                })\n            })\n\n            d.push({\n                col_type: \"blank_block\"\n            });\n\n        } else if (fold === '1') {\n            try {\n                sub_categories.forEach((item, key) => {\n                    let title = item.params.option_name;\n                    let op_value = item.params.option_value;\n                    if (getMyVar(class_key)) {\n                        title = getMyVar(class_key) == op_value ? '““””<b><span style=\"color: ' + 分类颜色 + '\">' + title + '</span></b>' : title;\n                    } else {\n                        title = key.toString() === cate_temp[index] ? '““””<b><span style=\"color: ' + 分类颜色 + '\">' + title + '</span></b>' : title;\n                    }\n                    d.push({\n                        title: title,\n                        url: $(op_value + '#noLoading#').lazyRule((params) => {\n                            params.cate_temp[params.index] = params.key.toString()\n                            putMyVar('header.category', JSON.stringify(params.cate_temp))\n                            putMyVar(params.class_key, input)\n                            refreshPage(true)\n                            return \"hiker://empty\"\n                        }, {\n                            cate_temp: cate_temp,\n                            index: index,\n                            key: key,\n                            class_key: class_key,\n                            page: page,\n                        }),\n                        col_type: 'scroll_button',\n                    })\n                })\n            } catch (e) {\n                log(sub_categories)\n                log(e.toString())\n            }\n            d.push({\n                col_type: \"blank_block\"\n            });\n        }\n\n    })\n}"},{"col_type":"movie_3","name":"片库","path":"channel_list_filter","rule":"js:\naddListener('onClose', () => {\n    var Sfilter_key = JSON.parse(getMyVar(\"Sfilter_key\"));\n    for (let i = 0; i < Sfilter_key.length; i++) {\n        clearMyVar(Sfilter_key[i])\n    }\n    clearMyVar(\"Sfilter_key\");\n})\nvar d = [];\nconst page = MY_PAGE;\nlet baseUrl = MY_URL.split(\"##\")[0];\n\nlet page_id = MY_PARAMS.page_id; //#channel_list_second_page\n\nvar filter_value = MY_PARAMS.filter_value;\n\n//分类词定位\nlet option_name = filter_value.split(\"=\")[0];\nlet option_value = filter_value.split(\"=\")[1];\n//log(filter_value)\nfunction secondsToTime(seconds) {\n    var hours = Math.floor(seconds / 3600);\n    var minutes = Math.floor((seconds - (hours * 3600)) / 60);\n    var seconds = seconds - (hours * 3600) - (minutes * 60);\n\n    // round seconds\n    seconds = Math.round(seconds * 100) / 100\n\n    var result = (hours < 10 ? \"0\" + hours : hours);\n    result += \":\" + (minutes < 10 ? \"0\" + minutes : minutes);\n    result += \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n    return result;\n}\n\nlet body = {\n    \"page_context\": {\n        \"page_index\": (page - 1).toString()\n    },\n    \"page_params\": {\n        \"page_id\": page_id || \"channel_list_second_page\",\n        \"page_type\": \"operation\",\n        \"channel_id\": getMyVar(\"channel\"),\n        \"filter_params\": filter_value,\n        \"page\": (page - 1).toString()\n    },\n    \"page_bypass_params\": {\n        \"params\": {\n            \"page_id\": page_id || \"channel_list_second_page\",\n            \"page_type\": \"operation\",\n            \"channel_id\": getMyVar(\"channel\"),\n            \"caller_id\": \"3000010\",\n            \"platform_id\": \"2\",\n            \"data_mode\": \"default\",\n            \"user_mode\": \"default\"\n        },\n        \"scene\": \"operation\",\n        \"abtest_bypass_id\": \"\"\n    }\n};\n\nvar Sfilter_key = getMyVar(\"Sfilter_key\");\n\nif (Sfilter_key) {\n    //log(Sfilter_key)\n    Sfilter_key = JSON.parse(Sfilter_key);\n    for (let i = 0; i < Sfilter_key.length; i++) {\n        if (i == 0) {\n            body.page_params.filter_params = Sfilter_key[i] + \"=\" + getMyVar(Sfilter_key[i], \"-1\");\n        } else {\n            body.page_params.filter_params += \"&\" + Sfilter_key[i] + \"=\" + getMyVar(Sfilter_key[i], \"-1\")\n        }\n    }\n    //log(body.page_params.filter_params)\n}\n//log(body)\nfunction Load_page_view(CardList) {\n    CardList.forEach((item) => {\n        if (item.type == \"channel_list_filter\") {\n            function groupBy(arr, prop) {\n                return arr.reduce(function(groups, item) {\n                    const val = item.params[prop]\n                    groups[val] = groups[val] || []\n                    groups[val].push(item)\n                    return groups\n                }, {})\n            }\n            var fiterObj = groupBy(item.children_list.list.cards, \"filter_key\");\n            //log(gbobj)\n            var SCates = [];\n            var Sfilter_key = [];\n            for (let i in fiterObj) {\n                SCates.push({\n                    \"filter_key\": i,\n                    \"items\": fiterObj[i]\n                });\n                Sfilter_key.push(i);\n            }\n            putMyVar(\"Sfilter_key\", JSON.stringify(Sfilter_key));\n            putMyVar(option_name, option_value);\n            //log(getMyVar(option_name, option_value))\n            //putMyVar('header.category', JSON.stringify(init_cate))\n            eval(JSON.parse(request('hiker://page/dt?rule=腾讯视频')).rule);\n        } else if (item.type == \"channel_list_poster\") {\n            var lists = item.children_list.list.cards;\n            lists.forEach((item) => {\n                //log(item)\n                try {\n                    let pic = item.params.new_pic_vt || item.params.image_url || item.params.new_pic_hz || item.params.image_url_vertical || item.params.pic_540x304 || item.params.pic496x280;\n                    if(/\\.jpg\\//.test(pic)){\n                    let index = pic.lastIndexOf(\"\\/\");\n                    pic = pic.substring(0, index);\n                    }\n                    let des = \"\";\n                    if (item.params.imgtag) {  \n                        if(typeof(item.params.imgtag) === \"object\"){                                             \n                         let imgtag = JSON.parse(item.params.imgtag);\n                         //log(imgtag)                     \n                         des = imgtag.tag_3.text ? imgtag.tag_3.text : imgtag.tag_2.text.split(\"-\")[0]\n                         }else{\n                             des = item.params.imgtag;\n                         }\n                     } else {\n                         des = item.params.timelong || item.params.publish_date || item.params.episode_updated || (item.params.duration ? secondsToTime(item.params.duration) : \"\") || (item.params.cms_isvip == 1 ? \"VIP\" : \"\");\n                     }\n                    let param_cid = \"\";\n                    if (item.params.cid) {\n                        param_cid = item.params.cid;\n                    } else if (item.params.attached_id) {\n                        param_cid = item.params.attached_id;\n                    }\n                    //log(item)\n\n\n\n\n                    d.push({\n                        title: item.params.title,\n                        desc: des,\n                        pic_url: pic,\n                        url: \"hiker://page/ej_page\",\n                        extra: {\nurl: \"hiker://empty$\" + param_cid + \"$\" + (item.params.vid ? item.params.vid : \"\") + \"#immersiveTheme#\"\n }\n                        \n                    })\n                } catch (e) {\n                    log(e.toString())\n                    log(item)\n                }\n            });\n        }\n    });\n}\nif (page == 1) {\n    let fetchData = JSON.parse(fetchPC(baseUrl, {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"referer\": \"https://v.qq.com/\",\n            \"Cookie\": \"video_platform=2\"\n        },\n        method: \"POST\",\n        body: body\n    }));\n    // log(fetchData)\n    let CardList = fetchData.data.CardList;\n    Load_page_view(CardList);\n    let has_next_page = fetchData.data.has_next_page;\n    putMyVar(\"fiter_has_next_page\", has_next_page);\n} else if (getMyVar(\"fiter_has_next_page\") == \"true\") {\n    \n    let fetchData = JSON.parse(fetchPC(baseUrl, {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"referer\": \"https://v.qq.com/\",\n            \"Cookie\": \"video_platform=2\"\n        },\n        method: \"POST\",\n        body: body\n    }))\n    //log(homefetchData)\n    let homeCardList = fetchData.data.CardList;\n    let has_next_page = fetchData.data.has_next_page;\n    putMyVar(\"fiter_has_next_page\", has_next_page)\n    Load_page_view(homeCardList)\n}\nsetResult(d)"},{"col_type":"movie_3","name":"二级页面","path":"ej_page","rule":"js:\nvar d = [];\naddListener(\"onClose\", $.toString(() => {\n    clearMyVar(\"jj_state\");\n}))\n\nfunction secondsToTime(seconds) {\n    var hours = Math.floor(seconds / 3600);\n    var minutes = Math.floor((seconds - (hours * 3600)) / 60);\n    var seconds = seconds - (hours * 3600) - (minutes * 60);\n\n    // round seconds\n    seconds = Math.round(seconds * 100) / 100\n\n    var result = (hours < 10 ? \"0\" + hours : hours);\n    result += \":\" + (minutes < 10 ? \"0\" + minutes : minutes);\n    result += \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n    return result;\n}\n//log(MY_URL)\n//log(MY_PARAMS)\nvar cid = MY_URL.split('$')[1];\nvar vid = MY_URL.split('$')[2];\n//log(cid)\n//log(vid)\nconst ejUrl = \"https://pbaccess.video.qq.com/trpc.universal_backend_service.page_server_rpc.PageServer/GetPageData?video_appid=3000010&vplatform=2&vversion_name=8.2.96\";\nvar info_fetchData = JSON.parse(fetchPC(ejUrl, {\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"referer\": \"https://v.qq.com/\",\n        \"Cookie\": \"video_platform=2;vversion_name=8.2.96\"\n    },\n    method: \"POST\",\n    body: {\n        \"page_params\": {\n            \"req_from\": \"web\",\n            \"cid\": (cid ? cid : \"\"),\n            \"vid\": vid,\n            \"lid\": \"\",\n            \"page_type\": \"detail_operation\",\n            \"page_id\": \"detail_page_introduction\"\n        },\n        \"has_cache\": 1\n    }\n}));\n//log(info_fetchData)\nvar info_Json = info_fetchData.data.module_list_datas[0].module_datas[0].item_data_lists.item_datas[0];\n//log(info_Json)\nvar item_params = info_Json.item_params; //影视信息\n//var sub_items = info_Json.sub_items; //演员信息\n\nvar area_name = item_params.area_name ? item_params.area_name : \"未知\";\nvar broadcast_time = item_params.broadcast_time ? item_params.broadcast_time : \"未知\"; //开播时间\nvar update_notify_desc = item_params.update_notify_desc ? item_params.update_notify_desc : \"\";\nvar tag_text = item_params.tag_text ? item_params.tag_text : \"\";\nvar title = item_params.title ? item_params.title : \"\";\nvar detail_info = item_params.detail_info;\n//var director = json.director ? '导演：' + json.director : \"\";\n//var starring = json.starring ? '演员：' + json.starring : (json.shengyou ? '声优：' + json.shengyou : \"\");\nvar main_genres = item_params.main_genres ? item_params.main_genres : '无';\nvar picUrl = (item_params.new_pic_vt ? item_params.new_pic_vt : (item_params.new_pic_hz ? item_params.new_pic_hz : \"\"));\n//选集请求所需参数\n//var episode_all = item_params.episode_all;\n//log(episode_all)\nvar report_lid = item_params[\"report.lid\"];\nvar report_cid = item_params[\"report.cid\"];\n//log(\"report_cid: \"+report_cid)\nif (report_cid) {\n    cid = report_cid;\n}\n\nd.push({\n    title: \"\\t\" + title + '\\t' + tag_text + \"\\n地区: \" + area_name,\n    url: \"hiker://page/Route?rule=MyFieldᴰⁿ&type=设置#noHistory##noRecordHistory#\",\n    col_type: \"movie_1_vertical_pic_blur\",\n    desc: update_notify_desc + \"\\n类型: \" + main_genres + \"\\n开播时间：\" + broadcast_time,\n    pic_url: picUrl ? picUrl : MY_PARAMS.picUrl\n});\n\ntry {\n    let content_desc = item_params.cover_description;\n\n    function funcDesc(d, content_desc) {\n        d.push({\n            title: '影片简介 <small><small><span style=\"color:#19B89D\">展开></span></small></small>',\n            img: \"http://123.56.105.145/tubiao/more/197.png\",\n            url: $(\"#noLoading#\").lazyRule((content_desc) => {\n                if (getMyVar(\"jj_state\", \"收起\") == \"收起\") {\n                    updateItem(\"content_jjid\", {\n                        title: '影片简介 <small><small><span style=\"color:#19B89D\">收起></span></small></small>'\n                    })\n\n                    updateItem(\"content_decid\", {\n                        title: '<span style=\"color:#808080\">' + content_desc + '</span>'\n                    })\n                    putMyVar(\"jj_state\", \"展开\");\n                } else {\n                    updateItem(\"content_jjid\", {\n                        title: '影片简介 <small><small><span style=\"color:#19B89D\">展开></span></small></small>'\n                    })\n\n                    updateItem(\"content_decid\", {\n                        title: '<span style=\"color:#808080\">' + content_desc.substr(0, 50) + '...</span>'\n                    })\n                    putMyVar(\"jj_state\", \"收起\");\n                }\n                return \"hiker://empty\"\n            }, content_desc),\n            col_type: \"avatar\",\n            extra: {\n                id: \"content_jjid\"\n            }\n        });\n        d.push({\n            title: '<span style=\"color:#808080\">' + content_desc.substr(0, 50) + '...</span>',\n            col_type: \"rich_text\",\n            extra: {\n                textSize: 14,\n                lineSpacing: 3,\n                id: \"content_decid\"\n            }\n        });\n        return d\n    }\n    if (content_desc) {\n        funcDesc(d, content_desc);\n    }\n\n} catch (e) {}\nvar lazy = $('').lazyRule(() => {\n    eval(\"var config =\" + fetch(\"hiker://files/cache/MyParseSet.json\"));\n    eval(fetch(config.cj));\n    return aytmParse(input)\n});\nlet tabs = [\"腾讯\"];\nvar play_Lists = [];\nvar episode_lists = [];\nvar pre_lists = [];\nvar page_item_params = [];\n//log(cid)\nif (cid) {\n    var body = {\n        \"page_params\": {\n            \"req_from\": \"web_vsite\",\n            \"page_id\": \"vsite_episode_list\",\n            \"page_type\": \"detail_operation\",\n            \"id_type\": \"1\",\n            \"page_size\": \"\", //可自定义获取数据列表集数，官方默认为空\n            \"cid\": cid,\n            \"vid\": \"\",\n            \"lid\": \"\",\n            \"page_num\": \"\",\n            \"page_context\": \"\",\n            \"detail_page_type\": \"1\"\n        },\n        \"has_cache\": 1\n    }\n    var playlists_fetchData = JSON.parse(fetchPC(ejUrl, {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"referer\": \"https://v.qq.com/\",\n            \"Cookie\": \"video_platform=2;vversion_name=8.2.96\"\n        },\n        method: \"POST\",\n        body: body\n    }));\n    //log(playlists_fetchData)\n    var next_page_context = playlists_fetchData.data.module_list_datas[0].module_datas[0].module_params.next_page_context;\n    var has_next = playlists_fetchData.data.has_next_page;\n\n    //修复官方数据异常问题，有时候has_next虽然为false，但实际有下一页列表数据\n\n    var module_params_tabs = playlists_fetchData.data.module_list_datas[0].module_datas[0].module_params.tabs;\n\n//log(playlists_fetchData.data.module_list_datas[0].module_datas)\n    var list_Json = playlists_fetchData.data.module_list_datas[0].module_datas[0].item_data_lists.item_datas;\n    var pushLists = function(lists) {\n        lists.forEach((item) => {\n            if (item.item_params.page_id) {\n                //多季数据索引表头，暂未实现\n                /*\n                let page_context = item.item_params.page_context;\n                //log(page_context)\n                let param_cid = page_context.match(/cid=(.*?)(&|$)/)[1];\n                //log(\"param_cid: \" + param_cid)\n\n                if (!JSON.stringify(page_item_params).includes(param_cid)) {           \n                    page_item_params.push(item.item_params);\n                   if(item.item_params.selected){\n                       d.push({\n                    title: '‘‘’’<strong><font color=\"#f13b66a\">' + item.item_params.title + '</front></strong>',\n                    url: \"hiker://empty\",\n                    col_type: \"scroll_button\"\n                    })\n                   }else{\n                    d.push({\n                    title: item.item_params.title,\n                    url: \"hiker://page/ej_page\",\n                    col_type: \"scroll_button\",\n                    extra: {\n                        url: \"hiker://empty#\" + param_cid + \"#\" + \"\" + \"#immersiveTheme#\"\n                    }                    \n                    })\n                    }\n                }*/\n                      \n            } else {\n                if (item.item_params.is_no_store_watch_history != 1) {\n                    try {\n                        let pic = item.item_params.image_url ? item.item_params.image_url : item.item_params.pic_new;\n                        let index = pic.lastIndexOf(\"\\/\");\n                        pic = pic.substring(0, index);\n                        episode_lists.push({\n                            title: item.item_params.play_title.split(\" \").slice(-1)[0],\n                            pic_url: pic,\n                            desc: secondsToTime(item.item_params.duration),\n                            url: \"https://v.qq.com/x/cover/\" + (item.item_params.cid ? (item.item_params.cid + \"/\") : \"\") + item.item_params.vid + \".html\" + lazy,\n\n                            col_type: \"movie_2\",\n                            extra: {\n                                id: item.item_params.cid + \"/\" + item.item_params.vid,\n                                cls: 'playList'\n                            }\n                        })\n                    } catch (e) {\n                        log(e.toString())\n                        log(item)\n                    }\n                } else {\n                    try {\n                        let pic = item.item_params.image_url ? item.item_params.image_url : item.item_params.pic_new;\n                        let index = pic.lastIndexOf(\"\\/\");\n                        pic = pic.substring(0, index);\n                        pre_lists.push({\n                            title: item.item_params.union_title,\n                            pic_url: pic,\n                            desc: secondsToTime(item.item_params.duration),\n                            url: \"https://v.qq.com/x/cover/\" + (item.item_params.cid ? (item.item_params.cid + \"/\") : \"\") + item.item_params.vid + \".html\" + lazy,\n\n                            col_type: \"movie_2\",\n                            extra: {\n                                id: item.item_params.cid + \"/\" + item.item_params.vid,\n                                cls: 'playList'\n                            }\n                        })\n                    } catch (e) {\n                        log(e.toString())\n                        log(item)\n                    }\n                }\n            }\n        })\n        /*\n        pre_lists.filter(it => {\n            \n        })*/\n        return\n        //return episode_lists.concat(pre_lists)\n    };\n    pushLists(list_Json)\n    //play_Lists.push(pushLists(list_Json))\n    //log(has_next)\n    //log(typeof(has_next))\n    //log(next_page_context)\n\n    function getNextPageContext(ejUrl, body) {\n        let playlists_fetchData = JSON.parse(fetchPC(ejUrl, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"referer\": \"https://v.qq.com/\",\n                \"Cookie\": \"video_platform=2;vversion_name=8.2.96\"\n            },\n            method: \"POST\",\n            body: body\n        }));\n        return playlists_fetchData;\n    }\n    //log(has_next)\n    while (has_next == true) {\n        body.page_params.page_context = next_page_context;\n        playlists_fetchData = getNextPageContext(ejUrl, body);\n        next_page_context = playlists_fetchData.data.module_list_datas[0].module_datas[0].module_params.next_page_context;\n        has_next = playlists_fetchData.data.has_next_page;\n        list_Json = playlists_fetchData.data.module_list_datas[0].module_datas[0].item_data_lists.item_datas;\n        pushLists(list_Json)\n        //play_Lists.push(pushLists(list_Json))\n    }\n    //log(module_params_tabs)\n    if (has_next == false && module_params_tabs) {        \n        module_params_tabs = JSON.parse(module_params_tabs);\n        //log(module_params_tabs.length)\n        //log(module_params_tabs)\n        for (let i = 1; i < module_params_tabs.length; i++) {\n            body.page_params.page_context = module_params_tabs[i].page_context;\n            playlists_fetchData = getNextPageContext(ejUrl, body);\n            list_Json = playlists_fetchData.data.module_list_datas[0].module_datas[0].item_data_lists.item_datas;\n            pushLists(list_Json);\n        }\n    }\n    play_Lists.push(episode_lists.concat(pre_lists))\n} else {\n    //https://v.qq.com/x/cover/mzc00200l3dp7jj.html //有cid\n    //https://v.qq.com/x/page/f33619wj20q.html  //只有vid\n    play_Lists.push([{\n        title: title,\n        pic_url: MY_PARAMS.picUrl,\n        desc: MY_PARAMS.descr,\n        url: \"https://v.qq.com/x/page/\" + vid + \".html\" + lazy,\n        col_type: \"movie_1_left_pic\",\n        extra: {\n            id: vid,\n            cls: 'playList' //固定批量标签\n        }\n    }])\n}\n//log(play_Lists) //列表对象 多线路格式\neval(JSON.parse(request('hiker://page/ejzj')).rule);\n//log(play_Lists[0].length)\nvar ejobj = {\n    \"list\": play_Lists,\n    \"tab\": tabs\n};\n初始化(d, ejobj)\nsetResult(d);"},{"col_type":"movie_3","name":"二级组件","path":"ejzj","rule":"function funcLoadpage(d, obj) {\n    var funcTools = { //公共方法\n        color: function(text, color) {\n            text += \"\";\n            if (text.indexOf(\"““””\") === 0) {\n                text.replace(\"““””\", \"\");\n            }\n            return \"““””<font color='\" + color + \"'>\" + text + \"</font>\";\n        },\n        htmlTag: function(tag, text) {\n            text += \"\";\n            if (text.indexOf(\"““””\") === 0) {\n                text.replace(\"““””\", \"\");\n            }\n            return \"““””\" + \"<\" + tag + \">\" + text + \"</\" + tag + \">\";\n        },\n        small: function(text) {\n            return this.htmlTag(\"small\", text)         \n            //return \"““””\" + \"<small>\" + text + \"</small>\";\n        },\n        right: function(text) {\n            return '<span style=\"float:right\">' + text + \"</span>\";\n        },\n        blank: function() {\n            return \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\";\n        },\n        getHead: function(title) {\n            return '‘‘’’<strong><font color=\"#f13b66a\">' + title + '</front></strong>';\n        },\n        getbtnsColor: function(text) {\n            return \"““”” <small><small><font color='grey'>\" + text + \"</font> </small></small>\";\n        },\n        ChineseToNumber: function(chinese_number) { //中文转数字\n            var ChineseMap = {\n            \"零\": 0,\n            \"一\": 1,\n            \"壹\": 1,\n            \"二\": 2,\n            \"贰\": 2,\n            \"两\": 2,\n            \"三\": 3,\n            \"叁\": 3,\n            \"四\": 4,\n            \"肆\": 4,\n            \"五\": 5,\n            \"伍\": 5,\n            \"六\": 6,\n            \"陆\": 6,\n            \"七\": 7,\n            \"柒\": 7,\n            \"八\": 8,\n            \"捌\": 8,\n            \"九\": 9,\n            \"玖\": 9,\n            \"十\": 10,\n            \"拾\": 10,\n            \"百\": 100,\n            \"佰\": 100,\n            \"千\": 1000,\n            \"仟\": 1000,\n            \"万\": 10000,\n            \"十万\": 100000,\n            \"百万\": 1000000,\n            \"千万\": 10000000,\n            \"亿\": 100000000\n        };\n            let len = chinese_number.length;\n            if (len === 0) return -1;\n            if (len === 1) return (ChineseMap[chinese_number] <= 10) ? ChineseMap[chinese_number] : -1;\n            let summary = 0;\n            if (ChineseMap[chinese_number[0]] === 10) {\n                chinese_number = \"一\" + chinese_number;\n                len++;\n            }\n            if (len >= 3 && ChineseMap[chinese_number[len - 1]] < 10) {\n                let last_second_num = ChineseMap[chinese_number[len - 2]];\n                if (last_second_num === 100 || last_second_num === 1000 || last_second_num === 10000 || last_second_num === 100000000) {\n                    for (let key in ChineseMap) {\n                        if (ChineseMap[key] === last_second_num / 10) {\n                            chinese_number += key;\n                            len += key.length;\n                            break;\n                        }\n                    }\n                }\n            }\n            if (chinese_number.match(/亿/g) && chinese_number.match(/亿/g).length > 1) return -1;\n            let splited = chinese_number.split(\"亿\");\n            if (splited.length === 2) {\n                let rest = splited[1] === \"\" ? 0 : ChineseToNumber(splited[1]);\n                return summary + ChineseToNumber(splited[0]) * 100000000 + rest;\n            }\n            splited = chinese_number.split(\"万\");\n            if (splited.length === 2) {\n                let rest = splited[1] === \"\" ? 0 : ChineseToNumber(splited[1]);\n                return summary + ChineseToNumber(splited[0]) * 10000 + rest;\n            }\n            let i = 0;\n            while (i < len) {\n                let first_char_num = ChineseMap[chinese_number[i]];\n                let second_char_num = ChineseMap[chinese_number[i + 1]];\n                if (second_char_num > 9)\n                    summary += first_char_num * second_char_num;\n                i++;\n                if (i === len)\n                    summary += first_char_num <= 9 ? first_char_num : 0;\n            }\n            return summary;\n        },\n        force_order: function(list, fn) {\n            //强制正序\n            fn = fn || function(list) { //默认为视界的列表\n                return list.map(x => x.title)\n            };\n            let start = Math.floor(list.length / 2); // 0\n            let end = Math.min(list.length - 1, start + 1); // list.slice(-1)[0]\n            let listFn = fn(list);\n            let first = listFn[start];\n            let second = listFn[end];\n            try {\n                if (first.match(/(\\d+)/) && second.match(/(\\d+)/)) { //数字章节的\n                    if (parseInt(first.match(/(\\d+)/)[0]) > parseInt(second.match(/(\\d+)/)[0])) {\n                        list.reverse()\n                    }\n                } else { // 中文转换\n                    if (ChineseToNumber(first) > ChineseToNumber(second)) {\n                        list.reverse()\n                    }\n                }\n            } catch (e) {}\n            return list\n        }\n    }\n\n\n    //加载数据\n    var color = funcTools.color;\n    var getHead = funcTools.getHead;\n    var getbtnsColor = funcTools.getbtnsColor;\n    var force_order = funcTools.force_order;\n    obj = obj || JSON.parse(readFile(\"Object.json\", 0));\n    let col_type = obj.col_type; //二级选集样式\n    let tab = obj.tab; // 线路数组\n    let All_Lists = Array.isArray(obj.list) ? obj.list : [] // 选集列表完整数据,请确保是强制正序的\n    let 每页数量 = obj.size; // 分页的每页数量        \n    let 翻页阀值 = obj.over; // 分页的翻页阀值，超过多少才显示翻页   \n    //log(\"当前线路数: \"+getMyVar(\"tabnum\", \"0\"));\n    let tab_Lists = All_Lists[parseInt(getMyVar(\"tabnum\", \"0\"))];\n    /*\n    if (tab_Lists.length > 1) {\n        tab_Lists = force_order(tab_Lists);\n    }*/\n    //log(tab_Lists)\n    let list_cnt = tab_Lists.length;\n    let 最大页数 = Math.ceil(list_cnt / 每页数量);\n    putMyVar(\"最大页数\", 最大页数);\n    putMyVar(\"每页数量\", 每页数量);\n    //log(getMyVar('选集翻页'))\n    let nowPage = parseInt(getMyVar('选集翻页', '1')) || 1; //当前页数\n    if (nowPage > 最大页数) { //防止切换线路导致页数数组越界\n        nowPage = 最大页数;\n        putMyVar('选集翻页', '' + nowPage);\n    }\n    //log(\"当前页数:\"+getMyVar('选集翻页', '1'))\n    let showList, showList_cnt;\n    if (list_cnt > 翻页阀值 && getMyVar('选集显示', '分页') === '分页') {\n        let maxNum = 每页数量 * nowPage; //第一页的话,最大显示40*1集,第2页41-80集       \n        showList = tab_Lists.slice(((nowPage - 1) * 每页数量), maxNum);\n        showList_cnt = showList.length\n    } else {\n        showList_cnt = tab_Lists.length;\n    }\n\n\n    var set_pageLists = function(id, showList) {\n        if (getMyVar('顺序', '正序') === '逆序') {\n            showList = showList.reverse();\n        }\n        let seps = [];\n        seps.push({\n            col_type: \"line\",\n            extra: {\n                id: 'line_Spes', // 给翻页组件做id用\n                cls: 'playList'\n            }\n        })\n        showList = showList.concat(seps);\n        //log(showList.length)\n        addItemAfter(id, showList);\n        return;\n    };\n\n    var update_pageLists = function(nowPage, toPage, funcTools, set_FYarr, update_pageLists) { //跳页时更新页面List数据  \n        if (nowPage === toPage) {\n            return //跳转页数等于当前页，不操作\n        }\n        let obj = JSON.parse(readFile(\"Object.json\", 0));\n        let All_Lists = Array.isArray(obj.list) ? obj.list : [];\n        let tab_Lists = All_Lists[parseInt(getMyVar(\"tabnum\", \"0\"))];\n        let 每页数量 = Number(getMyVar(\"每页数量\"));\n        let maxNum = 每页数量 * toPage; //第一页的话,最大显示40*1集,第2页41-80集       \n        let showList = tab_Lists.slice(((toPage - 1) * 每页数量), maxNum);\n        if (getMyVar('顺序', '正序') === '逆序') {\n            showList = showList.reverse();\n        }\n        let seps = [];\n        seps.push({\n            col_type: \"line\",\n            extra: {\n                id: 'line_Spes', // 给翻页组件做id用\n                cls: 'playList'\n            }\n        });     \n        var update_pageBtns = function() {\n            //更新翻页状态按钮\n            let color = funcTools.color;            \n            let getHead = funcTools.getHead;\n            let getbtnsColor = funcTools.getbtnsColor;        \n            let showTitle = color('翻页模式已启用  本页:\\t', '#585858') + color(showList.length, '#d96715') + color('\\t集, 共计:\\t', '#585858') + color(getMyVar(\"list_cnt\"), '#d96715') + color('\\t集\\t\\t第:\\t', '#585858') + color('$page' + '\\t/\\t' + getMyVar(\"最大页数\"), '#d96715') + color('\\t页', '#585858');\n            showTitle = funcTools.small(showTitle);\n            showTitle = showTitle.replace('$page', getMyVar('选集翻页', '1')).replace(/““””/g, '');\n            updateItem('pageState', {\n                title: showTitle\n            });\n            \n            //更新分页顶部,底部按钮\n            set_FYarr();\n            //log(getMyVar(\"分页数组\"))\n            let 分页数组 = JSON.parse(getMyVar(\"分页数组\"));\n            updateItem(\"topB\" + (parseInt(nowPage) - 1), {\n                title: 分页数组[parseInt(nowPage) - 1],\n            });\n            updateItem(\"topB\" + (parseInt(toPage) - 1), {\n                title: getHead(分页数组[parseInt(toPage) - 1]).replace('🔻', ''),\n            });\n            \n            let footUrl = $(分页数组, 3, '分页范围选择').select((funcTools, set_FYarr, 分页数组, update_pageLists) => {\n                //log(\"input:\" + input)\n                let nowPage = Number(getMyVar('选集翻页', '1'));\n                let to2 = input.split('-')[1];\n                let 每页数量 = parseInt(getMyVar(\"每页数量\"));\n                let toPage = Math.ceil(parseInt(to2) / 每页数量);\n                if (getMyVar('选集翻页', '1') != toPage) {\n                    //log(\"范围选择翻页数:\" + getMyVar(\"选集翻页\", \"1\"))\n                    putMyVar(\"选集翻页\", toPage);\n                    update_pageLists(nowPage, toPage, funcTools, set_FYarr);\n                }\n                return 'hiker://empty'\n            }, funcTools, set_FYarr, 分页数组, update_pageLists);            \n            updateItem(\"底分页1\", {\n                title: getbtnsColor(getMyVar('选集翻页', '1') + ' / ' + getMyVar(\"最大页数\")),\n                url: footUrl\n            });        \n            return;\n        }\n        update_pageBtns();\n\n        //更新选集列表\n        showList = showList.concat(seps);\n        let oldIds = (findItemsByCls('playList')).map(it => it.extra.id);\n        let toDeleteIds = []; //待删除的旧id\n        let toAddDatas = []; //待新增的新数据\n        if (oldIds.length > showList.length) {\n            toDeleteIds = oldIds.slice(showList.length);\n        } else if (oldIds.length < showList.length) {\n            toAddDatas = showList.slice(oldIds.length);\n        }\n        let cnt = Math.min(oldIds.length, showList.length);\n        if (toDeleteIds.length > 0) { //有删除的先删除\n            deleteItem(toDeleteIds);\n        }\n        if (toAddDatas.length > 0) { //有新增的先新增\n            addItemAfter(oldIds[cnt - 1], toAddDatas);\n        }\n        for (let i = 0; i < cnt; i++) { //最后顺序更新\n            updateItem(oldIds[i], showList[i]);\n        }\n        return;\n    };\n\n    //log(\"showList_cnt:\"+showList_cnt)\n    putMyVar(\"showList_cnt\", showList_cnt);\n    putMyVar(\"list_cnt\", list_cnt);\n    //线路\n    var funcTab = function(tabs, tab_type) {\n        //tabs为线路数组，需要处理好后传入, eg: [\"线路1\"]\n        if (!tab_type) {\n            tab_type = tabs.length > 3 ? \"scroll_button\" : \"flex_button\";\n        }\n        let d = [];\n        tabs.forEach((Tabname, i) => {\n            d.push({\n                title: getMyVar(\"tabnum\", \"0\") == i ? getHead(Tabname) : Tabname,\n                url: $(\"#noLoading##noHistory#\").lazyRule((tabs, getHead, i, funcLoadpage) => {\n                    if (getMyVar(\"tabnum\", \"0\") != i) {\n                        updateItem(\"tabid\" + getMyVar(\"tabnum\", \"0\"), {\n                            title: tabs[parseInt(getMyVar(\"tabnum\", \"0\"))],\n                        });\n                        updateItem(\"tabid\" + i, {\n                            title: getHead(tabs[i]),\n                        });\n                        putMyVar(\"tabnum\", i);\n\n                        //log(\"点击:\"+getMyVar(\"tabnum\"));    \n                        let d = []\n                        funcLoadpage(d)\n                    }\n                    //return 'toast://切换成功!'\n                    return \"hiker://empty\";\n                }, tabs, funcTools.getHead, i, funcLoadpage),\n                col_type: tab_type,\n                extra: {\n                    id: \"tabid\" + i\n                },\n            });\n        });\n        d.push({\n            col_type: \"line\",\n            extra: {\n                id: 'tab_Seps' // 给翻页组件做id用\n            }\n        });\n        return d\n    }\n    //翻页按钮（状态）\n    var pageState = function() {       \n        let showCol = 'avatar';\n        let showTitle = color('翻页模式已启用  本页:\\t', '#585858') + color(getMyVar(\"showList_cnt\"), '#d96715') + color('\\t集, 共计:\\t', '#585858') + color(getMyVar(\"list_cnt\"), '#d96715') + color('\\t集\\t\\t第:\\t', '#585858') + color('$page' + '\\t/\\t' + getMyVar(\"最大页数\"), '#d96715') + color('\\t页', '#585858');\n        showTitle = funcTools.small(showTitle);\n        showTitle = showTitle.replace('$page', getMyVar('选集翻页', '1')).replace(/““””/g, '');\n        let shutTitle = color('翻页模式已关闭,点击启用', '#585858');\n        shutTitle = funcTools.small(shutTitle).replace(/““””/g, '');\n        shutTitle = shutTitle.replace(/““””/g, '');\n        let showPic = 'http://123.56.105.145/tubiao/messy/55.svg';\n        let shutPic = 'http://123.56.105.145/tubiao/messy/63.svg';\n        let pageTitle = '';\n        let pagePic = '';\n        if (getMyVar('选集显示', '分页') === '分页') {\n            pageTitle = showTitle;\n            pagePic = showPic;\n        } else {\n            pageTitle = shutTitle;\n            pagePic = shutPic;\n        }\n        let d = [];\n        d.push({\n            title: pageTitle,\n            col_type: showCol,\n            pic_url: pagePic,\n            url: $('确认切换分页显示状态?').confirm((showTitle, showPic, shutTitle, shutPic, funcLoadpage) => {\n                let nextMode = getMyVar('选集显示', '分页') === '分页' ? '全部' : '分页';\n                let pageTitle, pagePic;\n                if (nextMode === '分页') {\n                    pageTitle = showTitle;\n                    pagePic = showPic;\n                } else {\n                    pageTitle = shutTitle;\n                    pagePic = shutPic;\n                }\n                updateItem('pageState', {\n                    title: pageTitle,\n                    pic_url: pagePic\n                });\n                putMyVar('选集显示', nextMode);\n                let d = [];\n                funcLoadpage(d);\n                return 'hiker://empty'\n            }, showTitle, showPic, shutTitle, shutPic, funcLoadpage),\n            extra: {\n                id: 'pageState',\n                cls: 'state_cls'\n            }\n        });\n        d.push({\n            col_type: \"line\",\n            extra: {\n                id: 'state_Spes', // 组件做id用\n                cls: 'state_cls'\n            }\n        });\n        return d\n    };\n    //顺序\n    var funcOrder = function(tabs) {\n        tabs = tabs || [''];\n        let order_type = \"text_icon\";\n        let up_icon = \"http://123.56.105.145/tubiao/system/36.png\";\n        let down_icon = \"http://123.56.105.145/tubiao/system/35.png\";\n        let title = color(\"$now_tab: 选集列表共 \", \"#098AC1\") + color(getMyVar(\"list_cnt\"), \"#d96715\") + color(\" 集\", \"#098AC1\");\n        let title2 = title.replace('$now_tab', tabs[getMyVar(\"tabnum\", \"0\")]);\n        let d = [];\n        d.push({\n            title: title2.replace(/““””/g, \"\"),\n            pic_url: getMyVar(\"顺序\", \"正序\") === \"逆序\" ? up_icon : down_icon,\n            col_type: order_type,\n            url: $(\"#noLoading#\").lazyRule((up_icon, down_icon, funcLoadpage) => {\n\n                if (getMyVar('顺序', '正序') === '逆序') {\n                    putMyVar('顺序', '正序');\n                } else {\n                    putMyVar('顺序', '逆序');\n                }\n                let orderNow = getMyVar('顺序', '正序');\n                updateItem('orderid', {\n                    pic_url: orderNow === \"逆序\" ? up_icon : down_icon\n                });\n                //log(\"点击顺序\"+orderNow)\n                if (getMyVar(\"list_cnt\") > 1) {\n                    let d = []\n                    funcLoadpage(d)\n                }\n                return 'toast://已切换顺序为:' + orderNow\n                //return \"hiker://empty\";\n            }, up_icon, down_icon, funcLoadpage),\n            extra: {\n                id: \"orderid\",\n                cls: 'order_cls',\n                lineVisible: false\n            },\n        });\n        d.push({\n            col_type: \"blank_block\",\n            extra: {\n                id: 'order_Spes', // 给组件做id用\n                cls: 'order_cls'\n            }\n        });\n        return d\n    };\n    //log(\"当前顺序为:. \"+getMyVar('顺序', '正序'))\n    var set_FYarr = function() {\n        let 分页数组 = [];\n        let 最大页数 = getMyVar(\"最大页数\");\n        let 每页数量 = getMyVar(\"每页数量\");\n        for (var i = 1; i <= 最大页数; i++) {\n            var total1 = parseInt((i - 1) * 每页数量);\n            var total2 = parseInt(i * 每页数量);\n            if (i == getMyVar('选集翻页', '1')) {\n                total1 = '🔻' + total1\n            }\n            //log(total1)\n            if (i == parseInt(最大页数)) {\n                total2 = getMyVar(\"list_cnt\");\n            }\n            分页数组.push(total1 + '-' + total2)\n        };\n        putMyVar(\"分页数组\", JSON.stringify(分页数组));\n        return;\n    }\n    set_FYarr()\n\n    //log(分页数组)\n    var 顶部按钮 = function() {\n        let topB = [];\n        let 最大页数 = getMyVar(\"最大页数\");\n        let 每页数量 = getMyVar(\"每页数量\");\n        //log(\"最大页数: \" + 最大页数)\n        //log(\"当前页数:\" + getMyVar('选集翻页', '1'))\n\n        topB.push({\n            title: '📑',\n            col_type: 'scroll_button',\n            url: 'hiker://empty',\n            extra: {\n                id: '占位符',\n                cls: 'topPage'\n            }\n        });\n        let 分页数组 = JSON.parse(getMyVar(\"分页数组\"));\n        分页数组.forEach((item, i) => {            \n            if (/🔻/.test(item)) {\n                item = item.replace('🔻', '');\n            }\n            topB.push({\n                title: (parseInt(getMyVar('选集翻页', '1')) - 1) == i ? getHead(item) : item,\n                url: $(\"#noLoading##noHistory#\").lazyRule((funcTools, set_FYarr, 分页数组, i, update_pageLists) => {\n                    if ((parseInt(getMyVar('选集翻页', '1')) - 1) != i) {\n                        let nowPage = Number(getMyVar('选集翻页', '1')); //当前页数\n                        let toPage = i + 1;\n                        putMyVar(\"选集翻页\", toPage);\n                        update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\n                    }\n                    //return 'toast://切换成功!'\n                    return \"hiker://empty\";\n                }, funcTools, set_FYarr, 分页数组, i, update_pageLists),\n                col_type: \"scroll_button\",\n                extra: {\n                    id: 'topB' + i,\n                    cls: 'topPage'\n                }\n            });\n        })\n        topB.push({\n            col_type: \"line\",\n            extra: {\n                id: 'top_Spes', // 给翻页组件做id用\n                cls: 'topPage'\n            }\n        });\n        return topB\n    };\n\n    var 底部按钮 = function() {\n        let btns = [];\n        let 最大页数 = getMyVar(\"最大页数\");\n        let 每页数量 = getMyVar(\"每页数量\");\n        let list_cnt = getMyVar(\"list_cnt\");\n        let 分页数组 = JSON.parse(getMyVar(\"分页数组\"));\n        btns.push({\n            title: getbtnsColor(getMyVar('选集翻页', '1') + ' / ' + 最大页数),\n            col_type: \"text_center_1\",\n            url: $(JSON.parse(getMyVar(\"分页数组\")), 3, '分页范围选择').select((funcTools, set_FYarr, 分页数组, update_pageLists) => {\n                //log(\"input:\" + input)\n                let nowPage = Number(getMyVar('选集翻页', '1'));\n                let to2 = input.split('-')[1];\n                let 每页数量 = parseInt(getMyVar(\"每页数量\"));\n                let toPage = Math.ceil(parseInt(to2) / 每页数量);\n                if (getMyVar('选集翻页', '1') != toPage) {\n                    //log(\"范围选择翻页数:\" + getMyVar(\"选集翻页\", \"1\"))\n                    putMyVar(\"选集翻页\", toPage);\n                    update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\n                }\n                return 'hiker://empty'\n            }, funcTools, set_FYarr, 分页数组, update_pageLists),\n            extra: {\n                id: '底分页1',\n                cls: 'footPage',\n                lineVisible: false\n            }\n        });\n        btns.push({\n            title: '✈️跳集',\n            col_type: \"text_5\",\n            url: $(list_cnt, '请输入要跳转到的集数').input((funcTools, set_FYarr, max, 每页数量, update_pageLists) => {\n                if (isNaN(parseInt(input))) {\n                    return 'toast://输入有误,请输入一个1~' + max + '的数字'\n                }\n                let toNum = parseInt(input);\n                if (toNum < 1 || toNum > max) {\n                    return 'toast://输入有误,请输入一个1~' + max + '的数字'\n                }\n                let nowPage = parseInt(getMyVar('选集翻页', '1')) || 1; //当前页数\n                let toPage = Math.ceil(toNum / 每页数量);\n                if (nowPage == toPage) {\n                    return 'toast://本页就是列表元素所在页!';\n                }\n                putMyVar('选集翻页', '' + toPage);\n                update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\n                return 'toast://已跳到列表元素第' + toNum + '个所在页码:' + toPage\n            }, funcTools, set_FYarr, list_cnt, 每页数量, update_pageLists),\n            extra: {\n                cls: 'footPage',\n            }\n        });\n        btns.push({\n            title: '🔝跳页',\n            col_type: \"text_5\",\n            url: $(1, '请输入要跳转到的页数').input((funcTools, set_FYarr, 最大页数, 每页数量, update_pageLists) => {\n                if (isNaN(parseInt(input))) {\n                    return 'toast://输入有误,请输入一个1~' + 最大页数 + '的数字'\n                }\n                let toPage = parseInt(input);\n                if (toPage < 1 || toPage > 最大页数) {\n                    return 'toast://输入有误,请输入一个1~' + 最大页数 + '的数字'\n                }\n                let nowPage = parseInt(getMyVar('选集翻页', '1')) || 1; //当前页数\n                if (nowPage == toPage) {\n                    return 'toast://本页就是第' + toPage + '页';\n                }\n                putMyVar('选集翻页', '' + toPage);\n                update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\n                return 'toast://已跳到第' + toPage + '页'\n            }, funcTools, set_FYarr, 最大页数, 每页数量, update_pageLists),\n            extra: {\n                cls: 'footPage',\n            }\n        });\n        btns.push({\n            title: '⏮️上页',\n            col_type: \"text_5\",\n            url: $('#noLoading#').lazyRule((funcTools, set_FYarr, 每页数量, update_pageLists) => {\n                let nowPage = parseInt(getMyVar('选集翻页', '1')) || 1;\n                let toPage = nowPage - 1;\n                if (toPage > 0) {\n                    putMyVar('选集翻页', '' + toPage);\n                    update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\n                    return 'hiker://empty'\n                } else {\n                    return 'toast://已经没有上一页了!'\n                }\n            }, funcTools, set_FYarr, 每页数量, update_pageLists),\n            extra: {\n                cls: 'footPage',\n            }\n        });\n        btns.push({\n            title: '⏭️下页',\n            col_type: \"text_5\",\n            url: $('#noLoading#').lazyRule((funcTools, set_FYarr, 最大页数, 每页数量, update_pageLists) => {\n                let nowPage = parseInt(getMyVar('选集翻页', '1')) || 1;\n                let toPage = nowPage + 1;\n                if (toPage > 最大页数) {\n                    return 'toast://已经没有下一页了!'\n                }\n                putMyVar('选集翻页', '' + toPage);\n                update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\n                return 'hiker://empty'\n            }, funcTools, set_FYarr, 最大页数, 每页数量, update_pageLists),\n            extra: {\n                cls: 'footPage',\n            }\n        });\n        btns.push({\n            title: '🔚尾页',\n            col_type: \"text_5\",\n            url: $('#noLoading#').lazyRule((funcTools, set_FYarr, 最大页数, 每页数量, update_pageLists) => {\n                let toPage = 最大页数;\n                let nowPage = parseInt(getMyVar('选集翻页', '1')) || 1; //当前页数\n                if (nowPage == toPage) {\n                    return 'toast://已经是最后一页啦!';\n                }\n                putMyVar('选集翻页', '' + toPage);\n                update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\n                return 'toast://已跳转到第' + 最大页数 + '页'\n            }, funcTools, set_FYarr, 最大页数, 每页数量, update_pageLists),\n            extra: {\n                cls: 'footPage',\n            }\n        });\n        return btns\n    }\n\n    //数据加载\n    //线路\n    Array.prototype.push.apply(d, funcTab(tab, \"flex_button\"));\n    let order_btns = funcOrder(tab);\n    if (list_cnt > obj.size && getMyVar('选集显示', '分页') == '分页') {\n        let state_btns = pageState();\n        let top_btns = 顶部按钮();\n        let foot_btns = 底部按钮();\n        if (getMyVar('初始化', 'start') == 'start') {\n            //log('数据初始化中')\n            //开关                \n            //addItemAfter(\"tab_Seps\", state_btns);\n            Array.prototype.push.apply(d, state_btns);\n\n            //排序            \n            //addItemAfter(\"state_Spes\", order_btns);\n            Array.prototype.push.apply(d, order_btns);\n\n            putMyVar(\"初始化\", \"end\");\n        } else {\n            //log(findItem(\"pageState\"))\n            //log(state_btns[0])\n            if (getMyVar(\"翻页状态\", \"开启\") == \"关闭\") {\n                deleteItemByCls('state_cls');\n                addItemAfter(\"tab_Seps\", state_btns);\n                Array.prototype.push.apply(d, state_btns);\n                putMyVar(\"翻页状态\", \"开启\");\n            } else {\n                updateItem(\"pageState\", state_btns[0]);\n            }\n            updateItem(\"orderid\", order_btns[0]);\n        }\n\n        //log(getMyVar(\"选集翻页\"))\n        //顶部按钮   \n        deleteItemByCls('topPage');\n        addItemAfter(\"order_Spes\", top_btns);\n        Array.prototype.push.apply(d, top_btns);\n\n        //线路列表        \n        deleteItemByCls('playList');\n        //addItemAfter(\"top_Spes\", showList);\n        set_pageLists(\"top_Spes\", showList);\n        Array.prototype.push.apply(d, showList);\n\n        //底部按钮   \n        deleteItemByCls('footPage');\n        addItemAfter(\"line_Spes\", foot_btns);\n        Array.prototype.push.apply(d, foot_btns);\n\n        return d\n    } else if (list_cnt > obj.size && getMyVar('选集显示', '分页') == '全部') {\n        let state_btns = pageState();\n        //log(getMyVar(\"翻页状态\", \"开启\"))  多线路选集不满足条件情况\n        if (getMyVar(\"翻页状态\", \"开启\") == \"关闭\") {\n            deleteItemByCls('state_cls');\n            addItemAfter(\"tab_Seps\", state_btns);\n            Array.prototype.push.apply(d, state_btns);\n            putMyVar(\"翻页状态\", \"开启\");\n        } else {\n            updateItem(\"pageState\", state_btns[0]);\n        }\n\n        Array.prototype.push.apply(d, state_btns);\n\n        //排序\n        if (getMyVar('初始化', '') == 'start') {\n            Array.prototype.push.apply(d, order_btns);\n        } else {\n            updateItem(\"orderid\", order_btns[0]);\n        }\n        deleteItemByCls('topPage');\n        deleteItemByCls('playList');\n        deleteItemByCls('footPage');\n        //addItemAfter(\"orderid\", tab_Lists);\n        set_pageLists(\"orderid\", tab_Lists);\n        Array.prototype.push.apply(d, tab_Lists);\n        return d\n    } else {\n        //log(\"翻页模式已关闭，当前线路列表数量不足以开启翻页状态!\")\n        if (getMyVar('初始化', 'start') == 'start') {\n            //log('数据初始化中')\n            //排序            \n            addItemAfter(\"tab_Seps\", order_btns);\n            Array.prototype.push.apply(d, order_btns);\n            //addItemAfter(\"orderid\", tab_Lists);\n            set_pageLists(\"orderid\", tab_Lists);\n            Array.prototype.push.apply(d, tab_Lists);\n            putMyVar(\"初始化\", \"end\");\n        } else {\n            deleteItemByCls('state_cls');\n            putMyVar(\"翻页状态\", \"关闭\");\n            //log(getMyVar(\"翻页状态\", \"开启\"))\n            //排序        \n            updateItem(\"orderid\", order_btns[0]);\n            deleteItemByCls('topPage');\n            deleteItemByCls('footPage');\n            deleteItemByCls('playList');\n            //addItemAfter(\"orderid\", tab_Lists);\n            set_pageLists(\"orderid\", tab_Lists);\n            Array.prototype.push.apply(d, tab_Lists);\n        }\n        return d\n    }\n}\n\n\nfunction 初始化(d, obj) {\n    function 储存足迹(MY_URL, size, MY_PARAMS) {\n        size = size || parseInt(getItem('每页数量', '30')); //每页数量\n        MY_URL = MY_URL.replace('hiker://empty##', '');\n        let footHistory = JSON.parse(readFile('footHistory.json', 0) || '[]');\n        let footIdex = footHistory.findIndex(x => x.url === MY_URL);\n        let foot_Item = {\n            url: MY_URL,\n            page: parseInt(getMyVar('选集翻页', '1')),\n            size: size\n        };\n        if (MY_PARAMS.title) {\n            Object.assign(foot_Item, {\n                title: MY_PARAMS.title\n            });\n        }\n        //log(footHistory.length)\n        if (footHistory.length < 100) {\n            if (footIdex > -1) {\n                footHistory[footIdex] = foot_Item;\n            } else {\n                footHistory.push(foot_Item);\n            }\n        } else {\n            if (footIdex > -1) {\n                footHistory[footIdex] = foot_Item;\n            } else {\n                footHistory.splice(0, 1, foot_Item)\n            }\n        }\n        saveFile('footHistory.json', JSON.stringify(footHistory), 0);\n        //log('已储存足迹:' + JSON.stringify(foot_Item));\n    };\n\n    function 加载足迹(MY_URL, size) {\n        //log(\"正在加载足迹\");\n        //log(getMyVar('选集翻页'))    \n        size = size || parseInt(getItem('每页数量', '30')); //每页数量\n        MY_URL = MY_URL.replace('hiker://empty##', '');\n        //log(\"进行足迹处理\")\n        let footHistory = JSON.parse(readFile('footHistory.json', 0) || '[]');\n        //log(footHistory)\n        let footItem = footHistory.find(x => x.url === MY_URL);\n        //log(\"find:\"+JSON.stringify(footItem))\n        let page = footItem && footItem.page ? footItem.page + '' : '1';\n        //log(\"加载足迹:\" + page);\n        if (footItem && footItem.page && footItem.size !== size) {\n            page = (footItem.page * footItem.size) / size;\n            page = Math.ceil(page) + '';\n            //log(`${footItem.title||''}足迹已加载,正确页数:` + page);\n        }\n        if (!getMyVar('选集翻页')) {\n            putMyVar('选集翻页', page);\n        }\n        //log(getMyVar('选集翻页'))    \n    };\n\n    // 选集列表必须处理完后 storage0.putMyVar('showList') 或者 saveFile('showList.json',JSON.stringify(list),0)\n    let def_obj = {\n        list: [], //必传\n        tab: [], //必传         \n        size: parseInt(getItem('每页数量', '30')), //每页数量\n        over: parseInt(getItem('翻页阀值', '30')), //翻页阀值，超过多少才显示翻页组件\n        col_type: getItem('按钮样式', 'text_5') || MY_RULE.col_type //二级选集样式\n    }\n    //log(def_obj)\n    obj = obj || {};\n    obj = Object.assign(def_obj, obj);\n    saveFile(\"Object.json\", JSON.stringify(obj), 0);\n    //log(tab_Lists)  \n\n    let 每页数量 = obj.size; // 分页的每页数量    \n    加载足迹(MY_URL, 每页数量);\n    putMyVar(\"初始化\", \"start\");\n    addListener('onClose', $.toString((储存足迹, MY_URL, 每页数量, MY_PARAMS) => {\n        储存足迹(MY_URL, 每页数量, MY_PARAMS);\n        clearMyVar(\"初始化\");\n        clearMyVar(\"顺序\");\n        clearMyVar(\"tabnum\");\n        clearMyVar(\"选集翻页\");\n        clearMyVar(\"翻页状态\");\n        deleteFile(\"Object.json\");\n    }, 储存足迹, MY_URL, 每页数量, MY_PARAMS || {}));\n    return funcLoadpage(d, obj)\n}"},{"col_type":"movie_3","name":"一级","path":"yiji","rule":"MY_URL=\"hiker://empty##https://pbaccess.video.Qq.com/trpc.vector_layout.page_view.PageService/getPage?video_appid=3000010##\"+MY_PAGE;\nvar M = MY_URL.split('##');\nconst page = MY_PAGE;\naddListener('onClose', () => {\n    clearMyVar(\"shelvesList\");\n    clearMyVar(\"shelves_Loadindex\");\n    clearMyVar(\"video_Loadindex\")\n})\naddListener('onRefresh', () => {\n    clearMyVar(\"shelvesList\");\n    clearMyVar(\"shelves_Loadindex\");\n    clearMyVar(\"video_Loadindex\")\n})\n\nvar getRandomArrayValue = function(arr, num) {\n    var sData = arr.slice(0),\n        i = arr.length,\n        min = i - num,\n        item, index;\n    while (i-- > min) {\n        index = Math.floor((i + 1) * Math.random());\n        item = sData[index];\n        sData[index] = sData[i];\n        sData[i] = item;\n    }\n    return sData.slice(min);\n}\n\nvar secondsToTime = function(seconds) {\n    var hours = Math.floor(seconds / 3600);\n    var minutes = Math.floor((seconds - (hours * 3600)) / 60);\n    var seconds = seconds - (hours * 3600) - (minutes * 60);\n\n    // round seconds\n    seconds = Math.round(seconds * 100) / 100\n\n    var result = (hours < 10 ? \"0\" + hours : hours);\n    result += \":\" + (minutes < 10 ? \"0\" + minutes : minutes);\n    result += \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n    return result;\n}\nif (!getItem('tx_Types', '')) {\n    let homeUrl = \"https://v.qq.com/\";\n    let homeHtml = fetch(homeUrl, {\n        headers: {\n            \"User-Agent\": PC_UA,\n            \"Referer\": \"https://v.qq.com/\"\n        }\n    });\n    let jdata = homeHtml.match(/window.__INITIAL_STATE__(.*?)=(.*?)<\\//)[2];\n    //log(jdata)\n    //writeFile('hiker://files/cache/tx.json', jdata);       \n    let TypeFile = JSON.parse(jdata).storeUniversalData.channelListData.channelList;\n    //log(TypeFile)\n    setItem('tx_Types', JSON.stringify(TypeFile));\n    //writeFile(\"hiker://files/cache/tx_Types.json\", JSON.stringify(TypeFile));\n}\n\n\nif(!getMyVar(\"channel\")){\nputMyVar(\"homeType\", \"动漫\");\n    putMyVar(\"channel\", \"100119\");\n}\n//body初始值\nvar body = {\n    page_context: null,\n    page_params: {\n        page_id: getMyVar(\"channel\", \"100101\"),\n        page_type: \"channel\"\n    },\n    page_bypass_params: {\n        params: {\n            caller_id: \"3000010\",\n            data_mode: \"default\",\n            page_id: getMyVar(\"channel\", \"100101\"),\n            page_type: \"channel\",\n            platform_id: \"2\",\n            user_mode: \"default\"\n        },\n        scene: \"channel\",\n        abtest_bypass_id: \"\" //cookie中的video_guid的值\n    }\n};\nif (getMyVar(\"channel_first_class\")) {\n    body.page_context = {\n        \"page_index\": (page - 1).toString()\n    };\n    body.page_params.channel_first_class = getMyVar(\"channel_first_class\");\n}\n//log(body)\nif (page == 1) {\n    //let homeTypes = JSON.parse(readFile(\"hiker://files/cache/tx_Types.json\"));\n    let homeTypes = JSON.parse(getItem('tx_Types'));\n    homeTypes.forEach(it => {\n        let name = it.channel_name;\n        if (!/游戏中心|VIP|游戏库|WWE/.test(name)) {\n            d.push({\n                title: getMyVar('homeType', \"精选\") === name ? '♥' + '““””<b><font color=#FA7298>' + name + '</font></b>' : name,\n                url: $('#noLoading##noHistory#').lazyRule((name, unChannelId) => {\n                    putMyVar(\"homeType\", name);\n                    putMyVar(\"channel\", unChannelId);\n                    clearMyVar(\"shelvesList\");\n                    clearMyVar(\"shelves_Loadindex\");\n                    clearMyVar(\"video_Loadindex\");\n                    clearMyVar(\"channel_first_class\");\n                    refreshPage(true); //false刷新不回滚到页面顶部\n                    return \"hiker://empty\"\n                }, name, it.channel_id),\n                col_type: \"scroll_button\"\n            });\n        }\n    })\n    d.push({\n        col_type: \"blank_block\"\n    });\n\n    var homefetchData = JSON.parse(fetchPC(M[1], {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"referer\": \"https://v.qq.com/\",\n            \"Cookie\": \"video_platform=2\"\n        },\n        method: \"POST\",\n        body: body\n    }))\n    //log(fData)\n    var homeCardList = homefetchData.data.CardList;\n    var has_next_page = homefetchData.data.has_next_page;\n    putMyVar(\"has_next_page\", has_next_page);\n}\n//log(homeCardList)\n//log(has_next_page)\nfunction Load_page_view(homeCardList) {\n    function pushData(push_lists, secondsToTime, extra_param) {\n        let temp_lists = [];\n        push_lists.forEach((item, index) => {\n            //log(item)                  \n            try {\n                if (item.params.type != \"h5\") {\n                    let pic = item.params.new_pic_vt || item.params.image_url || item.params.new_pic_hz || item.params.image_url_vertical || item.params.pic_540x304 || item.params.pic496x280;\n                    if (/\\.jpg\\//.test(pic)) {\n                        let index = pic.lastIndexOf(\"\\/\");\n                        pic = pic.substring(0, index + 1);\n                    }\n                    let des = \"\";\n                    if (item.params.imgtag) {\n                        if (/tag_2|tag_3/.test(item.params.imgtag)) {\n                            let imgtag = JSON.parse(item.params.imgtag);\n                            //log(imgtag)                     \n                            des = imgtag.tag_3.text ? imgtag.tag_3.text : imgtag.tag_2.text.split(\"-\")[0]\n                        } else {\n                            des = item.params.imgtag;\n                        }\n                    } else {\n                        des = item.params.timelong || item.params.publish_date || item.params.episode_updated || (item.params.duration ? secondsToTime(item.params.duration) : \"\") || (item.params.cms_isvip == 1 ? \"VIP\" : \"\");\n                    }\n                    let param_cid = \"\";\n                    if (item.params.cid) {\n                        param_cid = item.params.cid;\n                    } else if (item.params.attached_id) {\n                        param_cid = item.params.attached_id;\n                    }\n\n\n/*if(MY_RULE.title==\"聚阅√\"){\nvar sname =JSON.parse(fetch(\"hiker://files/rules/Src/Ju/config.json\"))[\"影视sourcename\"]\n}\n          var extra= {\n                            \n     img:pic,\n              pageTitle:item.params.title,\n        name:item.params.title,                 \n           sname: sname,\n    \"stype\":\"影视\",                 surl:\"https://pbaccess.video.QQ.com/$\" + param_cid + \"$\" + (item.params.vid ? item.params.vid : \"\")\n                        };\n\nif(MY_RULE.title==\"腾讯视频\"){\nextra.url=\"hiker://empty$\" + param_cid + \"$\" + (item.params.vid ? item.params.vid : \"\") + \"#immersiveTheme#\"\n\n}*/\n\n          \n                    if (extra_param) {\n\nextra.cls= extra_param;\n\n                        temp_lists.push({\n                            title: item.params.title,\n                            desc: des,\n                            pic_url: pic,\n                            url: \"hiker://page/ej_page\",\n                        extra: {\nimg:pic,\nurl: \"hiker://empty$\" + param_cid + \"$\" + (item.params.vid ? item.params.vid : \"\") + \"#immersiveTheme#\"\n\n}\n                                                    })\n                    } else {\n                        temp_lists.push({\n                            title: item.params.title,\n                            desc: des,\n                            pic_url: pic,\n                             url: \"hiker://page/ej_page\",\n                        extra: {\nurl: \"hiker://empty$\" + param_cid + \"$\" + (item.params.vid ? item.params.vid : \"\") + \"#immersiveTheme#\"\n}\n                            \n                        })\n                    }\n                }\n            } catch (e) {\n                log(e.toString())\n                log(item)\n            }\n        });\n        return temp_lists\n    }\n\n    homeCardList.forEach((item) => {\n        //log(item.type)\n        /*\n        if (/http/.test(item.children_list.list.cards[0].id))\n            return*/\n        if (item.type == \"pc_carousel\") {\n            //海报列表\n            /*\n            log(\"加载海报\")       \n            putVar(\"pc_carousel\", JSON.stringify(item.children_list.list.cards))\n            d.push({\n                url: getPath('hiker://files/TyrantG/public/tx_banners.html'),\n                col_type: \"x5_webview_single\",\n                extra: {\n                    desc: \"auto\"\n                }\n            })*/\n        } else if (item.type == \"pc_hot_filter\") {\n            //热门分类推荐            \n            var pc_hot_filter = item.children_list.list.cards;\n            //log(pc_hot_filter)\n            if (item.id == \"40_1c49e\") {\n                pc_hot_filter.forEach(it => {\n                    let name = it.params.label_title;\n                    d.push({\n                        title: getMyVar('freeType') === name ? '““””<b><font color=#00FFFF>' + name + '</font></b>' : name,\n                        url: $('#noLoading##noHistory#').lazyRule((name, filter_value) => {\n                            putMyVar(\"freeType\", name);\n                            putMyVar(\"channel_first_class\", filter_value);\n                            refreshPage(false); //false刷新不回滚到页面顶部\n                            return \"hiker://empty\"\n                        }, name, it.params.filter_value),\n                        col_type: \"scroll_button\"\n                    });\n\n                })\n            } else {\n                pc_hot_filter.forEach((item) => {\n                    d.push({\n                        title: item.params.label_title,\n                        url:M[1] + \"##fypage\"+ $(\"\").rule(()=>{\n               if(!getMyVar(\"channel\")){\n                   putMyVar(\"homeType\", \"动漫\");\n    putMyVar(\"channel\", \"100119\");\n               }                     \n                                    eval(JSON.parse(fetch(\"hiker://page/channel_list_filter?rule=腾讯视频\")).rule)\n                                }),\n                        col_type: \"scroll_button\",\n                        extra: {\n                            url: M[1] + \"##fypage\",\n                            filter_value: item.params.filter_value,\n                            page_id: item.params.page_id\n                        }\n                    });\n                });\n            }\n        } else if (item.type == \"pc_shelves\") {\n            //log(item)\n            if (getMyVar(\"shelves_Loadindex\", \"1\") == \"1\") {\n                //第一次加载              \n                var shelvesList = item.children_list.list.cards;\n                d.push({\n                    title: item.params.ZT_leaf_head? item.params.ZT_leaf_head:\"推荐\"+ '\\t\\t\\t\\t\\t\\t换一换🔁',\n                    pic_url: \"http://123.56.105.145/tubiao/q/136.png@Referer=\",\n                    url: $().lazyRule((shelvesList, getRandomArrayValue, secondsToTime, pushData) => {\n                        let sheLists = getRandomArrayValue(shelvesList, 6);\n                        //log(getRandomArrayValue.toString())\n                        //log(secondsToTime.toString())\n                        var sherandomLists = pushData(sheLists, secondsToTime, \"shelvesLists\");\n                        //log(sherandomLists)                   \n                        if (sherandomLists) {\n                            deleteItemByCls('shelvesLists');\n                            addItemAfter('ZT_leaf_head_1', sherandomLists);\n                        }\n                        return 'hiker://empty'\n                    }, shelvesList, getRandomArrayValue, secondsToTime, pushData),\n                    col_type: \"avatar\",\n                    extra: {\n                        id: \"ZT_leaf_head_1\"\n                    }\n                });\n                var shelvesData = getRandomArrayValue(shelvesList, 6);\n                Array.prototype.push.apply(d, pushData(shelvesData, secondsToTime, \"shelvesLists\"));\n                putMyVar(\"shelves_Loadindex\", \"2\")\n            } else {\n                d.push({\n                    title: item.params.ZT_leaf_head,\n                    pic_url: \"http://123.56.105.145/tubiao/messy/167.svg@Referer=\",\n                    url: $(\"#noRecordHistory##noLoading#\").lazyRule(() => {\n                        return 'hiker://empty'\n                    }),\n                    col_type: \"avatar\"\n                });\n                var shelvesList = item.children_list.list.cards;\n                Array.prototype.push.apply(d, pushData(shelvesList, secondsToTime));\n            }\n        } else if (item.type == \"channel_play_schedule\") {\n            //动漫追番时间表           \n            let c_p_schedule = item.children_list.list.cards;\n            let flip_info = item.flip_infos.tab;\n            if (flip_info) {\n                putMyVar(\"flip_info\", JSON.stringify(flip_info));\n            }\n            //log(c_p_schedule)\n            var sctitleArr = [];\n            c_p_schedule.forEach((item, index) => {\n                if (index < 7) {\n                    let title = item.params.title;\n                    sctitleArr.push(title);\n                    if (index == 6) {\n                        putMyVar(\"sctitleArr\", JSON.stringify(sctitleArr))\n                    }\n                    //log(sctitleArr)\n                    let data_key = item.params.data_key;\n                    d.push({\n                        title: getMyVar('week', \"今天\") === title ? '““””<b><font color=#FA7298>' + title + '</font></b>' : title,\n                        url: $('#noLoading##noHistory#').lazyRule((title, data_key, index, pushData, secondsToTime) => {\n                            putMyVar(\"week\", title);\n                            //putMyVar(\"data_key\", data_key);\n                            //log(data_key)                          \n                            var data_key_Obj = new Object();\n                            var data_keys = data_key.split(\"&\");\n                            for (var i = 0; i < data_keys.length; i++) {\n                                data_key_Obj[data_keys[i].split(\"=\")[0]] = unescape(data_keys[i].split(\"=\")[1]);\n                            }\n                            //log(data_key_Obj)\n                            //log(JSON.parse(getMyVar(\"flip_info\")))\n                            let pUrl = \"https://pbaccess.video.qq.com/trpc.vector_layout.page_view.PageService/getCard?video_appid=3000010\";\n                            let scfetchData = JSON.parse(fetchPC(pUrl, {\n                                headers: {\n                                    \"Content-Type\": \"application/json\",\n                                    \"referer\": \"https://v.qq.com/\",\n                                    \"Cookie\": \"video_platform=2\"\n                                },\n                                method: \"POST\",\n                                body: {\n                                    \"page_context\": null,\n                                    \"page_params\": data_key_Obj,\n                                    \"flip_info\": JSON.parse(getMyVar(\"flip_info\") || {})\n                                }\n                            }));\n                            let scards = scfetchData.data.card.children_list.list.cards;\n                            var posterLists = pushData(scards.slice(7), secondsToTime, \"posterLists\");\n\n                            if (posterLists) {\n                                //log(posterLists)\n                                var sctitleArr = JSON.parse(getMyVar(\"sctitleArr\"));\n                                updateItem(\"week_id_\" + getMyVar(\"sctitleNum\", \"0\"), {\n                                    title: sctitleArr[parseInt(getMyVar(\"sctitleNum\", \"0\"))]\n                                });\n\n                                updateItem(\"week_id_\" + index, {\n                                    title: '““””<b><font color=#FA7298>' + title + '</font></b>'\n                                });\n\n                                putMyVar(\"sctitleNum\", index);\n                                deleteItemByCls('posterLists');\n                                addItemAfter('week_id_6', posterLists);\n                            }\n                            return \"hiker://empty\"\n                        }, title, data_key, index, pushData, secondsToTime),\n                        col_type: \"flex_button\",\n                        extra: {\n                            id: \"week_id_\" + index\n                        }\n                    });\n                }\n            })\n            Array.prototype.push.apply(d, pushData(c_p_schedule.slice(7), secondsToTime, \"posterLists\"));\n        } else if (item.type == \"pc_video\") {\n            //为你推荐\n            if (getMyVar(\"video_Loadindex\", \"1\") == \"1\") {\n                d.push({\n                    title: '为你推荐',\n                    url: \"hiker://empty\",\n                    col_type: \"text_1\"\n                });\n            }\n            var pc_video = item.children_list.list.cards;\n            Array.prototype.push.apply(d, pushData(pc_video, secondsToTime));\n\n            putMyVar(\"video_Loadindex\", (parseInt(getMyVar(\"video_Loadindex\", \"1\")) + 1))\n        }\n    })\n}\n//log(page)\n//log(getMyVar(\"has_next_page\"))\nfunction load_page_index(page) {\n    body.page_context = {\n        \"page_index\": page.toString()\n    };\n    //log(body)\n    var homefetchData = JSON.parse(fetchPC(M[1], {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"referer\": \"https://v.qq.com/\",\n            \"Cookie\": \"video_platform=2\"\n        },\n        method: \"POST\",\n        body: body\n    }))\n    //log(homefetchData)\n    var homeCardList = homefetchData.data.CardList;\n    var has_next_page = homefetchData.data.has_next_page;\n    putMyVar(\"has_next_page\", has_next_page)\n    Load_page_view(homeCardList)\n}\n\nif (page == 1) {\n    Load_page_view(homeCardList)\n    if (getMyVar(\"has_next_page\") == \"true\") {\n        //log(getMyVar(\"has_next_page\"))\n        load_page_index(page)\n    }\n} else if (getMyVar(\"has_next_page\") == \"true\") {\n    load_page_index(page)\n}"}],"title":"腾讯视频","author":"马化腾","version":10,"type":"video","url":"hiker://empty##fypage","col_type":"movie_3_marquee","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar d=[]\n\n     eval(JSON.parse(fetch(\"hiker://page/yiji?rule=腾讯视频\")).rule)\n    \nsetResult(d);","searchFind":"js:\nlet d = [];\nvar M = MY_URL.split(\"##\");\nlet query = M[1];\nvar homefetchData = JSON.parse(fetchPC(M[1], {\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"Cookie\": \"video_platform=2\",\n        \"referer\": \"https://v.qq.com/\"\n    },\n    method: \"POST\",\n    body: {\n        \"query\": M[2],\n        \"appID\": \"3172\",\n        \"appKey\": \"lGhFIPeD3HsO9xEp\",\n        \"pageNum\": (M[3] - 1),\n        \"pageSize\": 10\n    }\n}));\n//log(homefetchData)\nlet c_p_schedule = homefetchData.data.smartboxItemList;\nc_p_schedule.forEach((item) => {\n    //log(item)\n    if(item.basicDoc.id && !/sdp/.test(item.basicDoc.id)){    \n    try {\n        //log(item.videoInfo.playSites.episodeInfoList[0].url)\n      log(item)\n        let pic = item.videoInfo.imgUrl;\n        //let index = pic.lastIndexOf(\"\\/\");\n       //pic = pic.substring(0, index);\n        let actors = item.videoInfo.actors;\n        let des = \"\";\n        for (let i = 0; i < actors.length; i++) {\n            des += actors[i] + \"\\t\\t\"\n        }\n        //URL备用链接 https://node.video.qq.com/x/api/float_vinfo2?cid=\n        d.push({\n            title: item.basicDoc.docname ? item.basicDoc.docname:item.basicDoc.title,\n            desc: des,\n            pic_url: pic,\n            url: \"hiker://page/ej_page#immersiveTheme#\",\nextra: {\n            url:\"hiker://empty$\" + item.basicDoc.id +\"$#immersiveTheme#\",\n}\n\n        })\n    } catch (e) {\n        log(e.toString())\n        log(item)\n    }\n    }\n})\nsetResult(d);","search_url":"hiker://empty##https://pbaccess.video.QQ.com/trpc.videosearch.smartboxServer.HttpRountRecall/Smartbox##**##fypage","group":"②影视","detail_col_type":"movie_2","detail_find_rule":"js: require(\"hiker://page/ej_page\")","sdetail_col_type":"movie_2","sdetail_find_rule":"*","ua":"pc","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"动态分类\",\"path\":\"dt\",\"rule\":\"var getRangeColors = function() {       \\n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);     \\n}\\nconst empty = \\\"hiker://empty\\\";\\nconst 分类颜色 = getRangeColors();\\nvar categories = SCates;\\n//log(categories)\\nlet init_cate = []\\nfor (let i = 0; i < 20; i++) {\\n    init_cate.push(\\\"0\\\")\\n}\\nconst fold = getMyVar('header.group', \\\"0\\\")\\nconst cate_temp_json = getMyVar('header.category', JSON.stringify(init_cate))\\nconst cate_temp = JSON.parse(cate_temp_json)\\n\\nif (parseInt(page) === 1) {\\n    /*\\n    d.push({\\n        title: \\\"🔍\\\",\\n        url: $.toString(() => {\\n            putMyVar(\\\"Mykey\\\", input);\\n            refreshPage(true)\\n        }),\\n           desc: \\\"搜你想看的影视、剧集、动漫等...\\\",\\n           col_type: \\\"input\\\",\\n        extra: {\\n            defaultValue: getMyVar(\\\"Mykey\\\")\\n        }\\n    });\\n    */\\n\\n    d.push({\\n        title: fold === '1' ? '““””<b><span style=\\\"color: #19B89D\\\">: (</span></b>' : '““””<b><span style=\\\"color: #910113\\\">: )</span></b>',\\n        url: $('#noLoading#').lazyRule((fold) => {\\n            putMyVar('header.group', fold === '1' ? '0' : '1');\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\"\\n        }, fold),\\n        col_type: 'scroll_button',\\n    })\\n\\n    //log(categories.length)\\n    categories.forEach((category, index) => {\\n        //log(category)\\n        let class_key = category.filter_key;\\n        let sub_categories = category.items;\\n        //log(sub_categories)    \\n        if (index === 0) {\\n            //log(class_key)\\n            sub_categories.forEach((item, key) => {\\n                let title = item.params.option_name;\\n                let op_value = item.params.option_value;\\n                if (getMyVar(class_key)) {               \\n                    title = getMyVar(class_key) == op_value ? '““””<b><span style=\\\"color: ' + 分类颜色 + '\\\">' + title + '</span></b>' : title;\\n                } else {\\n                    title = key.toString() === cate_temp[index] ? '““””<b><span style=\\\"color: ' + 分类颜色 + '\\\">' + title + '</span></b>' : title;\\n                }\\n                d.push({\\n                    title: title,\\n                    url: $(op_value + '#noLoading#').lazyRule((params) => {\\n                        let new_cate = []\\n                        params.cate_temp.forEach((cate, index) => {\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\")\\n                        });\\n\\n                        for (let i = 0; i < params.Sfilter_key.length; i++) {\\n                            clearMyVar(params.Sfilter_key[i])\\n                        }\\n                        putMyVar('header.category', JSON.stringify(new_cate))\\n                        putMyVar(params.class_key, input)\\n                        //log(input)\\n                        refreshPage(true)\\n                        return \\\"hiker://empty\\\"\\n                    }, {\\n                        cate_temp: cate_temp,\\n                        key: key,\\n                        class_key: class_key,\\n                        Sfilter_key: Sfilter_key,\\n                        page: page,\\n                    }),\\n                    col_type: 'scroll_button',\\n                })\\n            })\\n\\n            d.push({\\n                col_type: \\\"blank_block\\\"\\n            });\\n\\n        } else if (fold === '1') {\\n            try {\\n                sub_categories.forEach((item, key) => {\\n                    let title = item.params.option_name;\\n                    let op_value = item.params.option_value;\\n                    if (getMyVar(class_key)) {\\n                        title = getMyVar(class_key) == op_value ? '““””<b><span style=\\\"color: ' + 分类颜色 + '\\\">' + title + '</span></b>' : title;\\n                    } else {\\n                        title = key.toString() === cate_temp[index] ? '““””<b><span style=\\\"color: ' + 分类颜色 + '\\\">' + title + '</span></b>' : title;\\n                    }\\n                    d.push({\\n                        title: title,\\n                        url: $(op_value + '#noLoading#').lazyRule((params) => {\\n                            params.cate_temp[params.index] = params.key.toString()\\n                            putMyVar('header.category', JSON.stringify(params.cate_temp))\\n                            putMyVar(params.class_key, input)\\n                            refreshPage(true)\\n                            return \\\"hiker://empty\\\"\\n                        }, {\\n                            cate_temp: cate_temp,\\n                            index: index,\\n                            key: key,\\n                            class_key: class_key,\\n                            page: page,\\n                        }),\\n                        col_type: 'scroll_button',\\n                    })\\n                })\\n            } catch (e) {\\n                log(sub_categories)\\n                log(e.toString())\\n            }\\n            d.push({\\n                col_type: \\\"blank_block\\\"\\n            });\\n        }\\n\\n    })\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"片库\",\"path\":\"channel_list_filter\",\"rule\":\"js:\\naddListener('onClose', () => {\\n    var Sfilter_key = JSON.parse(getMyVar(\\\"Sfilter_key\\\"));\\n    for (let i = 0; i < Sfilter_key.length; i++) {\\n        clearMyVar(Sfilter_key[i])\\n    }\\n    clearMyVar(\\\"Sfilter_key\\\");\\n})\\nvar d = [];\\nconst page = MY_PAGE;\\nlet baseUrl = MY_URL.split(\\\"##\\\")[0];\\n\\nlet page_id = MY_PARAMS.page_id; //#channel_list_second_page\\n\\nvar filter_value = MY_PARAMS.filter_value;\\n\\n//分类词定位\\nlet option_name = filter_value.split(\\\"=\\\")[0];\\nlet option_value = filter_value.split(\\\"=\\\")[1];\\n//log(filter_value)\\nfunction secondsToTime(seconds) {\\n    var hours = Math.floor(seconds / 3600);\\n    var minutes = Math.floor((seconds - (hours * 3600)) / 60);\\n    var seconds = seconds - (hours * 3600) - (minutes * 60);\\n\\n    // round seconds\\n    seconds = Math.round(seconds * 100) / 100\\n\\n    var result = (hours < 10 ? \\\"0\\\" + hours : hours);\\n    result += \\\":\\\" + (minutes < 10 ? \\\"0\\\" + minutes : minutes);\\n    result += \\\":\\\" + (seconds < 10 ? \\\"0\\\" + seconds : seconds);\\n    return result;\\n}\\n\\nlet body = {\\n    \\\"page_context\\\": {\\n        \\\"page_index\\\": (page - 1).toString()\\n    },\\n    \\\"page_params\\\": {\\n        \\\"page_id\\\": page_id || \\\"channel_list_second_page\\\",\\n        \\\"page_type\\\": \\\"operation\\\",\\n        \\\"channel_id\\\": getMyVar(\\\"channel\\\"),\\n        \\\"filter_params\\\": filter_value,\\n        \\\"page\\\": (page - 1).toString()\\n    },\\n    \\\"page_bypass_params\\\": {\\n        \\\"params\\\": {\\n            \\\"page_id\\\": page_id || \\\"channel_list_second_page\\\",\\n            \\\"page_type\\\": \\\"operation\\\",\\n            \\\"channel_id\\\": getMyVar(\\\"channel\\\"),\\n            \\\"caller_id\\\": \\\"3000010\\\",\\n            \\\"platform_id\\\": \\\"2\\\",\\n            \\\"data_mode\\\": \\\"default\\\",\\n            \\\"user_mode\\\": \\\"default\\\"\\n        },\\n        \\\"scene\\\": \\\"operation\\\",\\n        \\\"abtest_bypass_id\\\": \\\"\\\"\\n    }\\n};\\n\\nvar Sfilter_key = getMyVar(\\\"Sfilter_key\\\");\\n\\nif (Sfilter_key) {\\n    //log(Sfilter_key)\\n    Sfilter_key = JSON.parse(Sfilter_key);\\n    for (let i = 0; i < Sfilter_key.length; i++) {\\n        if (i == 0) {\\n            body.page_params.filter_params = Sfilter_key[i] + \\\"=\\\" + getMyVar(Sfilter_key[i], \\\"-1\\\");\\n        } else {\\n            body.page_params.filter_params += \\\"&\\\" + Sfilter_key[i] + \\\"=\\\" + getMyVar(Sfilter_key[i], \\\"-1\\\")\\n        }\\n    }\\n    //log(body.page_params.filter_params)\\n}\\n//log(body)\\nfunction Load_page_view(CardList) {\\n    CardList.forEach((item) => {\\n        if (item.type == \\\"channel_list_filter\\\") {\\n            function groupBy(arr, prop) {\\n                return arr.reduce(function(groups, item) {\\n                    const val = item.params[prop]\\n                    groups[val] = groups[val] || []\\n                    groups[val].push(item)\\n                    return groups\\n                }, {})\\n            }\\n            var fiterObj = groupBy(item.children_list.list.cards, \\\"filter_key\\\");\\n            //log(gbobj)\\n            var SCates = [];\\n            var Sfilter_key = [];\\n            for (let i in fiterObj) {\\n                SCates.push({\\n                    \\\"filter_key\\\": i,\\n                    \\\"items\\\": fiterObj[i]\\n                });\\n                Sfilter_key.push(i);\\n            }\\n            putMyVar(\\\"Sfilter_key\\\", JSON.stringify(Sfilter_key));\\n            putMyVar(option_name, option_value);\\n            //log(getMyVar(option_name, option_value))\\n            //putMyVar('header.category', JSON.stringify(init_cate))\\n            eval(JSON.parse(request('hiker://page/dt?rule=腾讯视频')).rule);\\n        } else if (item.type == \\\"channel_list_poster\\\") {\\n            var lists = item.children_list.list.cards;\\n            lists.forEach((item) => {\\n                //log(item)\\n                try {\\n                    let pic = item.params.new_pic_vt || item.params.image_url || item.params.new_pic_hz || item.params.image_url_vertical || item.params.pic_540x304 || item.params.pic496x280;\\n                    if(/\\\\.jpg\\\\//.test(pic)){\\n                    let index = pic.lastIndexOf(\\\"\\\\/\\\");\\n                    pic = pic.substring(0, index);\\n                    }\\n                    let des = \\\"\\\";\\n                    if (item.params.imgtag) {  \\n                        if(typeof(item.params.imgtag) === \\\"object\\\"){                                             \\n                         let imgtag = JSON.parse(item.params.imgtag);\\n                         //log(imgtag)                     \\n                         des = imgtag.tag_3.text ? imgtag.tag_3.text : imgtag.tag_2.text.split(\\\"-\\\")[0]\\n                         }else{\\n                             des = item.params.imgtag;\\n                         }\\n                     } else {\\n                         des = item.params.timelong || item.params.publish_date || item.params.episode_updated || (item.params.duration ? secondsToTime(item.params.duration) : \\\"\\\") || (item.params.cms_isvip == 1 ? \\\"VIP\\\" : \\\"\\\");\\n                     }\\n                    let param_cid = \\\"\\\";\\n                    if (item.params.cid) {\\n                        param_cid = item.params.cid;\\n                    } else if (item.params.attached_id) {\\n                        param_cid = item.params.attached_id;\\n                    }\\n                    //log(item)\\n\\n\\n\\n\\n                    d.push({\\n                        title: item.params.title,\\n                        desc: des,\\n                        pic_url: pic,\\n                        url: \\\"hiker://page/ej_page\\\",\\n                        extra: {\\nurl: \\\"hiker://empty$\\\" + param_cid + \\\"$\\\" + (item.params.vid ? item.params.vid : \\\"\\\") + \\\"#immersiveTheme#\\\"\\n }\\n                        \\n                    })\\n                } catch (e) {\\n                    log(e.toString())\\n                    log(item)\\n                }\\n            });\\n        }\\n    });\\n}\\nif (page == 1) {\\n    let fetchData = JSON.parse(fetchPC(baseUrl, {\\n        headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"referer\\\": \\\"https://v.qq.com/\\\",\\n            \\\"Cookie\\\": \\\"video_platform=2\\\"\\n        },\\n        method: \\\"POST\\\",\\n        body: body\\n    }));\\n    // log(fetchData)\\n    let CardList = fetchData.data.CardList;\\n    Load_page_view(CardList);\\n    let has_next_page = fetchData.data.has_next_page;\\n    putMyVar(\\\"fiter_has_next_page\\\", has_next_page);\\n} else if (getMyVar(\\\"fiter_has_next_page\\\") == \\\"true\\\") {\\n    \\n    let fetchData = JSON.parse(fetchPC(baseUrl, {\\n        headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"referer\\\": \\\"https://v.qq.com/\\\",\\n            \\\"Cookie\\\": \\\"video_platform=2\\\"\\n        },\\n        method: \\\"POST\\\",\\n        body: body\\n    }))\\n    //log(homefetchData)\\n    let homeCardList = fetchData.data.CardList;\\n    let has_next_page = fetchData.data.has_next_page;\\n    putMyVar(\\\"fiter_has_next_page\\\", has_next_page)\\n    Load_page_view(homeCardList)\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"二级页面\",\"path\":\"ej_page\",\"rule\":\"js:\\nvar d = [];\\naddListener(\\\"onClose\\\", $.toString(() => {\\n    clearMyVar(\\\"jj_state\\\");\\n}))\\n\\nfunction secondsToTime(seconds) {\\n    var hours = Math.floor(seconds / 3600);\\n    var minutes = Math.floor((seconds - (hours * 3600)) / 60);\\n    var seconds = seconds - (hours * 3600) - (minutes * 60);\\n\\n    // round seconds\\n    seconds = Math.round(seconds * 100) / 100\\n\\n    var result = (hours < 10 ? \\\"0\\\" + hours : hours);\\n    result += \\\":\\\" + (minutes < 10 ? \\\"0\\\" + minutes : minutes);\\n    result += \\\":\\\" + (seconds < 10 ? \\\"0\\\" + seconds : seconds);\\n    return result;\\n}\\n//log(MY_URL)\\n//log(MY_PARAMS)\\nvar cid = MY_URL.split('$')[1];\\nvar vid = MY_URL.split('$')[2];\\n//log(cid)\\n//log(vid)\\nconst ejUrl = \\\"https://pbaccess.video.qq.com/trpc.universal_backend_service.page_server_rpc.PageServer/GetPageData?video_appid=3000010&vplatform=2&vversion_name=8.2.96\\\";\\nvar info_fetchData = JSON.parse(fetchPC(ejUrl, {\\n    headers: {\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"referer\\\": \\\"https://v.qq.com/\\\",\\n        \\\"Cookie\\\": \\\"video_platform=2;vversion_name=8.2.96\\\"\\n    },\\n    method: \\\"POST\\\",\\n    body: {\\n        \\\"page_params\\\": {\\n            \\\"req_from\\\": \\\"web\\\",\\n            \\\"cid\\\": (cid ? cid : \\\"\\\"),\\n            \\\"vid\\\": vid,\\n            \\\"lid\\\": \\\"\\\",\\n            \\\"page_type\\\": \\\"detail_operation\\\",\\n            \\\"page_id\\\": \\\"detail_page_introduction\\\"\\n        },\\n        \\\"has_cache\\\": 1\\n    }\\n}));\\n//log(info_fetchData)\\nvar info_Json = info_fetchData.data.module_list_datas[0].module_datas[0].item_data_lists.item_datas[0];\\n//log(info_Json)\\nvar item_params = info_Json.item_params; //影视信息\\n//var sub_items = info_Json.sub_items; //演员信息\\n\\nvar area_name = item_params.area_name ? item_params.area_name : \\\"未知\\\";\\nvar broadcast_time = item_params.broadcast_time ? item_params.broadcast_time : \\\"未知\\\"; //开播时间\\nvar update_notify_desc = item_params.update_notify_desc ? item_params.update_notify_desc : \\\"\\\";\\nvar tag_text = item_params.tag_text ? item_params.tag_text : \\\"\\\";\\nvar title = item_params.title ? item_params.title : \\\"\\\";\\nvar detail_info = item_params.detail_info;\\n//var director = json.director ? '导演：' + json.director : \\\"\\\";\\n//var starring = json.starring ? '演员：' + json.starring : (json.shengyou ? '声优：' + json.shengyou : \\\"\\\");\\nvar main_genres = item_params.main_genres ? item_params.main_genres : '无';\\nvar picUrl = (item_params.new_pic_vt ? item_params.new_pic_vt : (item_params.new_pic_hz ? item_params.new_pic_hz : \\\"\\\"));\\n//选集请求所需参数\\n//var episode_all = item_params.episode_all;\\n//log(episode_all)\\nvar report_lid = item_params[\\\"report.lid\\\"];\\nvar report_cid = item_params[\\\"report.cid\\\"];\\n//log(\\\"report_cid: \\\"+report_cid)\\nif (report_cid) {\\n    cid = report_cid;\\n}\\n\\nd.push({\\n    title: \\\"\\\\t\\\" + title + '\\\\t' + tag_text + \\\"\\\\n地区: \\\" + area_name,\\n    url: \\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=设置#noHistory##noRecordHistory#\\\",\\n    col_type: \\\"movie_1_vertical_pic_blur\\\",\\n    desc: update_notify_desc + \\\"\\\\n类型: \\\" + main_genres + \\\"\\\\n开播时间：\\\" + broadcast_time,\\n    pic_url: picUrl ? picUrl : MY_PARAMS.picUrl\\n});\\n\\ntry {\\n    let content_desc = item_params.cover_description;\\n\\n    function funcDesc(d, content_desc) {\\n        d.push({\\n            title: '影片简介 <small><small><span style=\\\"color:#19B89D\\\">展开></span></small></small>',\\n            img: \\\"http://123.56.105.145/tubiao/more/197.png\\\",\\n            url: $(\\\"#noLoading#\\\").lazyRule((content_desc) => {\\n                if (getMyVar(\\\"jj_state\\\", \\\"收起\\\") == \\\"收起\\\") {\\n                    updateItem(\\\"content_jjid\\\", {\\n                        title: '影片简介 <small><small><span style=\\\"color:#19B89D\\\">收起></span></small></small>'\\n                    })\\n\\n                    updateItem(\\\"content_decid\\\", {\\n                        title: '<span style=\\\"color:#808080\\\">' + content_desc + '</span>'\\n                    })\\n                    putMyVar(\\\"jj_state\\\", \\\"展开\\\");\\n                } else {\\n                    updateItem(\\\"content_jjid\\\", {\\n                        title: '影片简介 <small><small><span style=\\\"color:#19B89D\\\">展开></span></small></small>'\\n                    })\\n\\n                    updateItem(\\\"content_decid\\\", {\\n                        title: '<span style=\\\"color:#808080\\\">' + content_desc.substr(0, 50) + '...</span>'\\n                    })\\n                    putMyVar(\\\"jj_state\\\", \\\"收起\\\");\\n                }\\n                return \\\"hiker://empty\\\"\\n            }, content_desc),\\n            col_type: \\\"avatar\\\",\\n            extra: {\\n                id: \\\"content_jjid\\\"\\n            }\\n        });\\n        d.push({\\n            title: '<span style=\\\"color:#808080\\\">' + content_desc.substr(0, 50) + '...</span>',\\n            col_type: \\\"rich_text\\\",\\n            extra: {\\n                textSize: 14,\\n                lineSpacing: 3,\\n                id: \\\"content_decid\\\"\\n            }\\n        });\\n        return d\\n    }\\n    if (content_desc) {\\n        funcDesc(d, content_desc);\\n    }\\n\\n} catch (e) {}\\nvar lazy = $('').lazyRule(() => {\\n    eval(\\\"var config =\\\" + fetch(\\\"hiker://files/cache/MyParseSet.json\\\"));\\n    eval(fetch(config.cj));\\n    return aytmParse(input)\\n});\\nlet tabs = [\\\"腾讯\\\"];\\nvar play_Lists = [];\\nvar episode_lists = [];\\nvar pre_lists = [];\\nvar page_item_params = [];\\n//log(cid)\\nif (cid) {\\n    var body = {\\n        \\\"page_params\\\": {\\n            \\\"req_from\\\": \\\"web_vsite\\\",\\n            \\\"page_id\\\": \\\"vsite_episode_list\\\",\\n            \\\"page_type\\\": \\\"detail_operation\\\",\\n            \\\"id_type\\\": \\\"1\\\",\\n            \\\"page_size\\\": \\\"\\\", //可自定义获取数据列表集数，官方默认为空\\n            \\\"cid\\\": cid,\\n            \\\"vid\\\": \\\"\\\",\\n            \\\"lid\\\": \\\"\\\",\\n            \\\"page_num\\\": \\\"\\\",\\n            \\\"page_context\\\": \\\"\\\",\\n            \\\"detail_page_type\\\": \\\"1\\\"\\n        },\\n        \\\"has_cache\\\": 1\\n    }\\n    var playlists_fetchData = JSON.parse(fetchPC(ejUrl, {\\n        headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"referer\\\": \\\"https://v.qq.com/\\\",\\n            \\\"Cookie\\\": \\\"video_platform=2;vversion_name=8.2.96\\\"\\n        },\\n        method: \\\"POST\\\",\\n        body: body\\n    }));\\n    //log(playlists_fetchData)\\n    var next_page_context = playlists_fetchData.data.module_list_datas[0].module_datas[0].module_params.next_page_context;\\n    var has_next = playlists_fetchData.data.has_next_page;\\n\\n    //修复官方数据异常问题，有时候has_next虽然为false，但实际有下一页列表数据\\n\\n    var module_params_tabs = playlists_fetchData.data.module_list_datas[0].module_datas[0].module_params.tabs;\\n\\n//log(playlists_fetchData.data.module_list_datas[0].module_datas)\\n    var list_Json = playlists_fetchData.data.module_list_datas[0].module_datas[0].item_data_lists.item_datas;\\n    var pushLists = function(lists) {\\n        lists.forEach((item) => {\\n            if (item.item_params.page_id) {\\n                //多季数据索引表头，暂未实现\\n                /*\\n                let page_context = item.item_params.page_context;\\n                //log(page_context)\\n                let param_cid = page_context.match(/cid=(.*?)(&|$)/)[1];\\n                //log(\\\"param_cid: \\\" + param_cid)\\n\\n                if (!JSON.stringify(page_item_params).includes(param_cid)) {           \\n                    page_item_params.push(item.item_params);\\n                   if(item.item_params.selected){\\n                       d.push({\\n                    title: '‘‘’’<strong><font color=\\\"#f13b66a\\\">' + item.item_params.title + '</front></strong>',\\n                    url: \\\"hiker://empty\\\",\\n                    col_type: \\\"scroll_button\\\"\\n                    })\\n                   }else{\\n                    d.push({\\n                    title: item.item_params.title,\\n                    url: \\\"hiker://page/ej_page\\\",\\n                    col_type: \\\"scroll_button\\\",\\n                    extra: {\\n                        url: \\\"hiker://empty#\\\" + param_cid + \\\"#\\\" + \\\"\\\" + \\\"#immersiveTheme#\\\"\\n                    }                    \\n                    })\\n                    }\\n                }*/\\n                      \\n            } else {\\n                if (item.item_params.is_no_store_watch_history != 1) {\\n                    try {\\n                        let pic = item.item_params.image_url ? item.item_params.image_url : item.item_params.pic_new;\\n                        let index = pic.lastIndexOf(\\\"\\\\/\\\");\\n                        pic = pic.substring(0, index);\\n                        episode_lists.push({\\n                            title: item.item_params.play_title.split(\\\" \\\").slice(-1)[0],\\n                            pic_url: pic,\\n                            desc: secondsToTime(item.item_params.duration),\\n                            url: \\\"https://v.qq.com/x/cover/\\\" + (item.item_params.cid ? (item.item_params.cid + \\\"/\\\") : \\\"\\\") + item.item_params.vid + \\\".html\\\" + lazy,\\n\\n                            col_type: \\\"movie_2\\\",\\n                            extra: {\\n                                id: item.item_params.cid + \\\"/\\\" + item.item_params.vid,\\n                                cls: 'playList'\\n                            }\\n                        })\\n                    } catch (e) {\\n                        log(e.toString())\\n                        log(item)\\n                    }\\n                } else {\\n                    try {\\n                        let pic = item.item_params.image_url ? item.item_params.image_url : item.item_params.pic_new;\\n                        let index = pic.lastIndexOf(\\\"\\\\/\\\");\\n                        pic = pic.substring(0, index);\\n                        pre_lists.push({\\n                            title: item.item_params.union_title,\\n                            pic_url: pic,\\n                            desc: secondsToTime(item.item_params.duration),\\n                            url: \\\"https://v.qq.com/x/cover/\\\" + (item.item_params.cid ? (item.item_params.cid + \\\"/\\\") : \\\"\\\") + item.item_params.vid + \\\".html\\\" + lazy,\\n\\n                            col_type: \\\"movie_2\\\",\\n                            extra: {\\n                                id: item.item_params.cid + \\\"/\\\" + item.item_params.vid,\\n                                cls: 'playList'\\n                            }\\n                        })\\n                    } catch (e) {\\n                        log(e.toString())\\n                        log(item)\\n                    }\\n                }\\n            }\\n        })\\n        /*\\n        pre_lists.filter(it => {\\n            \\n        })*/\\n        return\\n        //return episode_lists.concat(pre_lists)\\n    };\\n    pushLists(list_Json)\\n    //play_Lists.push(pushLists(list_Json))\\n    //log(has_next)\\n    //log(typeof(has_next))\\n    //log(next_page_context)\\n\\n    function getNextPageContext(ejUrl, body) {\\n        let playlists_fetchData = JSON.parse(fetchPC(ejUrl, {\\n            headers: {\\n                \\\"Content-Type\\\": \\\"application/json\\\",\\n                \\\"referer\\\": \\\"https://v.qq.com/\\\",\\n                \\\"Cookie\\\": \\\"video_platform=2;vversion_name=8.2.96\\\"\\n            },\\n            method: \\\"POST\\\",\\n            body: body\\n        }));\\n        return playlists_fetchData;\\n    }\\n    //log(has_next)\\n    while (has_next == true) {\\n        body.page_params.page_context = next_page_context;\\n        playlists_fetchData = getNextPageContext(ejUrl, body);\\n        next_page_context = playlists_fetchData.data.module_list_datas[0].module_datas[0].module_params.next_page_context;\\n        has_next = playlists_fetchData.data.has_next_page;\\n        list_Json = playlists_fetchData.data.module_list_datas[0].module_datas[0].item_data_lists.item_datas;\\n        pushLists(list_Json)\\n        //play_Lists.push(pushLists(list_Json))\\n    }\\n    //log(module_params_tabs)\\n    if (has_next == false && module_params_tabs) {        \\n        module_params_tabs = JSON.parse(module_params_tabs);\\n        //log(module_params_tabs.length)\\n        //log(module_params_tabs)\\n        for (let i = 1; i < module_params_tabs.length; i++) {\\n            body.page_params.page_context = module_params_tabs[i].page_context;\\n            playlists_fetchData = getNextPageContext(ejUrl, body);\\n            list_Json = playlists_fetchData.data.module_list_datas[0].module_datas[0].item_data_lists.item_datas;\\n            pushLists(list_Json);\\n        }\\n    }\\n    play_Lists.push(episode_lists.concat(pre_lists))\\n} else {\\n    //https://v.qq.com/x/cover/mzc00200l3dp7jj.html //有cid\\n    //https://v.qq.com/x/page/f33619wj20q.html  //只有vid\\n    play_Lists.push([{\\n        title: title,\\n        pic_url: MY_PARAMS.picUrl,\\n        desc: MY_PARAMS.descr,\\n        url: \\\"https://v.qq.com/x/page/\\\" + vid + \\\".html\\\" + lazy,\\n        col_type: \\\"movie_1_left_pic\\\",\\n        extra: {\\n            id: vid,\\n            cls: 'playList' //固定批量标签\\n        }\\n    }])\\n}\\n//log(play_Lists) //列表对象 多线路格式\\neval(JSON.parse(request('hiker://page/ejzj')).rule);\\n//log(play_Lists[0].length)\\nvar ejobj = {\\n    \\\"list\\\": play_Lists,\\n    \\\"tab\\\": tabs\\n};\\n初始化(d, ejobj)\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"二级组件\",\"path\":\"ejzj\",\"rule\":\"function funcLoadpage(d, obj) {\\n    var funcTools = { //公共方法\\n        color: function(text, color) {\\n            text += \\\"\\\";\\n            if (text.indexOf(\\\"““””\\\") === 0) {\\n                text.replace(\\\"““””\\\", \\\"\\\");\\n            }\\n            return \\\"““””<font color='\\\" + color + \\\"'>\\\" + text + \\\"</font>\\\";\\n        },\\n        htmlTag: function(tag, text) {\\n            text += \\\"\\\";\\n            if (text.indexOf(\\\"““””\\\") === 0) {\\n                text.replace(\\\"““””\\\", \\\"\\\");\\n            }\\n            return \\\"““””\\\" + \\\"<\\\" + tag + \\\">\\\" + text + \\\"</\\\" + tag + \\\">\\\";\\n        },\\n        small: function(text) {\\n            return this.htmlTag(\\\"small\\\", text)         \\n            //return \\\"““””\\\" + \\\"<small>\\\" + text + \\\"</small>\\\";\\n        },\\n        right: function(text) {\\n            return '<span style=\\\"float:right\\\">' + text + \\\"</span>\\\";\\n        },\\n        blank: function() {\\n            return \\\"\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\";\\n        },\\n        getHead: function(title) {\\n            return '‘‘’’<strong><font color=\\\"#f13b66a\\\">' + title + '</front></strong>';\\n        },\\n        getbtnsColor: function(text) {\\n            return \\\"““”” <small><small><font color='grey'>\\\" + text + \\\"</font> </small></small>\\\";\\n        },\\n        ChineseToNumber: function(chinese_number) { //中文转数字\\n            var ChineseMap = {\\n            \\\"零\\\": 0,\\n            \\\"一\\\": 1,\\n            \\\"壹\\\": 1,\\n            \\\"二\\\": 2,\\n            \\\"贰\\\": 2,\\n            \\\"两\\\": 2,\\n            \\\"三\\\": 3,\\n            \\\"叁\\\": 3,\\n            \\\"四\\\": 4,\\n            \\\"肆\\\": 4,\\n            \\\"五\\\": 5,\\n            \\\"伍\\\": 5,\\n            \\\"六\\\": 6,\\n            \\\"陆\\\": 6,\\n            \\\"七\\\": 7,\\n            \\\"柒\\\": 7,\\n            \\\"八\\\": 8,\\n            \\\"捌\\\": 8,\\n            \\\"九\\\": 9,\\n            \\\"玖\\\": 9,\\n            \\\"十\\\": 10,\\n            \\\"拾\\\": 10,\\n            \\\"百\\\": 100,\\n            \\\"佰\\\": 100,\\n            \\\"千\\\": 1000,\\n            \\\"仟\\\": 1000,\\n            \\\"万\\\": 10000,\\n            \\\"十万\\\": 100000,\\n            \\\"百万\\\": 1000000,\\n            \\\"千万\\\": 10000000,\\n            \\\"亿\\\": 100000000\\n        };\\n            let len = chinese_number.length;\\n            if (len === 0) return -1;\\n            if (len === 1) return (ChineseMap[chinese_number] <= 10) ? ChineseMap[chinese_number] : -1;\\n            let summary = 0;\\n            if (ChineseMap[chinese_number[0]] === 10) {\\n                chinese_number = \\\"一\\\" + chinese_number;\\n                len++;\\n            }\\n            if (len >= 3 && ChineseMap[chinese_number[len - 1]] < 10) {\\n                let last_second_num = ChineseMap[chinese_number[len - 2]];\\n                if (last_second_num === 100 || last_second_num === 1000 || last_second_num === 10000 || last_second_num === 100000000) {\\n                    for (let key in ChineseMap) {\\n                        if (ChineseMap[key] === last_second_num / 10) {\\n                            chinese_number += key;\\n                            len += key.length;\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n            if (chinese_number.match(/亿/g) && chinese_number.match(/亿/g).length > 1) return -1;\\n            let splited = chinese_number.split(\\\"亿\\\");\\n            if (splited.length === 2) {\\n                let rest = splited[1] === \\\"\\\" ? 0 : ChineseToNumber(splited[1]);\\n                return summary + ChineseToNumber(splited[0]) * 100000000 + rest;\\n            }\\n            splited = chinese_number.split(\\\"万\\\");\\n            if (splited.length === 2) {\\n                let rest = splited[1] === \\\"\\\" ? 0 : ChineseToNumber(splited[1]);\\n                return summary + ChineseToNumber(splited[0]) * 10000 + rest;\\n            }\\n            let i = 0;\\n            while (i < len) {\\n                let first_char_num = ChineseMap[chinese_number[i]];\\n                let second_char_num = ChineseMap[chinese_number[i + 1]];\\n                if (second_char_num > 9)\\n                    summary += first_char_num * second_char_num;\\n                i++;\\n                if (i === len)\\n                    summary += first_char_num <= 9 ? first_char_num : 0;\\n            }\\n            return summary;\\n        },\\n        force_order: function(list, fn) {\\n            //强制正序\\n            fn = fn || function(list) { //默认为视界的列表\\n                return list.map(x => x.title)\\n            };\\n            let start = Math.floor(list.length / 2); // 0\\n            let end = Math.min(list.length - 1, start + 1); // list.slice(-1)[0]\\n            let listFn = fn(list);\\n            let first = listFn[start];\\n            let second = listFn[end];\\n            try {\\n                if (first.match(/(\\\\d+)/) && second.match(/(\\\\d+)/)) { //数字章节的\\n                    if (parseInt(first.match(/(\\\\d+)/)[0]) > parseInt(second.match(/(\\\\d+)/)[0])) {\\n                        list.reverse()\\n                    }\\n                } else { // 中文转换\\n                    if (ChineseToNumber(first) > ChineseToNumber(second)) {\\n                        list.reverse()\\n                    }\\n                }\\n            } catch (e) {}\\n            return list\\n        }\\n    }\\n\\n\\n    //加载数据\\n    var color = funcTools.color;\\n    var getHead = funcTools.getHead;\\n    var getbtnsColor = funcTools.getbtnsColor;\\n    var force_order = funcTools.force_order;\\n    obj = obj || JSON.parse(readFile(\\\"Object.json\\\", 0));\\n    let col_type = obj.col_type; //二级选集样式\\n    let tab = obj.tab; // 线路数组\\n    let All_Lists = Array.isArray(obj.list) ? obj.list : [] // 选集列表完整数据,请确保是强制正序的\\n    let 每页数量 = obj.size; // 分页的每页数量        \\n    let 翻页阀值 = obj.over; // 分页的翻页阀值，超过多少才显示翻页   \\n    //log(\\\"当前线路数: \\\"+getMyVar(\\\"tabnum\\\", \\\"0\\\"));\\n    let tab_Lists = All_Lists[parseInt(getMyVar(\\\"tabnum\\\", \\\"0\\\"))];\\n    /*\\n    if (tab_Lists.length > 1) {\\n        tab_Lists = force_order(tab_Lists);\\n    }*/\\n    //log(tab_Lists)\\n    let list_cnt = tab_Lists.length;\\n    let 最大页数 = Math.ceil(list_cnt / 每页数量);\\n    putMyVar(\\\"最大页数\\\", 最大页数);\\n    putMyVar(\\\"每页数量\\\", 每页数量);\\n    //log(getMyVar('选集翻页'))\\n    let nowPage = parseInt(getMyVar('选集翻页', '1')) || 1; //当前页数\\n    if (nowPage > 最大页数) { //防止切换线路导致页数数组越界\\n        nowPage = 最大页数;\\n        putMyVar('选集翻页', '' + nowPage);\\n    }\\n    //log(\\\"当前页数:\\\"+getMyVar('选集翻页', '1'))\\n    let showList, showList_cnt;\\n    if (list_cnt > 翻页阀值 && getMyVar('选集显示', '分页') === '分页') {\\n        let maxNum = 每页数量 * nowPage; //第一页的话,最大显示40*1集,第2页41-80集       \\n        showList = tab_Lists.slice(((nowPage - 1) * 每页数量), maxNum);\\n        showList_cnt = showList.length\\n    } else {\\n        showList_cnt = tab_Lists.length;\\n    }\\n\\n\\n    var set_pageLists = function(id, showList) {\\n        if (getMyVar('顺序', '正序') === '逆序') {\\n            showList = showList.reverse();\\n        }\\n        let seps = [];\\n        seps.push({\\n            col_type: \\\"line\\\",\\n            extra: {\\n                id: 'line_Spes', // 给翻页组件做id用\\n                cls: 'playList'\\n            }\\n        })\\n        showList = showList.concat(seps);\\n        //log(showList.length)\\n        addItemAfter(id, showList);\\n        return;\\n    };\\n\\n    var update_pageLists = function(nowPage, toPage, funcTools, set_FYarr, update_pageLists) { //跳页时更新页面List数据  \\n        if (nowPage === toPage) {\\n            return //跳转页数等于当前页，不操作\\n        }\\n        let obj = JSON.parse(readFile(\\\"Object.json\\\", 0));\\n        let All_Lists = Array.isArray(obj.list) ? obj.list : [];\\n        let tab_Lists = All_Lists[parseInt(getMyVar(\\\"tabnum\\\", \\\"0\\\"))];\\n        let 每页数量 = Number(getMyVar(\\\"每页数量\\\"));\\n        let maxNum = 每页数量 * toPage; //第一页的话,最大显示40*1集,第2页41-80集       \\n        let showList = tab_Lists.slice(((toPage - 1) * 每页数量), maxNum);\\n        if (getMyVar('顺序', '正序') === '逆序') {\\n            showList = showList.reverse();\\n        }\\n        let seps = [];\\n        seps.push({\\n            col_type: \\\"line\\\",\\n            extra: {\\n                id: 'line_Spes', // 给翻页组件做id用\\n                cls: 'playList'\\n            }\\n        });     \\n        var update_pageBtns = function() {\\n            //更新翻页状态按钮\\n            let color = funcTools.color;            \\n            let getHead = funcTools.getHead;\\n            let getbtnsColor = funcTools.getbtnsColor;        \\n            let showTitle = color('翻页模式已启用  本页:\\\\t', '#585858') + color(showList.length, '#d96715') + color('\\\\t集, 共计:\\\\t', '#585858') + color(getMyVar(\\\"list_cnt\\\"), '#d96715') + color('\\\\t集\\\\t\\\\t第:\\\\t', '#585858') + color('$page' + '\\\\t/\\\\t' + getMyVar(\\\"最大页数\\\"), '#d96715') + color('\\\\t页', '#585858');\\n            showTitle = funcTools.small(showTitle);\\n            showTitle = showTitle.replace('$page', getMyVar('选集翻页', '1')).replace(/““””/g, '');\\n            updateItem('pageState', {\\n                title: showTitle\\n            });\\n            \\n            //更新分页顶部,底部按钮\\n            set_FYarr();\\n            //log(getMyVar(\\\"分页数组\\\"))\\n            let 分页数组 = JSON.parse(getMyVar(\\\"分页数组\\\"));\\n            updateItem(\\\"topB\\\" + (parseInt(nowPage) - 1), {\\n                title: 分页数组[parseInt(nowPage) - 1],\\n            });\\n            updateItem(\\\"topB\\\" + (parseInt(toPage) - 1), {\\n                title: getHead(分页数组[parseInt(toPage) - 1]).replace('🔻', ''),\\n            });\\n            \\n            let footUrl = $(分页数组, 3, '分页范围选择').select((funcTools, set_FYarr, 分页数组, update_pageLists) => {\\n                //log(\\\"input:\\\" + input)\\n                let nowPage = Number(getMyVar('选集翻页', '1'));\\n                let to2 = input.split('-')[1];\\n                let 每页数量 = parseInt(getMyVar(\\\"每页数量\\\"));\\n                let toPage = Math.ceil(parseInt(to2) / 每页数量);\\n                if (getMyVar('选集翻页', '1') != toPage) {\\n                    //log(\\\"范围选择翻页数:\\\" + getMyVar(\\\"选集翻页\\\", \\\"1\\\"))\\n                    putMyVar(\\\"选集翻页\\\", toPage);\\n                    update_pageLists(nowPage, toPage, funcTools, set_FYarr);\\n                }\\n                return 'hiker://empty'\\n            }, funcTools, set_FYarr, 分页数组, update_pageLists);            \\n            updateItem(\\\"底分页1\\\", {\\n                title: getbtnsColor(getMyVar('选集翻页', '1') + ' / ' + getMyVar(\\\"最大页数\\\")),\\n                url: footUrl\\n            });        \\n            return;\\n        }\\n        update_pageBtns();\\n\\n        //更新选集列表\\n        showList = showList.concat(seps);\\n        let oldIds = (findItemsByCls('playList')).map(it => it.extra.id);\\n        let toDeleteIds = []; //待删除的旧id\\n        let toAddDatas = []; //待新增的新数据\\n        if (oldIds.length > showList.length) {\\n            toDeleteIds = oldIds.slice(showList.length);\\n        } else if (oldIds.length < showList.length) {\\n            toAddDatas = showList.slice(oldIds.length);\\n        }\\n        let cnt = Math.min(oldIds.length, showList.length);\\n        if (toDeleteIds.length > 0) { //有删除的先删除\\n            deleteItem(toDeleteIds);\\n        }\\n        if (toAddDatas.length > 0) { //有新增的先新增\\n            addItemAfter(oldIds[cnt - 1], toAddDatas);\\n        }\\n        for (let i = 0; i < cnt; i++) { //最后顺序更新\\n            updateItem(oldIds[i], showList[i]);\\n        }\\n        return;\\n    };\\n\\n    //log(\\\"showList_cnt:\\\"+showList_cnt)\\n    putMyVar(\\\"showList_cnt\\\", showList_cnt);\\n    putMyVar(\\\"list_cnt\\\", list_cnt);\\n    //线路\\n    var funcTab = function(tabs, tab_type) {\\n        //tabs为线路数组，需要处理好后传入, eg: [\\\"线路1\\\"]\\n        if (!tab_type) {\\n            tab_type = tabs.length > 3 ? \\\"scroll_button\\\" : \\\"flex_button\\\";\\n        }\\n        let d = [];\\n        tabs.forEach((Tabname, i) => {\\n            d.push({\\n                title: getMyVar(\\\"tabnum\\\", \\\"0\\\") == i ? getHead(Tabname) : Tabname,\\n                url: $(\\\"#noLoading##noHistory#\\\").lazyRule((tabs, getHead, i, funcLoadpage) => {\\n                    if (getMyVar(\\\"tabnum\\\", \\\"0\\\") != i) {\\n                        updateItem(\\\"tabid\\\" + getMyVar(\\\"tabnum\\\", \\\"0\\\"), {\\n                            title: tabs[parseInt(getMyVar(\\\"tabnum\\\", \\\"0\\\"))],\\n                        });\\n                        updateItem(\\\"tabid\\\" + i, {\\n                            title: getHead(tabs[i]),\\n                        });\\n                        putMyVar(\\\"tabnum\\\", i);\\n\\n                        //log(\\\"点击:\\\"+getMyVar(\\\"tabnum\\\"));    \\n                        let d = []\\n                        funcLoadpage(d)\\n                    }\\n                    //return 'toast://切换成功!'\\n                    return \\\"hiker://empty\\\";\\n                }, tabs, funcTools.getHead, i, funcLoadpage),\\n                col_type: tab_type,\\n                extra: {\\n                    id: \\\"tabid\\\" + i\\n                },\\n            });\\n        });\\n        d.push({\\n            col_type: \\\"line\\\",\\n            extra: {\\n                id: 'tab_Seps' // 给翻页组件做id用\\n            }\\n        });\\n        return d\\n    }\\n    //翻页按钮（状态）\\n    var pageState = function() {       \\n        let showCol = 'avatar';\\n        let showTitle = color('翻页模式已启用  本页:\\\\t', '#585858') + color(getMyVar(\\\"showList_cnt\\\"), '#d96715') + color('\\\\t集, 共计:\\\\t', '#585858') + color(getMyVar(\\\"list_cnt\\\"), '#d96715') + color('\\\\t集\\\\t\\\\t第:\\\\t', '#585858') + color('$page' + '\\\\t/\\\\t' + getMyVar(\\\"最大页数\\\"), '#d96715') + color('\\\\t页', '#585858');\\n        showTitle = funcTools.small(showTitle);\\n        showTitle = showTitle.replace('$page', getMyVar('选集翻页', '1')).replace(/““””/g, '');\\n        let shutTitle = color('翻页模式已关闭,点击启用', '#585858');\\n        shutTitle = funcTools.small(shutTitle).replace(/““””/g, '');\\n        shutTitle = shutTitle.replace(/““””/g, '');\\n        let showPic = 'http://123.56.105.145/tubiao/messy/55.svg';\\n        let shutPic = 'http://123.56.105.145/tubiao/messy/63.svg';\\n        let pageTitle = '';\\n        let pagePic = '';\\n        if (getMyVar('选集显示', '分页') === '分页') {\\n            pageTitle = showTitle;\\n            pagePic = showPic;\\n        } else {\\n            pageTitle = shutTitle;\\n            pagePic = shutPic;\\n        }\\n        let d = [];\\n        d.push({\\n            title: pageTitle,\\n            col_type: showCol,\\n            pic_url: pagePic,\\n            url: $('确认切换分页显示状态?').confirm((showTitle, showPic, shutTitle, shutPic, funcLoadpage) => {\\n                let nextMode = getMyVar('选集显示', '分页') === '分页' ? '全部' : '分页';\\n                let pageTitle, pagePic;\\n                if (nextMode === '分页') {\\n                    pageTitle = showTitle;\\n                    pagePic = showPic;\\n                } else {\\n                    pageTitle = shutTitle;\\n                    pagePic = shutPic;\\n                }\\n                updateItem('pageState', {\\n                    title: pageTitle,\\n                    pic_url: pagePic\\n                });\\n                putMyVar('选集显示', nextMode);\\n                let d = [];\\n                funcLoadpage(d);\\n                return 'hiker://empty'\\n            }, showTitle, showPic, shutTitle, shutPic, funcLoadpage),\\n            extra: {\\n                id: 'pageState',\\n                cls: 'state_cls'\\n            }\\n        });\\n        d.push({\\n            col_type: \\\"line\\\",\\n            extra: {\\n                id: 'state_Spes', // 组件做id用\\n                cls: 'state_cls'\\n            }\\n        });\\n        return d\\n    };\\n    //顺序\\n    var funcOrder = function(tabs) {\\n        tabs = tabs || [''];\\n        let order_type = \\\"text_icon\\\";\\n        let up_icon = \\\"http://123.56.105.145/tubiao/system/36.png\\\";\\n        let down_icon = \\\"http://123.56.105.145/tubiao/system/35.png\\\";\\n        let title = color(\\\"$now_tab: 选集列表共 \\\", \\\"#098AC1\\\") + color(getMyVar(\\\"list_cnt\\\"), \\\"#d96715\\\") + color(\\\" 集\\\", \\\"#098AC1\\\");\\n        let title2 = title.replace('$now_tab', tabs[getMyVar(\\\"tabnum\\\", \\\"0\\\")]);\\n        let d = [];\\n        d.push({\\n            title: title2.replace(/““””/g, \\\"\\\"),\\n            pic_url: getMyVar(\\\"顺序\\\", \\\"正序\\\") === \\\"逆序\\\" ? up_icon : down_icon,\\n            col_type: order_type,\\n            url: $(\\\"#noLoading#\\\").lazyRule((up_icon, down_icon, funcLoadpage) => {\\n\\n                if (getMyVar('顺序', '正序') === '逆序') {\\n                    putMyVar('顺序', '正序');\\n                } else {\\n                    putMyVar('顺序', '逆序');\\n                }\\n                let orderNow = getMyVar('顺序', '正序');\\n                updateItem('orderid', {\\n                    pic_url: orderNow === \\\"逆序\\\" ? up_icon : down_icon\\n                });\\n                //log(\\\"点击顺序\\\"+orderNow)\\n                if (getMyVar(\\\"list_cnt\\\") > 1) {\\n                    let d = []\\n                    funcLoadpage(d)\\n                }\\n                return 'toast://已切换顺序为:' + orderNow\\n                //return \\\"hiker://empty\\\";\\n            }, up_icon, down_icon, funcLoadpage),\\n            extra: {\\n                id: \\\"orderid\\\",\\n                cls: 'order_cls',\\n                lineVisible: false\\n            },\\n        });\\n        d.push({\\n            col_type: \\\"blank_block\\\",\\n            extra: {\\n                id: 'order_Spes', // 给组件做id用\\n                cls: 'order_cls'\\n            }\\n        });\\n        return d\\n    };\\n    //log(\\\"当前顺序为:. \\\"+getMyVar('顺序', '正序'))\\n    var set_FYarr = function() {\\n        let 分页数组 = [];\\n        let 最大页数 = getMyVar(\\\"最大页数\\\");\\n        let 每页数量 = getMyVar(\\\"每页数量\\\");\\n        for (var i = 1; i <= 最大页数; i++) {\\n            var total1 = parseInt((i - 1) * 每页数量);\\n            var total2 = parseInt(i * 每页数量);\\n            if (i == getMyVar('选集翻页', '1')) {\\n                total1 = '🔻' + total1\\n            }\\n            //log(total1)\\n            if (i == parseInt(最大页数)) {\\n                total2 = getMyVar(\\\"list_cnt\\\");\\n            }\\n            分页数组.push(total1 + '-' + total2)\\n        };\\n        putMyVar(\\\"分页数组\\\", JSON.stringify(分页数组));\\n        return;\\n    }\\n    set_FYarr()\\n\\n    //log(分页数组)\\n    var 顶部按钮 = function() {\\n        let topB = [];\\n        let 最大页数 = getMyVar(\\\"最大页数\\\");\\n        let 每页数量 = getMyVar(\\\"每页数量\\\");\\n        //log(\\\"最大页数: \\\" + 最大页数)\\n        //log(\\\"当前页数:\\\" + getMyVar('选集翻页', '1'))\\n\\n        topB.push({\\n            title: '📑',\\n            col_type: 'scroll_button',\\n            url: 'hiker://empty',\\n            extra: {\\n                id: '占位符',\\n                cls: 'topPage'\\n            }\\n        });\\n        let 分页数组 = JSON.parse(getMyVar(\\\"分页数组\\\"));\\n        分页数组.forEach((item, i) => {            \\n            if (/🔻/.test(item)) {\\n                item = item.replace('🔻', '');\\n            }\\n            topB.push({\\n                title: (parseInt(getMyVar('选集翻页', '1')) - 1) == i ? getHead(item) : item,\\n                url: $(\\\"#noLoading##noHistory#\\\").lazyRule((funcTools, set_FYarr, 分页数组, i, update_pageLists) => {\\n                    if ((parseInt(getMyVar('选集翻页', '1')) - 1) != i) {\\n                        let nowPage = Number(getMyVar('选集翻页', '1')); //当前页数\\n                        let toPage = i + 1;\\n                        putMyVar(\\\"选集翻页\\\", toPage);\\n                        update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\\n                    }\\n                    //return 'toast://切换成功!'\\n                    return \\\"hiker://empty\\\";\\n                }, funcTools, set_FYarr, 分页数组, i, update_pageLists),\\n                col_type: \\\"scroll_button\\\",\\n                extra: {\\n                    id: 'topB' + i,\\n                    cls: 'topPage'\\n                }\\n            });\\n        })\\n        topB.push({\\n            col_type: \\\"line\\\",\\n            extra: {\\n                id: 'top_Spes', // 给翻页组件做id用\\n                cls: 'topPage'\\n            }\\n        });\\n        return topB\\n    };\\n\\n    var 底部按钮 = function() {\\n        let btns = [];\\n        let 最大页数 = getMyVar(\\\"最大页数\\\");\\n        let 每页数量 = getMyVar(\\\"每页数量\\\");\\n        let list_cnt = getMyVar(\\\"list_cnt\\\");\\n        let 分页数组 = JSON.parse(getMyVar(\\\"分页数组\\\"));\\n        btns.push({\\n            title: getbtnsColor(getMyVar('选集翻页', '1') + ' / ' + 最大页数),\\n            col_type: \\\"text_center_1\\\",\\n            url: $(JSON.parse(getMyVar(\\\"分页数组\\\")), 3, '分页范围选择').select((funcTools, set_FYarr, 分页数组, update_pageLists) => {\\n                //log(\\\"input:\\\" + input)\\n                let nowPage = Number(getMyVar('选集翻页', '1'));\\n                let to2 = input.split('-')[1];\\n                let 每页数量 = parseInt(getMyVar(\\\"每页数量\\\"));\\n                let toPage = Math.ceil(parseInt(to2) / 每页数量);\\n                if (getMyVar('选集翻页', '1') != toPage) {\\n                    //log(\\\"范围选择翻页数:\\\" + getMyVar(\\\"选集翻页\\\", \\\"1\\\"))\\n                    putMyVar(\\\"选集翻页\\\", toPage);\\n                    update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\\n                }\\n                return 'hiker://empty'\\n            }, funcTools, set_FYarr, 分页数组, update_pageLists),\\n            extra: {\\n                id: '底分页1',\\n                cls: 'footPage',\\n                lineVisible: false\\n            }\\n        });\\n        btns.push({\\n            title: '✈️跳集',\\n            col_type: \\\"text_5\\\",\\n            url: $(list_cnt, '请输入要跳转到的集数').input((funcTools, set_FYarr, max, 每页数量, update_pageLists) => {\\n                if (isNaN(parseInt(input))) {\\n                    return 'toast://输入有误,请输入一个1~' + max + '的数字'\\n                }\\n                let toNum = parseInt(input);\\n                if (toNum < 1 || toNum > max) {\\n                    return 'toast://输入有误,请输入一个1~' + max + '的数字'\\n                }\\n                let nowPage = parseInt(getMyVar('选集翻页', '1')) || 1; //当前页数\\n                let toPage = Math.ceil(toNum / 每页数量);\\n                if (nowPage == toPage) {\\n                    return 'toast://本页就是列表元素所在页!';\\n                }\\n                putMyVar('选集翻页', '' + toPage);\\n                update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\\n                return 'toast://已跳到列表元素第' + toNum + '个所在页码:' + toPage\\n            }, funcTools, set_FYarr, list_cnt, 每页数量, update_pageLists),\\n            extra: {\\n                cls: 'footPage',\\n            }\\n        });\\n        btns.push({\\n            title: '🔝跳页',\\n            col_type: \\\"text_5\\\",\\n            url: $(1, '请输入要跳转到的页数').input((funcTools, set_FYarr, 最大页数, 每页数量, update_pageLists) => {\\n                if (isNaN(parseInt(input))) {\\n                    return 'toast://输入有误,请输入一个1~' + 最大页数 + '的数字'\\n                }\\n                let toPage = parseInt(input);\\n                if (toPage < 1 || toPage > 最大页数) {\\n                    return 'toast://输入有误,请输入一个1~' + 最大页数 + '的数字'\\n                }\\n                let nowPage = parseInt(getMyVar('选集翻页', '1')) || 1; //当前页数\\n                if (nowPage == toPage) {\\n                    return 'toast://本页就是第' + toPage + '页';\\n                }\\n                putMyVar('选集翻页', '' + toPage);\\n                update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\\n                return 'toast://已跳到第' + toPage + '页'\\n            }, funcTools, set_FYarr, 最大页数, 每页数量, update_pageLists),\\n            extra: {\\n                cls: 'footPage',\\n            }\\n        });\\n        btns.push({\\n            title: '⏮️上页',\\n            col_type: \\\"text_5\\\",\\n            url: $('#noLoading#').lazyRule((funcTools, set_FYarr, 每页数量, update_pageLists) => {\\n                let nowPage = parseInt(getMyVar('选集翻页', '1')) || 1;\\n                let toPage = nowPage - 1;\\n                if (toPage > 0) {\\n                    putMyVar('选集翻页', '' + toPage);\\n                    update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\\n                    return 'hiker://empty'\\n                } else {\\n                    return 'toast://已经没有上一页了!'\\n                }\\n            }, funcTools, set_FYarr, 每页数量, update_pageLists),\\n            extra: {\\n                cls: 'footPage',\\n            }\\n        });\\n        btns.push({\\n            title: '⏭️下页',\\n            col_type: \\\"text_5\\\",\\n            url: $('#noLoading#').lazyRule((funcTools, set_FYarr, 最大页数, 每页数量, update_pageLists) => {\\n                let nowPage = parseInt(getMyVar('选集翻页', '1')) || 1;\\n                let toPage = nowPage + 1;\\n                if (toPage > 最大页数) {\\n                    return 'toast://已经没有下一页了!'\\n                }\\n                putMyVar('选集翻页', '' + toPage);\\n                update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\\n                return 'hiker://empty'\\n            }, funcTools, set_FYarr, 最大页数, 每页数量, update_pageLists),\\n            extra: {\\n                cls: 'footPage',\\n            }\\n        });\\n        btns.push({\\n            title: '🔚尾页',\\n            col_type: \\\"text_5\\\",\\n            url: $('#noLoading#').lazyRule((funcTools, set_FYarr, 最大页数, 每页数量, update_pageLists) => {\\n                let toPage = 最大页数;\\n                let nowPage = parseInt(getMyVar('选集翻页', '1')) || 1; //当前页数\\n                if (nowPage == toPage) {\\n                    return 'toast://已经是最后一页啦!';\\n                }\\n                putMyVar('选集翻页', '' + toPage);\\n                update_pageLists(nowPage, toPage, funcTools, set_FYarr, update_pageLists);\\n                return 'toast://已跳转到第' + 最大页数 + '页'\\n            }, funcTools, set_FYarr, 最大页数, 每页数量, update_pageLists),\\n            extra: {\\n                cls: 'footPage',\\n            }\\n        });\\n        return btns\\n    }\\n\\n    //数据加载\\n    //线路\\n    Array.prototype.push.apply(d, funcTab(tab, \\\"flex_button\\\"));\\n    let order_btns = funcOrder(tab);\\n    if (list_cnt > obj.size && getMyVar('选集显示', '分页') == '分页') {\\n        let state_btns = pageState();\\n        let top_btns = 顶部按钮();\\n        let foot_btns = 底部按钮();\\n        if (getMyVar('初始化', 'start') == 'start') {\\n            //log('数据初始化中')\\n            //开关                \\n            //addItemAfter(\\\"tab_Seps\\\", state_btns);\\n            Array.prototype.push.apply(d, state_btns);\\n\\n            //排序            \\n            //addItemAfter(\\\"state_Spes\\\", order_btns);\\n            Array.prototype.push.apply(d, order_btns);\\n\\n            putMyVar(\\\"初始化\\\", \\\"end\\\");\\n        } else {\\n            //log(findItem(\\\"pageState\\\"))\\n            //log(state_btns[0])\\n            if (getMyVar(\\\"翻页状态\\\", \\\"开启\\\") == \\\"关闭\\\") {\\n                deleteItemByCls('state_cls');\\n                addItemAfter(\\\"tab_Seps\\\", state_btns);\\n                Array.prototype.push.apply(d, state_btns);\\n                putMyVar(\\\"翻页状态\\\", \\\"开启\\\");\\n            } else {\\n                updateItem(\\\"pageState\\\", state_btns[0]);\\n            }\\n            updateItem(\\\"orderid\\\", order_btns[0]);\\n        }\\n\\n        //log(getMyVar(\\\"选集翻页\\\"))\\n        //顶部按钮   \\n        deleteItemByCls('topPage');\\n        addItemAfter(\\\"order_Spes\\\", top_btns);\\n        Array.prototype.push.apply(d, top_btns);\\n\\n        //线路列表        \\n        deleteItemByCls('playList');\\n        //addItemAfter(\\\"top_Spes\\\", showList);\\n        set_pageLists(\\\"top_Spes\\\", showList);\\n        Array.prototype.push.apply(d, showList);\\n\\n        //底部按钮   \\n        deleteItemByCls('footPage');\\n        addItemAfter(\\\"line_Spes\\\", foot_btns);\\n        Array.prototype.push.apply(d, foot_btns);\\n\\n        return d\\n    } else if (list_cnt > obj.size && getMyVar('选集显示', '分页') == '全部') {\\n        let state_btns = pageState();\\n        //log(getMyVar(\\\"翻页状态\\\", \\\"开启\\\"))  多线路选集不满足条件情况\\n        if (getMyVar(\\\"翻页状态\\\", \\\"开启\\\") == \\\"关闭\\\") {\\n            deleteItemByCls('state_cls');\\n            addItemAfter(\\\"tab_Seps\\\", state_btns);\\n            Array.prototype.push.apply(d, state_btns);\\n            putMyVar(\\\"翻页状态\\\", \\\"开启\\\");\\n        } else {\\n            updateItem(\\\"pageState\\\", state_btns[0]);\\n        }\\n\\n        Array.prototype.push.apply(d, state_btns);\\n\\n        //排序\\n        if (getMyVar('初始化', '') == 'start') {\\n            Array.prototype.push.apply(d, order_btns);\\n        } else {\\n            updateItem(\\\"orderid\\\", order_btns[0]);\\n        }\\n        deleteItemByCls('topPage');\\n        deleteItemByCls('playList');\\n        deleteItemByCls('footPage');\\n        //addItemAfter(\\\"orderid\\\", tab_Lists);\\n        set_pageLists(\\\"orderid\\\", tab_Lists);\\n        Array.prototype.push.apply(d, tab_Lists);\\n        return d\\n    } else {\\n        //log(\\\"翻页模式已关闭，当前线路列表数量不足以开启翻页状态!\\\")\\n        if (getMyVar('初始化', 'start') == 'start') {\\n            //log('数据初始化中')\\n            //排序            \\n            addItemAfter(\\\"tab_Seps\\\", order_btns);\\n            Array.prototype.push.apply(d, order_btns);\\n            //addItemAfter(\\\"orderid\\\", tab_Lists);\\n            set_pageLists(\\\"orderid\\\", tab_Lists);\\n            Array.prototype.push.apply(d, tab_Lists);\\n            putMyVar(\\\"初始化\\\", \\\"end\\\");\\n        } else {\\n            deleteItemByCls('state_cls');\\n            putMyVar(\\\"翻页状态\\\", \\\"关闭\\\");\\n            //log(getMyVar(\\\"翻页状态\\\", \\\"开启\\\"))\\n            //排序        \\n            updateItem(\\\"orderid\\\", order_btns[0]);\\n            deleteItemByCls('topPage');\\n            deleteItemByCls('footPage');\\n            deleteItemByCls('playList');\\n            //addItemAfter(\\\"orderid\\\", tab_Lists);\\n            set_pageLists(\\\"orderid\\\", tab_Lists);\\n            Array.prototype.push.apply(d, tab_Lists);\\n        }\\n        return d\\n    }\\n}\\n\\n\\nfunction 初始化(d, obj) {\\n    function 储存足迹(MY_URL, size, MY_PARAMS) {\\n        size = size || parseInt(getItem('每页数量', '30')); //每页数量\\n        MY_URL = MY_URL.replace('hiker://empty##', '');\\n        let footHistory = JSON.parse(readFile('footHistory.json', 0) || '[]');\\n        let footIdex = footHistory.findIndex(x => x.url === MY_URL);\\n        let foot_Item = {\\n            url: MY_URL,\\n            page: parseInt(getMyVar('选集翻页', '1')),\\n            size: size\\n        };\\n        if (MY_PARAMS.title) {\\n            Object.assign(foot_Item, {\\n                title: MY_PARAMS.title\\n            });\\n        }\\n        //log(footHistory.length)\\n        if (footHistory.length < 100) {\\n            if (footIdex > -1) {\\n                footHistory[footIdex] = foot_Item;\\n            } else {\\n                footHistory.push(foot_Item);\\n            }\\n        } else {\\n            if (footIdex > -1) {\\n                footHistory[footIdex] = foot_Item;\\n            } else {\\n                footHistory.splice(0, 1, foot_Item)\\n            }\\n        }\\n        saveFile('footHistory.json', JSON.stringify(footHistory), 0);\\n        //log('已储存足迹:' + JSON.stringify(foot_Item));\\n    };\\n\\n    function 加载足迹(MY_URL, size) {\\n        //log(\\\"正在加载足迹\\\");\\n        //log(getMyVar('选集翻页'))    \\n        size = size || parseInt(getItem('每页数量', '30')); //每页数量\\n        MY_URL = MY_URL.replace('hiker://empty##', '');\\n        //log(\\\"进行足迹处理\\\")\\n        let footHistory = JSON.parse(readFile('footHistory.json', 0) || '[]');\\n        //log(footHistory)\\n        let footItem = footHistory.find(x => x.url === MY_URL);\\n        //log(\\\"find:\\\"+JSON.stringify(footItem))\\n        let page = footItem && footItem.page ? footItem.page + '' : '1';\\n        //log(\\\"加载足迹:\\\" + page);\\n        if (footItem && footItem.page && footItem.size !== size) {\\n            page = (footItem.page * footItem.size) / size;\\n            page = Math.ceil(page) + '';\\n            //log(`${footItem.title||''}足迹已加载,正确页数:` + page);\\n        }\\n        if (!getMyVar('选集翻页')) {\\n            putMyVar('选集翻页', page);\\n        }\\n        //log(getMyVar('选集翻页'))    \\n    };\\n\\n    // 选集列表必须处理完后 storage0.putMyVar('showList') 或者 saveFile('showList.json',JSON.stringify(list),0)\\n    let def_obj = {\\n        list: [], //必传\\n        tab: [], //必传         \\n        size: parseInt(getItem('每页数量', '30')), //每页数量\\n        over: parseInt(getItem('翻页阀值', '30')), //翻页阀值，超过多少才显示翻页组件\\n        col_type: getItem('按钮样式', 'text_5') || MY_RULE.col_type //二级选集样式\\n    }\\n    //log(def_obj)\\n    obj = obj || {};\\n    obj = Object.assign(def_obj, obj);\\n    saveFile(\\\"Object.json\\\", JSON.stringify(obj), 0);\\n    //log(tab_Lists)  \\n\\n    let 每页数量 = obj.size; // 分页的每页数量    \\n    加载足迹(MY_URL, 每页数量);\\n    putMyVar(\\\"初始化\\\", \\\"start\\\");\\n    addListener('onClose', $.toString((储存足迹, MY_URL, 每页数量, MY_PARAMS) => {\\n        储存足迹(MY_URL, 每页数量, MY_PARAMS);\\n        clearMyVar(\\\"初始化\\\");\\n        clearMyVar(\\\"顺序\\\");\\n        clearMyVar(\\\"tabnum\\\");\\n        clearMyVar(\\\"选集翻页\\\");\\n        clearMyVar(\\\"翻页状态\\\");\\n        deleteFile(\\\"Object.json\\\");\\n    }, 储存足迹, MY_URL, 每页数量, MY_PARAMS || {}));\\n    return funcLoadpage(d, obj)\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"一级\",\"path\":\"yiji\",\"rule\":\"MY_URL=\\\"hiker://empty##https://pbaccess.video.Qq.com/trpc.vector_layout.page_view.PageService/getPage?video_appid=3000010##\\\"+MY_PAGE;\\nvar M = MY_URL.split('##');\\nconst page = MY_PAGE;\\naddListener('onClose', () => {\\n    clearMyVar(\\\"shelvesList\\\");\\n    clearMyVar(\\\"shelves_Loadindex\\\");\\n    clearMyVar(\\\"video_Loadindex\\\")\\n})\\naddListener('onRefresh', () => {\\n    clearMyVar(\\\"shelvesList\\\");\\n    clearMyVar(\\\"shelves_Loadindex\\\");\\n    clearMyVar(\\\"video_Loadindex\\\")\\n})\\n\\nvar getRandomArrayValue = function(arr, num) {\\n    var sData = arr.slice(0),\\n        i = arr.length,\\n        min = i - num,\\n        item, index;\\n    while (i-- > min) {\\n        index = Math.floor((i + 1) * Math.random());\\n        item = sData[index];\\n        sData[index] = sData[i];\\n        sData[i] = item;\\n    }\\n    return sData.slice(min);\\n}\\n\\nvar secondsToTime = function(seconds) {\\n    var hours = Math.floor(seconds / 3600);\\n    var minutes = Math.floor((seconds - (hours * 3600)) / 60);\\n    var seconds = seconds - (hours * 3600) - (minutes * 60);\\n\\n    // round seconds\\n    seconds = Math.round(seconds * 100) / 100\\n\\n    var result = (hours < 10 ? \\\"0\\\" + hours : hours);\\n    result += \\\":\\\" + (minutes < 10 ? \\\"0\\\" + minutes : minutes);\\n    result += \\\":\\\" + (seconds < 10 ? \\\"0\\\" + seconds : seconds);\\n    return result;\\n}\\nif (!getItem('tx_Types', '')) {\\n    let homeUrl = \\\"https://v.qq.com/\\\";\\n    let homeHtml = fetch(homeUrl, {\\n        headers: {\\n            \\\"User-Agent\\\": PC_UA,\\n            \\\"Referer\\\": \\\"https://v.qq.com/\\\"\\n        }\\n    });\\n    let jdata = homeHtml.match(/window.__INITIAL_STATE__(.*?)=(.*?)<\\\\//)[2];\\n    //log(jdata)\\n    //writeFile('hiker://files/cache/tx.json', jdata);       \\n    let TypeFile = JSON.parse(jdata).storeUniversalData.channelListData.channelList;\\n    //log(TypeFile)\\n    setItem('tx_Types', JSON.stringify(TypeFile));\\n    //writeFile(\\\"hiker://files/cache/tx_Types.json\\\", JSON.stringify(TypeFile));\\n}\\n\\n\\nif(!getMyVar(\\\"channel\\\")){\\nputMyVar(\\\"homeType\\\", \\\"动漫\\\");\\n    putMyVar(\\\"channel\\\", \\\"100119\\\");\\n}\\n//body初始值\\nvar body = {\\n    page_context: null,\\n    page_params: {\\n        page_id: getMyVar(\\\"channel\\\", \\\"100101\\\"),\\n        page_type: \\\"channel\\\"\\n    },\\n    page_bypass_params: {\\n        params: {\\n            caller_id: \\\"3000010\\\",\\n            data_mode: \\\"default\\\",\\n            page_id: getMyVar(\\\"channel\\\", \\\"100101\\\"),\\n            page_type: \\\"channel\\\",\\n            platform_id: \\\"2\\\",\\n            user_mode: \\\"default\\\"\\n        },\\n        scene: \\\"channel\\\",\\n        abtest_bypass_id: \\\"\\\" //cookie中的video_guid的值\\n    }\\n};\\nif (getMyVar(\\\"channel_first_class\\\")) {\\n    body.page_context = {\\n        \\\"page_index\\\": (page - 1).toString()\\n    };\\n    body.page_params.channel_first_class = getMyVar(\\\"channel_first_class\\\");\\n}\\n//log(body)\\nif (page == 1) {\\n    //let homeTypes = JSON.parse(readFile(\\\"hiker://files/cache/tx_Types.json\\\"));\\n    let homeTypes = JSON.parse(getItem('tx_Types'));\\n    homeTypes.forEach(it => {\\n        let name = it.channel_name;\\n        if (!/游戏中心|VIP|游戏库|WWE/.test(name)) {\\n            d.push({\\n                title: getMyVar('homeType', \\\"精选\\\") === name ? '♥' + '““””<b><font color=#FA7298>' + name + '</font></b>' : name,\\n                url: $('#noLoading##noHistory#').lazyRule((name, unChannelId) => {\\n                    putMyVar(\\\"homeType\\\", name);\\n                    putMyVar(\\\"channel\\\", unChannelId);\\n                    clearMyVar(\\\"shelvesList\\\");\\n                    clearMyVar(\\\"shelves_Loadindex\\\");\\n                    clearMyVar(\\\"video_Loadindex\\\");\\n                    clearMyVar(\\\"channel_first_class\\\");\\n                    refreshPage(true); //false刷新不回滚到页面顶部\\n                    return \\\"hiker://empty\\\"\\n                }, name, it.channel_id),\\n                col_type: \\\"scroll_button\\\"\\n            });\\n        }\\n    })\\n    d.push({\\n        col_type: \\\"blank_block\\\"\\n    });\\n\\n    var homefetchData = JSON.parse(fetchPC(M[1], {\\n        headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"referer\\\": \\\"https://v.qq.com/\\\",\\n            \\\"Cookie\\\": \\\"video_platform=2\\\"\\n        },\\n        method: \\\"POST\\\",\\n        body: body\\n    }))\\n    //log(fData)\\n    var homeCardList = homefetchData.data.CardList;\\n    var has_next_page = homefetchData.data.has_next_page;\\n    putMyVar(\\\"has_next_page\\\", has_next_page);\\n}\\n//log(homeCardList)\\n//log(has_next_page)\\nfunction Load_page_view(homeCardList) {\\n    function pushData(push_lists, secondsToTime, extra_param) {\\n        let temp_lists = [];\\n        push_lists.forEach((item, index) => {\\n            //log(item)                  \\n            try {\\n                if (item.params.type != \\\"h5\\\") {\\n                    let pic = item.params.new_pic_vt || item.params.image_url || item.params.new_pic_hz || item.params.image_url_vertical || item.params.pic_540x304 || item.params.pic496x280;\\n                    if (/\\\\.jpg\\\\//.test(pic)) {\\n                        let index = pic.lastIndexOf(\\\"\\\\/\\\");\\n                        pic = pic.substring(0, index + 1);\\n                    }\\n                    let des = \\\"\\\";\\n                    if (item.params.imgtag) {\\n                        if (/tag_2|tag_3/.test(item.params.imgtag)) {\\n                            let imgtag = JSON.parse(item.params.imgtag);\\n                            //log(imgtag)                     \\n                            des = imgtag.tag_3.text ? imgtag.tag_3.text : imgtag.tag_2.text.split(\\\"-\\\")[0]\\n                        } else {\\n                            des = item.params.imgtag;\\n                        }\\n                    } else {\\n                        des = item.params.timelong || item.params.publish_date || item.params.episode_updated || (item.params.duration ? secondsToTime(item.params.duration) : \\\"\\\") || (item.params.cms_isvip == 1 ? \\\"VIP\\\" : \\\"\\\");\\n                    }\\n                    let param_cid = \\\"\\\";\\n                    if (item.params.cid) {\\n                        param_cid = item.params.cid;\\n                    } else if (item.params.attached_id) {\\n                        param_cid = item.params.attached_id;\\n                    }\\n\\n\\n/*if(MY_RULE.title==\\\"聚阅√\\\"){\\nvar sname =JSON.parse(fetch(\\\"hiker://files/rules/Src/Ju/config.json\\\"))[\\\"影视sourcename\\\"]\\n}\\n          var extra= {\\n                            \\n     img:pic,\\n              pageTitle:item.params.title,\\n        name:item.params.title,                 \\n           sname: sname,\\n    \\\"stype\\\":\\\"影视\\\",                 surl:\\\"https://pbaccess.video.QQ.com/$\\\" + param_cid + \\\"$\\\" + (item.params.vid ? item.params.vid : \\\"\\\")\\n                        };\\n\\nif(MY_RULE.title==\\\"腾讯视频\\\"){\\nextra.url=\\\"hiker://empty$\\\" + param_cid + \\\"$\\\" + (item.params.vid ? item.params.vid : \\\"\\\") + \\\"#immersiveTheme#\\\"\\n\\n}*/\\n\\n          \\n                    if (extra_param) {\\n\\nextra.cls= extra_param;\\n\\n                        temp_lists.push({\\n                            title: item.params.title,\\n                            desc: des,\\n                            pic_url: pic,\\n                            url: \\\"hiker://page/ej_page\\\",\\n                        extra: {\\nimg:pic,\\nurl: \\\"hiker://empty$\\\" + param_cid + \\\"$\\\" + (item.params.vid ? item.params.vid : \\\"\\\") + \\\"#immersiveTheme#\\\"\\n\\n}\\n                                                    })\\n                    } else {\\n                        temp_lists.push({\\n                            title: item.params.title,\\n                            desc: des,\\n                            pic_url: pic,\\n                             url: \\\"hiker://page/ej_page\\\",\\n                        extra: {\\nurl: \\\"hiker://empty$\\\" + param_cid + \\\"$\\\" + (item.params.vid ? item.params.vid : \\\"\\\") + \\\"#immersiveTheme#\\\"\\n}\\n                            \\n                        })\\n                    }\\n                }\\n            } catch (e) {\\n                log(e.toString())\\n                log(item)\\n            }\\n        });\\n        return temp_lists\\n    }\\n\\n    homeCardList.forEach((item) => {\\n        //log(item.type)\\n        /*\\n        if (/http/.test(item.children_list.list.cards[0].id))\\n            return*/\\n        if (item.type == \\\"pc_carousel\\\") {\\n            //海报列表\\n            /*\\n            log(\\\"加载海报\\\")       \\n            putVar(\\\"pc_carousel\\\", JSON.stringify(item.children_list.list.cards))\\n            d.push({\\n                url: getPath('hiker://files/TyrantG/public/tx_banners.html'),\\n                col_type: \\\"x5_webview_single\\\",\\n                extra: {\\n                    desc: \\\"auto\\\"\\n                }\\n            })*/\\n        } else if (item.type == \\\"pc_hot_filter\\\") {\\n            //热门分类推荐            \\n            var pc_hot_filter = item.children_list.list.cards;\\n            //log(pc_hot_filter)\\n            if (item.id == \\\"40_1c49e\\\") {\\n                pc_hot_filter.forEach(it => {\\n                    let name = it.params.label_title;\\n                    d.push({\\n                        title: getMyVar('freeType') === name ? '““””<b><font color=#00FFFF>' + name + '</font></b>' : name,\\n                        url: $('#noLoading##noHistory#').lazyRule((name, filter_value) => {\\n                            putMyVar(\\\"freeType\\\", name);\\n                            putMyVar(\\\"channel_first_class\\\", filter_value);\\n                            refreshPage(false); //false刷新不回滚到页面顶部\\n                            return \\\"hiker://empty\\\"\\n                        }, name, it.params.filter_value),\\n                        col_type: \\\"scroll_button\\\"\\n                    });\\n\\n                })\\n            } else {\\n                pc_hot_filter.forEach((item) => {\\n                    d.push({\\n                        title: item.params.label_title,\\n                        url:M[1] + \\\"##fypage\\\"+ $(\\\"\\\").rule(()=>{\\n               if(!getMyVar(\\\"channel\\\")){\\n                   putMyVar(\\\"homeType\\\", \\\"动漫\\\");\\n    putMyVar(\\\"channel\\\", \\\"100119\\\");\\n               }                     \\n                                    eval(JSON.parse(fetch(\\\"hiker://page/channel_list_filter?rule=腾讯视频\\\")).rule)\\n                                }),\\n                        col_type: \\\"scroll_button\\\",\\n                        extra: {\\n                            url: M[1] + \\\"##fypage\\\",\\n                            filter_value: item.params.filter_value,\\n                            page_id: item.params.page_id\\n                        }\\n                    });\\n                });\\n            }\\n        } else if (item.type == \\\"pc_shelves\\\") {\\n            //log(item)\\n            if (getMyVar(\\\"shelves_Loadindex\\\", \\\"1\\\") == \\\"1\\\") {\\n                //第一次加载              \\n                var shelvesList = item.children_list.list.cards;\\n                d.push({\\n                    title: item.params.ZT_leaf_head? item.params.ZT_leaf_head:\\\"推荐\\\"+ '\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t换一换🔁',\\n                    pic_url: \\\"http://123.56.105.145/tubiao/q/136.png@Referer=\\\",\\n                    url: $().lazyRule((shelvesList, getRandomArrayValue, secondsToTime, pushData) => {\\n                        let sheLists = getRandomArrayValue(shelvesList, 6);\\n                        //log(getRandomArrayValue.toString())\\n                        //log(secondsToTime.toString())\\n                        var sherandomLists = pushData(sheLists, secondsToTime, \\\"shelvesLists\\\");\\n                        //log(sherandomLists)                   \\n                        if (sherandomLists) {\\n                            deleteItemByCls('shelvesLists');\\n                            addItemAfter('ZT_leaf_head_1', sherandomLists);\\n                        }\\n                        return 'hiker://empty'\\n                    }, shelvesList, getRandomArrayValue, secondsToTime, pushData),\\n                    col_type: \\\"avatar\\\",\\n                    extra: {\\n                        id: \\\"ZT_leaf_head_1\\\"\\n                    }\\n                });\\n                var shelvesData = getRandomArrayValue(shelvesList, 6);\\n                Array.prototype.push.apply(d, pushData(shelvesData, secondsToTime, \\\"shelvesLists\\\"));\\n                putMyVar(\\\"shelves_Loadindex\\\", \\\"2\\\")\\n            } else {\\n                d.push({\\n                    title: item.params.ZT_leaf_head,\\n                    pic_url: \\\"http://123.56.105.145/tubiao/messy/167.svg@Referer=\\\",\\n                    url: $(\\\"#noRecordHistory##noLoading#\\\").lazyRule(() => {\\n                        return 'hiker://empty'\\n                    }),\\n                    col_type: \\\"avatar\\\"\\n                });\\n                var shelvesList = item.children_list.list.cards;\\n                Array.prototype.push.apply(d, pushData(shelvesList, secondsToTime));\\n            }\\n        } else if (item.type == \\\"channel_play_schedule\\\") {\\n            //动漫追番时间表           \\n            let c_p_schedule = item.children_list.list.cards;\\n            let flip_info = item.flip_infos.tab;\\n            if (flip_info) {\\n                putMyVar(\\\"flip_info\\\", JSON.stringify(flip_info));\\n            }\\n            //log(c_p_schedule)\\n            var sctitleArr = [];\\n            c_p_schedule.forEach((item, index) => {\\n                if (index < 7) {\\n                    let title = item.params.title;\\n                    sctitleArr.push(title);\\n                    if (index == 6) {\\n                        putMyVar(\\\"sctitleArr\\\", JSON.stringify(sctitleArr))\\n                    }\\n                    //log(sctitleArr)\\n                    let data_key = item.params.data_key;\\n                    d.push({\\n                        title: getMyVar('week', \\\"今天\\\") === title ? '““””<b><font color=#FA7298>' + title + '</font></b>' : title,\\n                        url: $('#noLoading##noHistory#').lazyRule((title, data_key, index, pushData, secondsToTime) => {\\n                            putMyVar(\\\"week\\\", title);\\n                            //putMyVar(\\\"data_key\\\", data_key);\\n                            //log(data_key)                          \\n                            var data_key_Obj = new Object();\\n                            var data_keys = data_key.split(\\\"&\\\");\\n                            for (var i = 0; i < data_keys.length; i++) {\\n                                data_key_Obj[data_keys[i].split(\\\"=\\\")[0]] = unescape(data_keys[i].split(\\\"=\\\")[1]);\\n                            }\\n                            //log(data_key_Obj)\\n                            //log(JSON.parse(getMyVar(\\\"flip_info\\\")))\\n                            let pUrl = \\\"https://pbaccess.video.qq.com/trpc.vector_layout.page_view.PageService/getCard?video_appid=3000010\\\";\\n                            let scfetchData = JSON.parse(fetchPC(pUrl, {\\n                                headers: {\\n                                    \\\"Content-Type\\\": \\\"application/json\\\",\\n                                    \\\"referer\\\": \\\"https://v.qq.com/\\\",\\n                                    \\\"Cookie\\\": \\\"video_platform=2\\\"\\n                                },\\n                                method: \\\"POST\\\",\\n                                body: {\\n                                    \\\"page_context\\\": null,\\n                                    \\\"page_params\\\": data_key_Obj,\\n                                    \\\"flip_info\\\": JSON.parse(getMyVar(\\\"flip_info\\\") || {})\\n                                }\\n                            }));\\n                            let scards = scfetchData.data.card.children_list.list.cards;\\n                            var posterLists = pushData(scards.slice(7), secondsToTime, \\\"posterLists\\\");\\n\\n                            if (posterLists) {\\n                                //log(posterLists)\\n                                var sctitleArr = JSON.parse(getMyVar(\\\"sctitleArr\\\"));\\n                                updateItem(\\\"week_id_\\\" + getMyVar(\\\"sctitleNum\\\", \\\"0\\\"), {\\n                                    title: sctitleArr[parseInt(getMyVar(\\\"sctitleNum\\\", \\\"0\\\"))]\\n                                });\\n\\n                                updateItem(\\\"week_id_\\\" + index, {\\n                                    title: '““””<b><font color=#FA7298>' + title + '</font></b>'\\n                                });\\n\\n                                putMyVar(\\\"sctitleNum\\\", index);\\n                                deleteItemByCls('posterLists');\\n                                addItemAfter('week_id_6', posterLists);\\n                            }\\n                            return \\\"hiker://empty\\\"\\n                        }, title, data_key, index, pushData, secondsToTime),\\n                        col_type: \\\"flex_button\\\",\\n                        extra: {\\n                            id: \\\"week_id_\\\" + index\\n                        }\\n                    });\\n                }\\n            })\\n            Array.prototype.push.apply(d, pushData(c_p_schedule.slice(7), secondsToTime, \\\"posterLists\\\"));\\n        } else if (item.type == \\\"pc_video\\\") {\\n            //为你推荐\\n            if (getMyVar(\\\"video_Loadindex\\\", \\\"1\\\") == \\\"1\\\") {\\n                d.push({\\n                    title: '为你推荐',\\n                    url: \\\"hiker://empty\\\",\\n                    col_type: \\\"text_1\\\"\\n                });\\n            }\\n            var pc_video = item.children_list.list.cards;\\n            Array.prototype.push.apply(d, pushData(pc_video, secondsToTime));\\n\\n            putMyVar(\\\"video_Loadindex\\\", (parseInt(getMyVar(\\\"video_Loadindex\\\", \\\"1\\\")) + 1))\\n        }\\n    })\\n}\\n//log(page)\\n//log(getMyVar(\\\"has_next_page\\\"))\\nfunction load_page_index(page) {\\n    body.page_context = {\\n        \\\"page_index\\\": page.toString()\\n    };\\n    //log(body)\\n    var homefetchData = JSON.parse(fetchPC(M[1], {\\n        headers: {\\n            \\\"Content-Type\\\": \\\"application/json\\\",\\n            \\\"referer\\\": \\\"https://v.qq.com/\\\",\\n            \\\"Cookie\\\": \\\"video_platform=2\\\"\\n        },\\n        method: \\\"POST\\\",\\n        body: body\\n    }))\\n    //log(homefetchData)\\n    var homeCardList = homefetchData.data.CardList;\\n    var has_next_page = homefetchData.data.has_next_page;\\n    putMyVar(\\\"has_next_page\\\", has_next_page)\\n    Load_page_view(homeCardList)\\n}\\n\\nif (page == 1) {\\n    Load_page_view(homeCardList)\\n    if (getMyVar(\\\"has_next_page\\\") == \\\"true\\\") {\\n        //log(getMyVar(\\\"has_next_page\\\"))\\n        load_page_index(page)\\n    }\\n} else if (getMyVar(\\\"has_next_page\\\") == \\\"true\\\") {\\n    load_page_index(page)\\n}\"}]","proxy":"","icon":"http://123.56.105.145/tubiao/movie/31.svg"}